
SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008790  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a64  08008a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e4  2000000c  08008a74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200016f0  08008a74  000216f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f05  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003157  00000000  00000000  00036f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4c  00000000  00000000  0003b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002918d  00000000  00000000  0003c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abdf  00000000  00000000  00065569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f85c1  00000000  00000000  00080148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005280  00000000  00000000  0017870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0017d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008940 	.word	0x08008940

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08008940 	.word	0x08008940

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 f866 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f861 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f93d 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 f915 	bl	8000744 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800051a:	f000 f8c3 	bl	80006a4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800051e:	f005 fdcf 	bl	80060c0 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000522:	f000 f8df 	bl	80006e4 <MX_USART1_UART_Init>
//  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	4922      	ldr	r1, [pc, #136]	; (80005b4 <main+0xb0>)
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <main+0xb4>)
 800052c:	f007 fd58 	bl	8007fe0 <f_mount>



    n = (f_open(&SDFile,"STM.txt",FA_READ) !=FR_OK);
 8000530:	2201      	movs	r2, #1
 8000532:	4922      	ldr	r1, [pc, #136]	; (80005bc <main+0xb8>)
 8000534:	4822      	ldr	r0, [pc, #136]	; (80005c0 <main+0xbc>)
 8000536:	f007 fd99 	bl	800806c <f_open>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xc0>)
 800054a:	701a      	strb	r2, [r3, #0]
    if (n != FR_OK){
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0xc0>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d007      	beq.n	8000564 <main+0x60>
   	 Error_Handler();
 8000554:	f000 fd80 	bl	8001058 <Error_Handler>

 /* USER CODE END 2 */

 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (f_gets(ftext[i],sizeof ftext[i],&SDFile))
 8000558:	e004      	b.n	8000564 <main+0x60>

    /* USER CODE BEGIN 3 */


//	 HAL_UART_Transmit(&huart1,ftext[i],sizeof(ftext[i]),1000);
	 i+=1;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <main+0xc4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <main+0xc4>)
 8000562:	6013      	str	r3, [r2, #0]
 while (f_gets(ftext[i],sizeof ftext[i],&SDFile))
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <main+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	01db      	lsls	r3, r3, #7
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <main+0xc8>)
 800056c:	4413      	add	r3, r2
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <main+0xbc>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4618      	mov	r0, r3
 8000574:	f008 f91f 	bl	80087b6 <f_gets>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1ed      	bne.n	800055a <main+0x56>

 }
    for(int j=0;j<16;j++){
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	e00c      	b.n	800059e <main+0x9a>

    	HAL_UART_Transmit(&huart1,ftext[j],sizeof(ftext[j]),1000);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	01db      	lsls	r3, r3, #7
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <main+0xc8>)
 800058a:	1899      	adds	r1, r3, r2
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0xcc>)
 8000594:	f004 fbda 	bl	8004d4c <HAL_UART_Transmit>
    for(int j=0;j<16;j++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddef      	ble.n	8000584 <main+0x80>
    }
    f_close(&SDFile);
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0xbc>)
 80005a6:	f008 f8dc 	bl	8008762 <f_close>
 80005aa:	2300      	movs	r3, #0
//    for(int j=0;j<NUM_SAMPLES;j++){
//    	HAL_UART_Transmit(&huart1,tx[i],sizeof(tx[i]),1000);
//    }
  /* USER CODE END 3 */
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20001250 	.word	0x20001250
 80005b8:	20001254 	.word	0x20001254
 80005bc:	08008958 	.word	0x08008958
 80005c0:	20001484 	.word	0x20001484
 80005c4:	200001f4 	.word	0x200001f4
 80005c8:	200011f8 	.word	0x200011f8
 80005cc:	200001f8 	.word	0x200001f8
 80005d0:	2000016c 	.word	0x2000016c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 f97f 	bl	80088e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xc8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xcc>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000644:	2332      	movs	r3, #50	; 0x32
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fe77 	bl	8002348 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000660:	f000 fcfa 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2101      	movs	r1, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f904 	bl	8002890 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800068e:	f000 fce3 	bl	8001058 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006aa:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <MX_SDMMC1_SD_Init+0x3c>)
 80006ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <MX_SDMMC1_SD_Init+0x38>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40012c00 	.word	0x40012c00

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART1_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART1_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x58>)
 8000728:	f004 fac2 	bl	8004cb0 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 fc91 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000016c 	.word	0x2000016c
 8000740:	40011000 	.word	0x40011000

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_DMA_Init+0x48>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_DMA_Init+0x48>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_DMA_Init+0x48>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	203b      	movs	r0, #59	; 0x3b
 8000768:	f001 f840 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800076c:	203b      	movs	r0, #59	; 0x3b
 800076e:	f001 f859 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2045      	movs	r0, #69	; 0x45
 8000778:	f001 f838 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800077c:	2045      	movs	r0, #69	; 0x45
 800077e:	f001 f851 	bl	8001824 <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	; 0x40
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	4bad      	ldr	r3, [pc, #692]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aac      	ldr	r2, [pc, #688]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4baa      	ldr	r3, [pc, #680]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4ba7      	ldr	r3, [pc, #668]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4aa6      	ldr	r2, [pc, #664]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4ba4      	ldr	r3, [pc, #656]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4ba1      	ldr	r3, [pc, #644]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4aa0      	ldr	r2, [pc, #640]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b9e      	ldr	r3, [pc, #632]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
 80007ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b9b      	ldr	r3, [pc, #620]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a9a      	ldr	r2, [pc, #616]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b98      	ldr	r3, [pc, #608]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a94      	ldr	r2, [pc, #592]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b8f      	ldr	r3, [pc, #572]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a8e      	ldr	r2, [pc, #568]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b8c      	ldr	r3, [pc, #560]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000836:	4b89      	ldr	r3, [pc, #548]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a88      	ldr	r2, [pc, #544]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800083c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800084e:	4b83      	ldr	r3, [pc, #524]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a82      	ldr	r2, [pc, #520]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b80      	ldr	r3, [pc, #512]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000866:	4b7d      	ldr	r3, [pc, #500]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a7c      	ldr	r2, [pc, #496]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800086c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b7a      	ldr	r3, [pc, #488]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a76      	ldr	r2, [pc, #472]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b71      	ldr	r3, [pc, #452]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a70      	ldr	r2, [pc, #448]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b6e      	ldr	r3, [pc, #440]	; (8000a5c <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2120      	movs	r1, #32
 80008b2:	486b      	ldr	r0, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x2d0>)
 80008b4:	f001 fd2e 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f241 010c 	movw	r1, #4108	; 0x100c
 80008be:	4869      	ldr	r0, [pc, #420]	; (8000a64 <MX_GPIO_Init+0x2d4>)
 80008c0:	f001 fd28 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	4867      	ldr	r0, [pc, #412]	; (8000a68 <MX_GPIO_Init+0x2d8>)
 80008ca:	f001 fd23 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	4865      	ldr	r0, [pc, #404]	; (8000a6c <MX_GPIO_Init+0x2dc>)
 80008d6:	f001 fd1d 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	21c8      	movs	r1, #200	; 0xc8
 80008de:	4864      	ldr	r0, [pc, #400]	; (8000a70 <MX_GPIO_Init+0x2e0>)
 80008e0:	f001 fd18 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008f4:	230e      	movs	r3, #14
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	485d      	ldr	r0, [pc, #372]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000900:	f001 fb44 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000904:	2308      	movs	r3, #8
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	4857      	ldr	r0, [pc, #348]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000918:	f001 fb38 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800092c:	2309      	movs	r3, #9
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000934:	4619      	mov	r1, r3
 8000936:	484f      	ldr	r0, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000938:	f001 fb28 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800093c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094e:	230b      	movs	r3, #11
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <MX_GPIO_Init+0x2e0>)
 800095a:	f001 fb17 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800095e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000970:	230c      	movs	r3, #12
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	483e      	ldr	r0, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 800097c:	f001 fb06 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 800099e:	f001 faf5 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009a2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009b4:	230a      	movs	r3, #10
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009bc:	4619      	mov	r1, r3
 80009be:	482e      	ldr	r0, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 80009c0:	f001 fae4 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009c4:	2310      	movs	r3, #16
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009d4:	2302      	movs	r3, #2
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x2e8>)
 80009e0:	f001 fad4 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80009f4:	2308      	movs	r3, #8
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_GPIO_Init+0x2d0>)
 8000a00:	f001 fac4 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a16:	2301      	movs	r3, #1
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_GPIO_Init+0x2ec>)
 8000a22:	f001 fab3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a36:	230d      	movs	r3, #13
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_GPIO_Init+0x2e4>)
 8000a42:	f001 faa3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a56:	230a      	movs	r3, #10
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a5a:	e011      	b.n	8000a80 <MX_GPIO_Init+0x2f0>
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40022000 	.word	0x40022000
 8000a68:	40022800 	.word	0x40022800
 8000a6c:	40021c00 	.word	0x40021c00
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	48bd      	ldr	r0, [pc, #756]	; (8000d7c <MX_GPIO_Init+0x5ec>)
 8000a88:	f001 fa80 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a8c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	48b5      	ldr	r0, [pc, #724]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000aaa:	f001 fa6f 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000aae:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	48ae      	ldr	r0, [pc, #696]	; (8000d84 <MX_GPIO_Init+0x5f4>)
 8000acc:	f001 fa5e 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	48a7      	ldr	r0, [pc, #668]	; (8000d84 <MX_GPIO_Init+0x5f4>)
 8000ae6:	f001 fa51 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afc:	4619      	mov	r1, r3
 8000afe:	48a2      	ldr	r0, [pc, #648]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000b00:	f001 fa44 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b04:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b16:	230c      	movs	r3, #12
 8000b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4899      	ldr	r0, [pc, #612]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000b22:	f001 fa33 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b40:	4619      	mov	r1, r3
 8000b42:	4892      	ldr	r0, [pc, #584]	; (8000d8c <MX_GPIO_Init+0x5fc>)
 8000b44:	f001 fa22 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b48:	23f0      	movs	r3, #240	; 0xf0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b60:	4619      	mov	r1, r3
 8000b62:	488b      	ldr	r0, [pc, #556]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000b64:	f001 fa12 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b68:	23f7      	movs	r3, #247	; 0xf7
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4884      	ldr	r0, [pc, #528]	; (8000d94 <MX_GPIO_Init+0x604>)
 8000b84:	f001 fa02 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4876      	ldr	r0, [pc, #472]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000ba6:	f001 f9f1 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	486e      	ldr	r0, [pc, #440]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000bc8:	f001 f9e0 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4869      	ldr	r0, [pc, #420]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000be4:	f001 f9d2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000be8:	2308      	movs	r3, #8
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bf8:	230d      	movs	r3, #13
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	4861      	ldr	r0, [pc, #388]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000c04:	f001 f9c2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c08:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	485b      	ldr	r0, [pc, #364]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000c22:	f001 f9b3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4857      	ldr	r0, [pc, #348]	; (8000d98 <MX_GPIO_Init+0x608>)
 8000c3c:	f001 f9a6 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c40:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c52:	230c      	movs	r3, #12
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	484f      	ldr	r0, [pc, #316]	; (8000d9c <MX_GPIO_Init+0x60c>)
 8000c5e:	f001 f995 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c62:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4844      	ldr	r0, [pc, #272]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000c80:	f001 f984 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c84:	2308      	movs	r3, #8
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483e      	ldr	r0, [pc, #248]	; (8000d94 <MX_GPIO_Init+0x604>)
 8000c9c:	f001 f976 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cb2:	230d      	movs	r3, #13
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4830      	ldr	r0, [pc, #192]	; (8000d80 <MX_GPIO_Init+0x5f0>)
 8000cbe:	f001 f965 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482c      	ldr	r0, [pc, #176]	; (8000d88 <MX_GPIO_Init+0x5f8>)
 8000cd6:	f001 f959 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cda:	f248 0304 	movw	r3, #32772	; 0x8004
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000cf0:	f001 f94c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000d10:	f001 f93c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000d2e:	f001 f92d 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d32:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d44:	230d      	movs	r3, #13
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <MX_GPIO_Init+0x610>)
 8000d50:	f001 f91c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d64:	2302      	movs	r3, #2
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x600>)
 8000d70:	f001 f90c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	e014      	b.n	8000da4 <MX_GPIO_Init+0x614>
 8000d7a:	bf00      	nop
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40021800 	.word	0x40021800
 8000d84:	40022400 	.word	0x40022400
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40022000 	.word	0x40022000
 8000d94:	40022800 	.word	0x40022800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40021400 	.word	0x40021400
 8000da0:	40021c00 	.word	0x40021c00
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4895      	ldr	r0, [pc, #596]	; (8001014 <MX_GPIO_Init+0x884>)
 8000dbe:	f001 f8e5 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	488f      	ldr	r0, [pc, #572]	; (8001018 <MX_GPIO_Init+0x888>)
 8000dda:	f001 f8d7 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000dde:	23c0      	movs	r3, #192	; 0xc0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dee:	2308      	movs	r3, #8
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4888      	ldr	r0, [pc, #544]	; (800101c <MX_GPIO_Init+0x88c>)
 8000dfa:	f001 f8c7 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e0e:	230a      	movs	r3, #10
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4881      	ldr	r0, [pc, #516]	; (8001020 <MX_GPIO_Init+0x890>)
 8000e1a:	f001 f8b7 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e1e:	2328      	movs	r3, #40	; 0x28
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4879      	ldr	r0, [pc, #484]	; (8001020 <MX_GPIO_Init+0x890>)
 8000e3a:	f001 f8a7 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e3e:	23c8      	movs	r3, #200	; 0xc8
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4873      	ldr	r0, [pc, #460]	; (8001024 <MX_GPIO_Init+0x894>)
 8000e56:	f001 f899 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000e5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	486e      	ldr	r0, [pc, #440]	; (8001028 <MX_GPIO_Init+0x898>)
 8000e70:	f001 f88c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e74:	2308      	movs	r3, #8
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4863      	ldr	r0, [pc, #396]	; (800101c <MX_GPIO_Init+0x88c>)
 8000e90:	f001 f87c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e94:	2305      	movs	r3, #5
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	485b      	ldr	r0, [pc, #364]	; (800101c <MX_GPIO_Init+0x88c>)
 8000eb0:	f001 f86c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb4:	2332      	movs	r3, #50	; 0x32
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4853      	ldr	r0, [pc, #332]	; (800101c <MX_GPIO_Init+0x88c>)
 8000ed0:	f001 f85c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	484f      	ldr	r0, [pc, #316]	; (800102c <MX_GPIO_Init+0x89c>)
 8000ef0:	f001 f84c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000ef4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f06:	2309      	movs	r3, #9
 8000f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4847      	ldr	r0, [pc, #284]	; (8001030 <MX_GPIO_Init+0x8a0>)
 8000f12:	f001 f83b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f16:	2304      	movs	r3, #4
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	483e      	ldr	r0, [pc, #248]	; (8001024 <MX_GPIO_Init+0x894>)
 8000f2a:	f001 f82f 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f2e:	2386      	movs	r3, #134	; 0x86
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f46:	4619      	mov	r1, r3
 8000f48:	4832      	ldr	r0, [pc, #200]	; (8001014 <MX_GPIO_Init+0x884>)
 8000f4a:	f001 f81f 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f52:	2303      	movs	r3, #3
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	482c      	ldr	r0, [pc, #176]	; (8001014 <MX_GPIO_Init+0x884>)
 8000f62:	f001 f813 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f66:	2350      	movs	r3, #80	; 0x50
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f76:	230d      	movs	r3, #13
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4824      	ldr	r0, [pc, #144]	; (8001014 <MX_GPIO_Init+0x884>)
 8000f82:	f001 f803 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000f86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481f      	ldr	r0, [pc, #124]	; (8001020 <MX_GPIO_Init+0x890>)
 8000fa4:	f000 fff2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fa8:	2328      	movs	r3, #40	; 0x28
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <MX_GPIO_Init+0x884>)
 8000fc4:	f000 ffe2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000fc8:	2340      	movs	r3, #64	; 0x40
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <MX_GPIO_Init+0x890>)
 8000fe4:	f000 ffd2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000fe8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_GPIO_Init+0x89c>)
 8001006:	f000 ffc1 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100a:	bf00      	nop
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020000 	.word	0x40020000
 8001018:	40022000 	.word	0x40022000
 800101c:	40020800 	.word	0x40020800
 8001020:	40021c00 	.word	0x40021c00
 8001024:	40021800 	.word	0x40021800
 8001028:	40021400 	.word	0x40021400
 800102c:	40020400 	.word	0x40020400
 8001030:	40020c00 	.word	0x40020c00

08001034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001046:	f000 fad5 	bl	80015f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40001000 	.word	0x40001000

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ac      	sub	sp, #176	; 0xb0
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	2284      	movs	r2, #132	; 0x84
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fc0a 	bl	80088e6 <memset>
  if(hsd->Instance==SDMMC1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a73      	ldr	r2, [pc, #460]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	f040 80de 	bne.w	800129a <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80010e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80010e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fde5 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80010fc:	f7ff ffac 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001100:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800110a:	6453      	str	r3, [r2, #68]	; 0x44
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a62      	ldr	r2, [pc, #392]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a5c      	ldr	r2, [pc, #368]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001148:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800114c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001162:	230c      	movs	r3, #12
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116c:	4619      	mov	r1, r3
 800116e:	484f      	ldr	r0, [pc, #316]	; (80012ac <HAL_SD_MspInit+0x200>)
 8001170:	f000 ff0c 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001174:	2304      	movs	r3, #4
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800118c:	230c      	movs	r3, #12
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001196:	4619      	mov	r1, r3
 8001198:	4845      	ldr	r0, [pc, #276]	; (80012b0 <HAL_SD_MspInit+0x204>)
 800119a:	f000 fef7 	bl	8001f8c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800119e:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011a0:	4a45      	ldr	r2, [pc, #276]	; (80012b8 <HAL_SD_MspInit+0x20c>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80011a4:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011d2:	2220      	movs	r2, #32
 80011d4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011dc:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011de:	2204      	movs	r2, #4
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011e4:	2203      	movs	r2, #3
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80011f8:	482e      	ldr	r0, [pc, #184]	; (80012b4 <HAL_SD_MspInit+0x208>)
 80011fa:	f000 fb21 	bl	8001840 <HAL_DMA_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001204:	f7ff ff28 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <HAL_SD_MspInit+0x208>)
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_SD_MspInit+0x208>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <HAL_SD_MspInit+0x214>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_SD_MspInit+0x210>)
 800121c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001220:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_SD_MspInit+0x210>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001240:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001244:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001248:	2220      	movs	r2, #32
 800124a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_SD_MspInit+0x210>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001254:	2204      	movs	r2, #4
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_SD_MspInit+0x210>)
 800125a:	2203      	movs	r2, #3
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800126e:	4813      	ldr	r0, [pc, #76]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001270:	f000 fae6 	bl	8001840 <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800127a:	f7ff feed 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_SD_MspInit+0x210>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2031      	movs	r0, #49	; 0x31
 8001290:	f000 faac 	bl	80017ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001294:	2031      	movs	r0, #49	; 0x31
 8001296:	f000 fac5 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	37b0      	adds	r7, #176	; 0xb0
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	200000ac 	.word	0x200000ac
 80012b8:	40026458 	.word	0x40026458
 80012bc:	2000010c 	.word	0x2000010c
 80012c0:	400264a0 	.word	0x400264a0

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ac      	sub	sp, #176	; 0xb0
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	2284      	movs	r2, #132	; 0x84
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f007 fafe 	bl	80088e6 <memset>
  if(huart->Instance==USART1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <HAL_UART_MspInit+0xf4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d15c      	bne.n	80013ae <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f4:	2340      	movs	r3, #64	; 0x40
 80012f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f8:	2300      	movs	r3, #0
 80012fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fcdd 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800130c:	f7ff fea4 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_UART_MspInit+0xf8>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <HAL_UART_MspInit+0xf8>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6453      	str	r3, [r2, #68]	; 0x44
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_UART_MspInit+0xf8>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_UART_MspInit+0xf8>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_UART_MspInit+0xf8>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_UART_MspInit+0xf8>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_UART_MspInit+0xf8>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_UART_MspInit+0xf8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_UART_MspInit+0xf8>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001370:	2307      	movs	r3, #7
 8001372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800137a:	4619      	mov	r1, r3
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <HAL_UART_MspInit+0xfc>)
 800137e:	f000 fe05 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139c:	2307      	movs	r3, #7
 800139e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_UART_MspInit+0x100>)
 80013aa:	f000 fdef 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37b0      	adds	r7, #176	; 0xb0
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013d8:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <HAL_InitTick+0xe0>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <HAL_InitTick+0xe0>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_InitTick+0xe0>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f0:	f107 0210 	add.w	r2, r7, #16
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fc2e 	bl	8002c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800140a:	f001 fbff 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 800140e:	6378      	str	r0, [r7, #52]	; 0x34
 8001410:	e004      	b.n	800141c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001412:	f001 fbfb 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8001416:	4603      	mov	r3, r0
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <HAL_InitTick+0xe4>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	3b01      	subs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_InitTick+0xe8>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <HAL_InitTick+0xec>)
 800142e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_InitTick+0xe8>)
 8001432:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001436:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_InitTick+0xe8>)
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_InitTick+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_InitTick+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_InitTick+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <HAL_InitTick+0xe8>)
 8001452:	f003 f94d 	bl	80046f0 <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800145c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11b      	bne.n	800149c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <HAL_InitTick+0xe8>)
 8001466:	f003 f9a5 	bl	80047b4 <HAL_TIM_Base_Start_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001478:	2036      	movs	r0, #54	; 0x36
 800147a:	f000 f9d3 	bl	8001824 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d808      	bhi.n	8001496 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	2036      	movs	r0, #54	; 0x36
 800148a:	f000 f9af 	bl	80017ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_InitTick+0xf0>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e002      	b.n	800149c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800149c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	200011fc 	.word	0x200011fc
 80014b4:	40001000 	.word	0x40001000
 80014b8:	20000004 	.word	0x20000004

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <SDMMC1_IRQHandler+0x10>)
 800151a:	f002 fa41 	bl	80039a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000028 	.word	0x20000028

08001528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM6_DAC_IRQHandler+0x10>)
 800152e:	f003 f9b9 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200011fc 	.word	0x200011fc

0800153c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream3_IRQHandler+0x10>)
 8001542:	f000 faad 	bl	8001aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000ac 	.word	0x200000ac

08001550 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA2_Stream6_IRQHandler+0x10>)
 8001556:	f000 faa3 	bl	8001aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000010c 	.word	0x2000010c

08001564 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a4:	4c0b      	ldr	r4, [pc, #44]	; (80015d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b2:	f7ff ffd7 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f007 f99f 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7fe ffa3 	bl	8000504 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015cc:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 80015d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d4:	200016f0 	.word	0x200016f0

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>

080015da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015de:	2003      	movs	r0, #3
 80015e0:	f000 f8f9 	bl	80017d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e4:	200f      	movs	r0, #15
 80015e6:	f7ff feef 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ea:	f7ff fd3b 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20001248 	.word	0x20001248

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20001248 	.word	0x20001248

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <__NVIC_SetPriorityGrouping+0x40>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x40>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	05fa0000 	.word	0x05fa0000

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff4c 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fe:	f7ff ff61 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001802:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	6978      	ldr	r0, [r7, #20]
 800180a:	f7ff ffb1 	bl	8001770 <NVIC_EncodePriority>
 800180e:	4602      	mov	r2, r0
 8001810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff80 	bl	800171c <__NVIC_SetPriority>
}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff54 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fee6 	bl	800161c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e099      	b.n	8001990 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187c:	e00f      	b.n	800189e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187e:	f7ff fecd 	bl	800161c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b05      	cmp	r3, #5
 800188a:	d908      	bls.n	800189e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2220      	movs	r2, #32
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e078      	b.n	8001990 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e8      	bne.n	800187e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_DMA_Init+0x158>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4313      	orrs	r3, r2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b04      	cmp	r3, #4
 8001930:	d117      	bne.n	8001962 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00e      	beq.n	8001962 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 faa5 	bl	8001e94 <DMA_CheckFifoParam>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800195e:	2301      	movs	r3, #1
 8001960:	e016      	b.n	8001990 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fa5c 	bl	8001e28 <DMA_CalcBaseAndBitshift>
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	f010803f 	.word	0xf010803f

0800199c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_DMA_Start_IT+0x26>
 80019be:	2302      	movs	r3, #2
 80019c0:	e048      	b.n	8001a54 <HAL_DMA_Start_IT+0xb8>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d137      	bne.n	8001a46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f9ee 	bl	8001dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	223f      	movs	r2, #63	; 0x3f
 80019f6:	409a      	lsls	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0216 	orr.w	r2, r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e005      	b.n	8001a52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00c      	b.n	8001a94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001aac:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <HAL_DMA_IRQHandler+0x248>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a8e      	ldr	r2, [pc, #568]	; (8001cec <HAL_DMA_IRQHandler+0x24c>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2208      	movs	r2, #8
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0204 	bic.w	r2, r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	2208      	movs	r2, #8
 8001afa:	409a      	lsls	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2201      	movs	r2, #1
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d012      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f043 0202 	orr.w	r2, r3, #2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2204      	movs	r2, #4
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2204      	movs	r2, #4
 8001b66:	409a      	lsls	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d043      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03c      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d024      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
 8001bce:	e01f      	b.n	8001c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
 8001be0:	e016      	b.n	8001c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0208 	bic.w	r2, r2, #8
 8001bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2220      	movs	r2, #32
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 808f 	beq.w	8001d40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8087 	beq.w	8001d40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2220      	movs	r2, #32
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d136      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0216 	bic.w	r2, r2, #22
 8001c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <HAL_DMA_IRQHandler+0x1da>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	223f      	movs	r2, #63	; 0x3f
 8001c90:	409a      	lsls	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d07e      	beq.n	8001dac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
        }
        return;
 8001cb6:	e079      	b.n	8001dac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10d      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e02c      	b.n	8001d40 <HAL_DMA_IRQHandler+0x2a0>
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d023      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
 8001d00:	e01e      	b.n	8001d40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10f      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0210 	bic.w	r2, r2, #16
 8001d1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d032      	beq.n	8001dae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2205      	movs	r2, #5
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d307      	bcc.n	8001d88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f2      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x2cc>
 8001d86:	e000      	b.n	8001d8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e000      	b.n	8001dae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dac:	bf00      	nop
    }
  }
}
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d108      	bne.n	8001e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e0a:	e007      	b.n	8001e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3b10      	subs	r3, #16
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <DMA_CalcBaseAndBitshift+0x60>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <DMA_CalcBaseAndBitshift+0x64>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d908      	bls.n	8001e68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	1d1a      	adds	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
 8001e66:	e006      	b.n	8001e76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	aaaaaaab 	.word	0xaaaaaaab
 8001e8c:	080089bc 	.word	0x080089bc
 8001e90:	fffffc00 	.word	0xfffffc00

08001e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d856      	bhi.n	8001f62 <DMA_CheckFifoParam+0xce>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x28>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001edf 	.word	0x08001edf
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001f63 	.word	0x08001f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d046      	beq.n	8001f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e043      	b.n	8001f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee6:	d140      	bne.n	8001f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e03d      	b.n	8001f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d121      	bne.n	8001f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d837      	bhi.n	8001f6e <DMA_CheckFifoParam+0xda>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <DMA_CheckFifoParam+0x70>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1b 	.word	0x08001f1b
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001f2d 	.word	0x08001f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e030      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d025      	beq.n	8001f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2a:	e022      	b.n	8001f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f34:	d11f      	bne.n	8001f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3a:	e01c      	b.n	8001f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d903      	bls.n	8001f4a <DMA_CheckFifoParam+0xb6>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d003      	beq.n	8001f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f48:	e018      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4e:	e015      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e00b      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f62:	bf00      	nop
 8001f64:	e00a      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f66:	bf00      	nop
 8001f68:	e008      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e006      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e004      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e002      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e175      	b.n	8002298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8164 	bne.w	8002292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x56>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80be 	beq.w	8002292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_GPIO_Init+0x324>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212e:	4a61      	ldr	r2, [pc, #388]	; (80022b4 <HAL_GPIO_Init+0x328>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_GPIO_Init+0x32c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d037      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_GPIO_Init+0x330>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x232>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x350>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x21a>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e012      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e010      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x328>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_GPIO_Init+0x354>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae86 	bls.w	8001fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e291      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236c:	4b96      	ldr	r3, [pc, #600]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00c      	beq.n	8002392 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002378:	4b93      	ldr	r3, [pc, #588]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d112      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
 8002384:	4b90      	ldr	r3, [pc, #576]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002390:	d10b      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	4b8d      	ldr	r3, [pc, #564]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06c      	beq.n	8002478 <HAL_RCC_OscConfig+0x130>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d168      	bne.n	8002478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e26b      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7a>
 80023b4:	4b84      	ldr	r3, [pc, #528]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a83      	ldr	r2, [pc, #524]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x9c>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7b      	ldr	r2, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xc0>
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6b      	ldr	r2, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff f8f8 	bl	800161c <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff f8f4 	bl	800161c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e21f      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f8e4 	bl	800161c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff f8e0 	bl	800161c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e20b      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x110>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d069      	beq.n	800255a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x190>
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1df      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	493d      	ldr	r1, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e040      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff f896 	bl	800161c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff f892 	bl	800161c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1bd      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4929      	ldr	r1, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
 8002526:	e018      	b.n	800255a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f872 	bl	800161c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7ff f86e 	bl	800161c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e199      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d038      	beq.n	80025d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d019      	beq.n	80025a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f84f 	bl	800161c <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff f84b 	bl	800161c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e176      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x23a>
 80025a0:	e01a      	b.n	80025d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff f835 	bl	800161c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7ff f831 	bl	800161c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d903      	bls.n	80025cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e15c      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
 80025c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a4 	beq.w	800272e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b8b      	ldr	r3, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a87      	ldr	r2, [pc, #540]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x4d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fff9 	bl	800161c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fff5 	bl	800161c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e120      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x31a>
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e02d      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x33c>
 800266a:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a69      	ldr	r2, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x35e>
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a5d      	ldr	r2, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x376>
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	; 0x70
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe ffa9 	bl	800161c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe ffa5 	bl	800161c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0ce      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCC_OscConfig+0x386>
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff93 	bl	800161c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe ff8f 	bl	800161c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0b8      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80a4 	beq.w	8002880 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d06b      	beq.n	800281c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d149      	bne.n	80027e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe ff60 	bl	800161c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe ff5c 	bl	800161c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e087      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4313      	orrs	r3, r2
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe ff30 	bl	800161c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe ff2c 	bl	800161c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e057      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x478>
 80027de:	e04f      	b.n	8002880 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff16 	bl	800161c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff12 	bl	800161c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03d      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4ac>
 8002812:	e035      	b.n	8002880 <HAL_RCC_OscConfig+0x538>
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x544>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d028      	beq.n	800287c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d121      	bne.n	800287c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d11a      	bne.n	800287c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002852:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	3b01      	subs	r3, #1
 8002866:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d0      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	4965      	ldr	r1, [pc, #404]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a58      	ldr	r2, [pc, #352]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 800290e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d040      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e073      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4936      	ldr	r1, [pc, #216]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe fe4a 	bl	800161c <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fe46 	bl	800161c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e053      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d210      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 020f 	bic.w	r2, r3, #15
 80029ca:	4922      	ldr	r1, [pc, #136]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	490a      	ldr	r1, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x1cc>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d0>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1d4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fcc0 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	080089a4 	.word	0x080089a4
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b090      	sub	sp, #64	; 0x40
 8002a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
 8002a74:	2300      	movs	r3, #0
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a78:	2300      	movs	r3, #0
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	f200 80a1 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9a:	e09b      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_GetSysClockFreq+0x184>)
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa0:	e09b      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa2:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aa6:	e098      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad4:	fb03 f201 	mul.w	r2, r3, r1
 8002ad8:	2300      	movs	r3, #0
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae8:	460a      	mov	r2, r1
 8002aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	4413      	add	r3, r2
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	2200      	movs	r2, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	61fa      	str	r2, [r7, #28]
 8002afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b02:	f7fd fb81 	bl	8000208 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0e:	e053      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	2200      	movs	r2, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	617a      	str	r2, [r7, #20]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b22:	f04f 0b00 	mov.w	fp, #0
 8002b26:	4652      	mov	r2, sl
 8002b28:	465b      	mov	r3, fp
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b42:	eb63 090b 	sbc.w	r9, r3, fp
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	00eb      	lsls	r3, r5, #3
 8002b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b70:	00e2      	lsls	r2, r4, #3
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	eb14 030a 	adds.w	r3, r4, sl
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	eb45 030b 	adc.w	r3, r5, fp
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	028b      	lsls	r3, r1, #10
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b98:	4621      	mov	r1, r4
 8002b9a:	028a      	lsls	r2, r1, #10
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bac:	f7fd fb2c 	bl	8000208 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetSysClockFreq+0x184>)
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3740      	adds	r7, #64	; 0x40
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	017d7840 	.word	0x017d7840

08002bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000000 	.word	0x20000000

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	080089b4 	.word	0x080089b4

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffdc 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0b5b      	lsrs	r3, r3, #13
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	080089b4 	.word	0x080089b4

08002c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	220f      	movs	r2, #15
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_RCC_GetClockConfig+0x60>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40023c00 	.word	0x40023c00

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ce8:	4b69      	ldr	r3, [pc, #420]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a68      	ldr	r2, [pc, #416]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cf2:	6093      	str	r3, [r2, #8]
 8002cf4:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	4964      	ldr	r1, [pc, #400]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d017      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	4959      	ldr	r1, [pc, #356]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d38:	d101      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d017      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d56:	4b4e      	ldr	r3, [pc, #312]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	494a      	ldr	r1, [pc, #296]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d74:	d101      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 808b 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6413      	str	r3, [r2, #64]	; 0x40
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dbc:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fc28 	bl	800161c <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fe fc24 	bl	800161c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e357      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d035      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d02e      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d114      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fbec 	bl	800161c <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fe fbe8 	bl	800161c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e319      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ee      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e76:	d111      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	4901      	ldr	r1, [pc, #4]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40007000 	.word	0x40007000
 8002e98:	0ffffcff 	.word	0x0ffffcff
 8002e9c:	4baa      	ldr	r3, [pc, #680]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4aa9      	ldr	r2, [pc, #676]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ea6:	6093      	str	r3, [r2, #8]
 8002ea8:	4ba7      	ldr	r3, [pc, #668]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	49a4      	ldr	r1, [pc, #656]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ec6:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	4a9e      	ldr	r2, [pc, #632]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ed6:	4b9c      	ldr	r3, [pc, #624]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	4999      	ldr	r1, [pc, #612]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef4:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f02:	4991      	ldr	r1, [pc, #580]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f16:	4b8c      	ldr	r3, [pc, #560]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f24:	4988      	ldr	r1, [pc, #544]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f38:	4b83      	ldr	r3, [pc, #524]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	4980      	ldr	r1, [pc, #512]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f5a:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4977      	ldr	r1, [pc, #476]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f7c:	4b72      	ldr	r3, [pc, #456]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	496f      	ldr	r1, [pc, #444]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f023 020c 	bic.w	r2, r3, #12
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	4966      	ldr	r1, [pc, #408]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fc0:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	495e      	ldr	r1, [pc, #376]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fe2:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff0:	4955      	ldr	r1, [pc, #340]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	4944      	ldr	r1, [pc, #272]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	493c      	ldr	r1, [pc, #240]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003078:	4933      	ldr	r1, [pc, #204]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309a:	492b      	ldr	r1, [pc, #172]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d011      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030bc:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030cc:	d101      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	4912      	ldr	r1, [pc, #72]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d006      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d9 	beq.w	80032ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800313c:	4b02      	ldr	r3, [pc, #8]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a01      	ldr	r2, [pc, #4]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003146:	e001      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003148:	40023800 	.word	0x40023800
 800314c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314e:	f7fe fa65 	bl	800161c <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003156:	f7fe fa61 	bl	800161c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e194      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003168:	4b6c      	ldr	r3, [pc, #432]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d021      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11d      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003196:	4b61      	ldr	r3, [pc, #388]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	0e1b      	lsrs	r3, r3, #24
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	019a      	lsls	r2, r3, #6
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	071b      	lsls	r3, r3, #28
 80031bc:	4957      	ldr	r1, [pc, #348]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02e      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ee:	d129      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031f0:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003204:	0f1b      	lsrs	r3, r3, #28
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	019a      	lsls	r2, r3, #6
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	071b      	lsls	r3, r3, #28
 8003224:	493d      	ldr	r1, [pc, #244]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003232:	f023 021f 	bic.w	r2, r3, #31
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	3b01      	subs	r3, #1
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01d      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	0e1b      	lsrs	r3, r3, #24
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	0f1b      	lsrs	r3, r3, #28
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	019a      	lsls	r2, r3, #6
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	071b      	lsls	r3, r3, #28
 8003284:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d011      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	019a      	lsls	r2, r3, #6
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	071b      	lsls	r3, r3, #28
 80032b4:	4919      	ldr	r1, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe f9a8 	bl	800161c <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032d0:	f7fe f9a4 	bl	800161c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0d7      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80cd 	bne.w	8003490 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fe f98b 	bl	800161c <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800330a:	f7fe f987 	bl	800161c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	; 0x64
 8003316:	d903      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e0ba      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800331c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003320:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332c:	d0ed      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02e      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d12a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	0f1b      	lsrs	r3, r3, #28
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	019a      	lsls	r2, r3, #6
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	4944      	ldr	r1, [pc, #272]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003398:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	493d      	ldr	r1, [pc, #244]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d022      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c0:	d11d      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	0e1b      	lsrs	r3, r3, #24
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033d0:	4b32      	ldr	r3, [pc, #200]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	0f1b      	lsrs	r3, r3, #28
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	061b      	lsls	r3, r3, #24
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	4929      	ldr	r1, [pc, #164]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d028      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003418:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	019a      	lsls	r2, r3, #6
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	431a      	orrs	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	071b      	lsls	r3, r3, #28
 800343e:	4917      	ldr	r1, [pc, #92]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	4911      	ldr	r1, [pc, #68]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fe f8d8 	bl	800161c <HAL_GetTick>
 800346c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003470:	f7fe f8d4 	bl	800161c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e007      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d1ef      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e022      	b.n	80034f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd fdf1 	bl	80010ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f814 	bl	8003500 <HAL_SD_InitCard>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00a      	b.n	80034f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af04      	add	r7, sp, #16
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800351c:	2376      	movs	r3, #118	; 0x76
 800351e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681d      	ldr	r5, [r3, #0]
 8003524:	466c      	mov	r4, sp
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800352e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003532:	f107 0308 	add.w	r3, r7, #8
 8003536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003538:	4628      	mov	r0, r5
 800353a:	f002 f88f 	bl	800565c <SDMMC_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e059      	b.n	8003604 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f8c3 	bl	80056f0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800357a:	2002      	movs	r0, #2
 800357c:	f7fe f85a 	bl	8001634 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 ff59 	bl	8004438 <SD_PowerON>
 8003586:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e02e      	b.n	8003604 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fe78 	bl	800429c <SD_InitCard>
 80035ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e01b      	b.n	8003604 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 f91d 	bl	8005814 <SDMMC_CmdBlockLength>
 80035da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00f      	beq.n	8003602 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_SD_InitCard+0x10c>)
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bdb0      	pop	{r4, r5, r7, pc}
 800360c:	004005ff 	.word	0x004005ff

08003610 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0c3      	b.n	80037c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 80bc 	bne.w	80037be <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800364c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	429a      	cmp	r2, r3
 8003658:	d907      	bls.n	800366a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0aa      	b.n	80037c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003698:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2200      	movs	r2, #0
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3380      	adds	r3, #128	; 0x80
 80036d0:	4619      	mov	r1, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	f7fe f95f 	bl	800199c <HAL_DMA_Start_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a35      	ldr	r2, [pc, #212]	; (80037d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e055      	b.n	80037c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0208 	orr.w	r2, r2, #8
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	2b01      	cmp	r3, #1
 800372a:	d002      	beq.n	8003732 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	025b      	lsls	r3, r3, #9
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	025b      	lsls	r3, r3, #9
 800373c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800373e:	2390      	movs	r3, #144	; 0x90
 8003740:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003742:	2302      	movs	r3, #2
 8003744:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800374a:	2301      	movs	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f107 0210 	add.w	r2, r7, #16
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f002 f82f 	bl	80057bc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d90a      	bls.n	800377a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2282      	movs	r2, #130	; 0x82
 8003768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003770:	4618      	mov	r0, r3
 8003772:	f002 f893 	bl	800589c <SDMMC_CmdReadMultiBlock>
 8003776:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003778:	e009      	b.n	800378e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2281      	movs	r2, #129	; 0x81
 800377e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003786:	4618      	mov	r0, r3
 8003788:	f002 f866 	bl	8005858 <SDMMC_CmdReadSingleBlock>
 800378c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d012      	beq.n	80037ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e002      	b.n	80037c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3730      	adds	r7, #48	; 0x30
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	080040ab 	.word	0x080040ab
 80037cc:	0800411d 	.word	0x0800411d
 80037d0:	004005ff 	.word	0x004005ff

080037d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	; 0x30
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0c6      	b.n	800398a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 80bf 	bne.w	8003988 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	441a      	add	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	429a      	cmp	r2, r3
 800381c:	d907      	bls.n	800382e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0ad      	b.n	800398a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2203      	movs	r2, #3
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 021a 	orr.w	r2, r2, #26
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	4a50      	ldr	r2, [pc, #320]	; (8003994 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2200      	movs	r2, #0
 8003864:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	2b01      	cmp	r3, #1
 800386c:	d002      	beq.n	8003874 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d90a      	bls.n	8003890 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22a0      	movs	r2, #160	; 0xa0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003886:	4618      	mov	r0, r3
 8003888:	f002 f84c 	bl	8005924 <SDMMC_CmdWriteMultiBlock>
 800388c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800388e:	e009      	b.n	80038a4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2290      	movs	r2, #144	; 0x90
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389c:	4618      	mov	r0, r3
 800389e:	f002 f81f 	bl	80058e0 <SDMMC_CmdWriteSingleBlock>
 80038a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e05c      	b.n	800398a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	2240      	movs	r2, #64	; 0x40
 80038e6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3380      	adds	r3, #128	; 0x80
 8003910:	461a      	mov	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f7fe f840 	bl	800199c <HAL_DMA_Start_IT>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 021a 	bic.w	r2, r2, #26
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e018      	b.n	800398a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	025b      	lsls	r3, r3, #9
 8003962:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003964:	2390      	movs	r3, #144	; 0x90
 8003966:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800396c:	2300      	movs	r3, #0
 800396e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003970:	2301      	movs	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f107 0210 	add.w	r2, r7, #16
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f001 ff1c 	bl	80057bc <SDMMC_ConfigData>

      return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3730      	adds	r7, #48	; 0x30
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08004081 	.word	0x08004081
 8003998:	0800411d 	.word	0x0800411d
 800399c:	004005ff 	.word	0x004005ff

080039a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_SD_IRQHandler+0x2e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fdec 	bl	80045a4 <SD_Read_IT>
 80039cc:	e15a      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808d 	beq.w	8003af8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b9a      	ldr	r3, [pc, #616]	; (8003c5c <HAL_SD_IRQHandler+0x2bc>)
 80039f4:	400b      	ands	r3, r1
 80039f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d039      	beq.n	8003a86 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <HAL_SD_IRQHandler+0x86>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 ff9c 	bl	8005968 <SDMMC_CmdStopTransfer>
 8003a30:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f921 	bl	8003c8c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_SD_IRQHandler+0xd6>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f002 fbba 	bl	80061f0 <HAL_SD_RxCpltCallback>
 8003a7c:	e102      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f002 fbac 	bl	80061dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a84:	e0fe      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80f9 	beq.w	8003c84 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d011      	beq.n	8003ac0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 ff61 	bl	8005968 <SDMMC_CmdStopTransfer>
 8003aa6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8e6 	bl	8003c8c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80dc 	bne.w	8003c84 <HAL_SD_IRQHandler+0x2e4>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 80d6 	bne.w	8003c84 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f002 fb73 	bl	80061dc <HAL_SD_TxCpltCallback>
}
 8003af6:	e0c5      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_SD_IRQHandler+0x178>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fd98 	bl	8004646 <SD_Write_IT>
 8003b16:	e0b5      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80ae 	beq.w	8003c84 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	f043 0208 	orr.w	r2, r3, #8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 feda 	bl	8005968 <SDMMC_CmdStopTransfer>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f857 	bl	8003c8c <HAL_SD_ErrorCallback>
}
 8003bde:	e051      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04c      	beq.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_SD_IRQHandler+0x25e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_SD_IRQHandler+0x2c0>)
 8003c04:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd ff26 	bl	8001a5c <HAL_DMA_Abort_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fad0 	bl	80041c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c20:	e030      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_SD_IRQHandler+0x296>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d018      	beq.n	8003c68 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_SD_IRQHandler+0x2c4>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd ff0a 	bl	8001a5c <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01a      	beq.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 faeb 	bl	800422e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c58:	e014      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
 8003c5a:	bf00      	nop
 8003c5c:	ffff3ec5 	.word	0xffff3ec5
 8003c60:	080041c1 	.word	0x080041c1
 8003c64:	0800422f 	.word	0x0800422f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f002 faa3 	bl	80061c8 <HAL_SD_AbortCallback>
}
 8003c82:	e7ff      	b.n	8003c84 <HAL_SD_IRQHandler+0x2e4>
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cae:	0f9b      	lsrs	r3, r3, #30
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d00:	0d1b      	lsrs	r3, r3, #20
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1e:	0bdb      	lsrs	r3, r3, #15
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d30:	0b9b      	lsrs	r3, r3, #14
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	0b5b      	lsrs	r3, r3, #13
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d54:	0b1b      	lsrs	r3, r3, #12
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d163      	bne.n	8003e38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d74:	009a      	lsls	r2, r3, #2
 8003d76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d80:	0f92      	lsrs	r2, r2, #30
 8003d82:	431a      	orrs	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8c:	0edb      	lsrs	r3, r3, #27
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9e:	0e1b      	lsrs	r3, r3, #24
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	0d5b      	lsrs	r3, r3, #21
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	0c9b      	lsrs	r3, r3, #18
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd4:	0bdb      	lsrs	r3, r3, #15
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	7e1b      	ldrb	r3, [r3, #24]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	3302      	adds	r3, #2
 8003df8:	2201      	movs	r2, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e02:	fb03 f202 	mul.w	r2, r3, r2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	7a1b      	ldrb	r3, [r3, #8]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e24:	0a52      	lsrs	r2, r2, #9
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60
 8003e36:	e031      	b.n	8003e9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d11d      	bne.n	8003e7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	029a      	lsls	r2, r3, #10
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	; 0x60
 8003e7a:	e00f      	b.n	8003e9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_SD_GetCardCSD+0x344>)
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e09d      	b.n	8003fd8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea0:	0b9b      	lsrs	r3, r3, #14
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	09db      	lsrs	r3, r3, #7
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	0fdb      	lsrs	r3, r3, #31
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	0f5b      	lsrs	r3, r3, #29
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	0d9b      	lsrs	r3, r3, #22
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	0d5b      	lsrs	r3, r3, #21
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	0c1b      	lsrs	r3, r3, #16
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	0bdb      	lsrs	r3, r3, #15
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	0b9b      	lsrs	r3, r3, #14
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	0b1b      	lsrs	r3, r3, #12
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	004005ff 	.word	0x004005ff

08003fe8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa7e 	bl	8004554 <SD_SendStatus>
 8004058:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0a5b      	lsrs	r3, r3, #9
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004076:	693b      	ldr	r3, [r7, #16]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b82      	cmp	r3, #130	; 0x82
 80040be:	d111      	bne.n	80040e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fc4f 	bl	8005968 <SDMMC_CmdStopTransfer>
 80040ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fdd4 	bl	8003c8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0208 	bic.w	r2, r2, #8
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f002 f86f 	bl	80061f0 <HAL_SD_RxCpltCallback>
#endif
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd fe42 	bl	8001db4 <HAL_DMA_GetError>
 8004130:	4603      	mov	r3, r0
 8004132:	2b02      	cmp	r3, #2
 8004134:	d03e      	beq.n	80041b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d002      	beq.n	8004152 <SD_DMAError+0x36>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d12d      	bne.n	80041ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <SD_DMAError+0xa0>)
 8004158:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004168:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f7ff ff62 	bl	8004040 <HAL_SD_GetCardState>
 800417c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d002      	beq.n	800418a <SD_DMAError+0x6e>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10a      	bne.n	80041a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fbea 	bl	8005968 <SDMMC_CmdStopTransfer>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	431a      	orrs	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff fd6c 	bl	8003c8c <HAL_SD_ErrorCallback>
#endif
  }
}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	004005ff 	.word	0x004005ff

080041c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ff31 	bl	8004040 <HAL_SD_GetCardState>
 80041de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b06      	cmp	r3, #6
 80041f2:	d002      	beq.n	80041fa <SD_DMATxAbort+0x3a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10a      	bne.n	8004210 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fbb2 	bl	8005968 <SDMMC_CmdStopTransfer>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f001 ffd5 	bl	80061c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800421e:	e002      	b.n	8004226 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fd33 	bl	8003c8c <HAL_SD_ErrorCallback>
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f240 523a 	movw	r2, #1338	; 0x53a
 8004244:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff fefa 	bl	8004040 <HAL_SD_GetCardState>
 800424c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d002      	beq.n	8004268 <SD_DMARxAbort+0x3a>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d10a      	bne.n	800427e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fb7b 	bl	8005968 <SDMMC_CmdStopTransfer>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f001 ff9e 	bl	80061c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800428c:	e002      	b.n	8004294 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fcfc 	bl	8003c8c <HAL_SD_ErrorCallback>
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800429c:	b5b0      	push	{r4, r5, r7, lr}
 800429e:	b094      	sub	sp, #80	; 0x50
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80042a4:	2301      	movs	r3, #1
 80042a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fa2d 	bl	800570c <SDMMC_GetPowerState>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042bc:	e0b8      	b.n	8004430 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d02f      	beq.n	8004326 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 fc14 	bl	8005af8 <SDMMC_CmdSendCID>
 80042d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <SD_InitCard+0x40>
    {
      return errorstate;
 80042d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042da:	e0a9      	b.n	8004430 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fa57 	bl	8005796 <SDMMC_GetResponse>
 80042e8:	4602      	mov	r2, r0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2104      	movs	r1, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 fa4e 	bl	8005796 <SDMMC_GetResponse>
 80042fa:	4602      	mov	r2, r0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2108      	movs	r1, #8
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fa45 	bl	8005796 <SDMMC_GetResponse>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	210c      	movs	r1, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fa3c 	bl	8005796 <SDMMC_GetResponse>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	2b03      	cmp	r3, #3
 800432c:	d00d      	beq.n	800434a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f107 020e 	add.w	r2, r7, #14
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f001 fc1a 	bl	8005b72 <SDMMC_CmdSetRelAdd>
 800433e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <SD_InitCard+0xae>
    {
      return errorstate;
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	e072      	b.n	8004430 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	2b03      	cmp	r3, #3
 8004350:	d036      	beq.n	80043c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f001 fbe4 	bl	8005b34 <SDMMC_CmdSendCSD>
 800436c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	e05b      	b.n	8004430 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fa09 	bl	8005796 <SDMMC_GetResponse>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2104      	movs	r1, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fa00 	bl	8005796 <SDMMC_GetResponse>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2108      	movs	r1, #8
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f9f7 	bl	8005796 <SDMMC_GetResponse>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	210c      	movs	r1, #12
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 f9ee 	bl	8005796 <SDMMC_GetResponse>
 80043ba:	4602      	mov	r2, r0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2104      	movs	r1, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 f9e5 	bl	8005796 <SDMMC_GetResponse>
 80043cc:	4603      	mov	r3, r0
 80043ce:	0d1a      	lsrs	r2, r3, #20
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fc60 	bl	8003ca0 <HAL_SD_GetCardCSD>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ea:	e021      	b.n	8004430 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	2200      	movs	r2, #0
 80043f8:	461c      	mov	r4, r3
 80043fa:	4615      	mov	r5, r2
 80043fc:	4622      	mov	r2, r4
 80043fe:	462b      	mov	r3, r5
 8004400:	4608      	mov	r0, r1
 8004402:	f001 fad3 	bl	80059ac <SDMMC_CmdSelDesel>
 8004406:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <SD_InitCard+0x176>
  {
    return errorstate;
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004410:	e00e      	b.n	8004430 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681d      	ldr	r5, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	466c      	mov	r4, sp
 800441a:	f103 0210 	add.w	r2, r3, #16
 800441e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004424:	3304      	adds	r3, #4
 8004426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004428:	4628      	mov	r0, r5
 800442a:	f001 f917 	bl	800565c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	; 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bdb0      	pop	{r4, r5, r7, pc}

08004438 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f001 face 	bl	80059f2 <SDMMC_CmdGoIdleState>
 8004456:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <SD_PowerON+0x2a>
  {
    return errorstate;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	e072      	b.n	8004548 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fae1 	bl	8005a2e <SDMMC_CmdOperCond>
 800446c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fab7 	bl	80059f2 <SDMMC_CmdGoIdleState>
 8004484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <SD_PowerON+0x5e>
    {
      return errorstate;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	e05b      	b.n	8004548 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	2b01      	cmp	r3, #1
 800449c:	d137      	bne.n	800450e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fae1 	bl	8005a6c <SDMMC_CmdAppCommand>
 80044aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02d      	beq.n	800450e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044b6:	e047      	b.n	8004548 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fad4 	bl	8005a6c <SDMMC_CmdAppCommand>
 80044c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	e03b      	b.n	8004548 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	491e      	ldr	r1, [pc, #120]	; (8004550 <SD_PowerON+0x118>)
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 faea 	bl	8005ab0 <SDMMC_CmdAppOperCommand>
 80044dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044e8:	e02e      	b.n	8004548 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f950 	bl	8005796 <SDMMC_GetResponse>
 80044f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	0fdb      	lsrs	r3, r3, #31
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <SD_PowerON+0xcc>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <SD_PowerON+0xce>
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]

    count++;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004514:	4293      	cmp	r3, r2
 8004516:	d802      	bhi.n	800451e <SD_PowerON+0xe6>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0cc      	beq.n	80044b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004524:	4293      	cmp	r3, r2
 8004526:	d902      	bls.n	800452e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452c:	e00c      	b.n	8004548 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
 800453e:	e002      	b.n	8004546 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	c1100000 	.word	0xc1100000

08004554 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004568:	e018      	b.n	800459c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f001 fb1c 	bl	8005bb4 <SDMMC_CmdSendStatus>
 800457c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	e009      	b.n	800459c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f001 f901 	bl	8005796 <SDMMC_GetResponse>
 8004594:	4602      	mov	r2, r0
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d03f      	beq.n	800463e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e033      	b.n	800462c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f873 	bl	80056b4 <SDMMC_ReadFIFO>
 80045ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3b01      	subs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
      tmp++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3b01      	subs	r3, #1
 8004624:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3301      	adds	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b07      	cmp	r3, #7
 8004630:	d9c8      	bls.n	80045c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d043      	beq.n	80046e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e037      	b.n	80046d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3b01      	subs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3b01      	subs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	061a      	lsls	r2, r3, #24
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3b01      	subs	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f107 0208 	add.w	r2, r7, #8
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 ffff 	bl	80056ce <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d9c4      	bls.n	8004666 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e049      	b.n	8004796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f841 	bl	800479e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fa00 	bl	8004b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e054      	b.n	8004876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d01d      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_TIM_Base_Start_IT+0xd4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <HAL_TIM_Base_Start_IT+0xd8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_TIM_Base_Start_IT+0xdc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <HAL_TIM_Base_Start_IT+0xe0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_TIM_Base_Start_IT+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <HAL_TIM_Base_Start_IT+0xe8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d115      	bne.n	8004860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_TIM_Base_Start_IT+0xec>)
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d015      	beq.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d011      	beq.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	e008      	b.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e000      	b.n	8004874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40010400 	.word	0x40010400
 8004898:	40014000 	.word	0x40014000
 800489c:	40001800 	.word	0x40001800
 80048a0:	00010007 	.word	0x00010007

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f905 	bl	8004af6 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8f7 	bl	8004ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f908 	bl	8004b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8db 	bl	8004af6 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8cd 	bl	8004ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8de 	bl	8004b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8b1 	bl	8004af6 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8a3 	bl	8004ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8b4 	bl	8004b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f887 	bl	8004af6 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f879 	bl	8004ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f88a 	bl	8004b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0201 	mvn.w	r2, #1
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fb06 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f91a 	bl	8004c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d10e      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f90d 	bl	8004c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f838 	bl	8004b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0220 	mvn.w	r2, #32
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8cd 	bl	8004c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a40      	ldr	r2, [pc, #256]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a3d      	ldr	r2, [pc, #244]	; (8004c4c <TIM_Base_SetConfig+0x118>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a3c      	ldr	r2, [pc, #240]	; (8004c50 <TIM_Base_SetConfig+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3b      	ldr	r2, [pc, #236]	; (8004c54 <TIM_Base_SetConfig+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3a      	ldr	r2, [pc, #232]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d027      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <TIM_Base_SetConfig+0x118>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d023      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <TIM_Base_SetConfig+0x11c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01f      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <TIM_Base_SetConfig+0x120>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d017      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <TIM_Base_SetConfig+0x128>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <TIM_Base_SetConfig+0x12c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00f      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <TIM_Base_SetConfig+0x130>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <TIM_Base_SetConfig+0x134>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <TIM_Base_SetConfig+0x138>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <TIM_Base_SetConfig+0x13c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <TIM_Base_SetConfig+0x114>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0xf8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d103      	bne.n	8004c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	615a      	str	r2, [r3, #20]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800
 8004c68:	40001800 	.word	0x40001800
 8004c6c:	40001c00 	.word	0x40001c00
 8004c70:	40002000 	.word	0x40002000

08004c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e040      	b.n	8004d44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc faf6 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8b0 	bl	8004e54 <UART_SetConfig>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e022      	b.n	8004d44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb08 	bl	800531c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb8f 	bl	8005460 <UART_CheckIdleState>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d171      	bne.n	8004e48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_UART_Transmit+0x24>
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e06a      	b.n	8004e4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2221      	movs	r2, #33	; 0x21
 8004d80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d82:	f7fc fc4b 	bl	800161c <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d108      	bne.n	8004db4 <HAL_UART_Transmit+0x68>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e003      	b.n	8004dbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dbc:	e02c      	b.n	8004e18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fb80 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e038      	b.n	8004e4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3302      	adds	r3, #2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e007      	b.n	8004e06 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1cc      	bne.n	8004dbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fb4d 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e005      	b.n	8004e4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4ba6      	ldr	r3, [pc, #664]	; (8005118 <UART_SetConfig+0x2c4>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a94      	ldr	r2, [pc, #592]	; (800511c <UART_SetConfig+0x2c8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d120      	bne.n	8004f12 <UART_SetConfig+0xbe>
 8004ed0:	4b93      	ldr	r3, [pc, #588]	; (8005120 <UART_SetConfig+0x2cc>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d816      	bhi.n	8004f0c <UART_SetConfig+0xb8>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x90>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004f01 	.word	0x08004f01
 8004eec:	08004efb 	.word	0x08004efb
 8004ef0:	08004f07 	.word	0x08004f07
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e150      	b.n	800519c <UART_SetConfig+0x348>
 8004efa:	2302      	movs	r3, #2
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e14d      	b.n	800519c <UART_SetConfig+0x348>
 8004f00:	2304      	movs	r3, #4
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e14a      	b.n	800519c <UART_SetConfig+0x348>
 8004f06:	2308      	movs	r3, #8
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e147      	b.n	800519c <UART_SetConfig+0x348>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e144      	b.n	800519c <UART_SetConfig+0x348>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a83      	ldr	r2, [pc, #524]	; (8005124 <UART_SetConfig+0x2d0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d132      	bne.n	8004f82 <UART_SetConfig+0x12e>
 8004f1c:	4b80      	ldr	r3, [pc, #512]	; (8005120 <UART_SetConfig+0x2cc>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b0c      	cmp	r3, #12
 8004f28:	d828      	bhi.n	8004f7c <UART_SetConfig+0x128>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0xdc>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004f7d 	.word	0x08004f7d
 8004f38:	08004f7d 	.word	0x08004f7d
 8004f3c:	08004f7d 	.word	0x08004f7d
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f7d 	.word	0x08004f7d
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004f6b 	.word	0x08004f6b
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f77 	.word	0x08004f77
 8004f64:	2300      	movs	r3, #0
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e118      	b.n	800519c <UART_SetConfig+0x348>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	e115      	b.n	800519c <UART_SetConfig+0x348>
 8004f70:	2304      	movs	r3, #4
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e112      	b.n	800519c <UART_SetConfig+0x348>
 8004f76:	2308      	movs	r3, #8
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e10f      	b.n	800519c <UART_SetConfig+0x348>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e10c      	b.n	800519c <UART_SetConfig+0x348>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a68      	ldr	r2, [pc, #416]	; (8005128 <UART_SetConfig+0x2d4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d120      	bne.n	8004fce <UART_SetConfig+0x17a>
 8004f8c:	4b64      	ldr	r3, [pc, #400]	; (8005120 <UART_SetConfig+0x2cc>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f96:	2b30      	cmp	r3, #48	; 0x30
 8004f98:	d013      	beq.n	8004fc2 <UART_SetConfig+0x16e>
 8004f9a:	2b30      	cmp	r3, #48	; 0x30
 8004f9c:	d814      	bhi.n	8004fc8 <UART_SetConfig+0x174>
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d009      	beq.n	8004fb6 <UART_SetConfig+0x162>
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d810      	bhi.n	8004fc8 <UART_SetConfig+0x174>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <UART_SetConfig+0x15c>
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d006      	beq.n	8004fbc <UART_SetConfig+0x168>
 8004fae:	e00b      	b.n	8004fc8 <UART_SetConfig+0x174>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e0f2      	b.n	800519c <UART_SetConfig+0x348>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e0ef      	b.n	800519c <UART_SetConfig+0x348>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e0ec      	b.n	800519c <UART_SetConfig+0x348>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e0e9      	b.n	800519c <UART_SetConfig+0x348>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e0e6      	b.n	800519c <UART_SetConfig+0x348>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a56      	ldr	r2, [pc, #344]	; (800512c <UART_SetConfig+0x2d8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d120      	bne.n	800501a <UART_SetConfig+0x1c6>
 8004fd8:	4b51      	ldr	r3, [pc, #324]	; (8005120 <UART_SetConfig+0x2cc>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe4:	d013      	beq.n	800500e <UART_SetConfig+0x1ba>
 8004fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe8:	d814      	bhi.n	8005014 <UART_SetConfig+0x1c0>
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d009      	beq.n	8005002 <UART_SetConfig+0x1ae>
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d810      	bhi.n	8005014 <UART_SetConfig+0x1c0>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <UART_SetConfig+0x1a8>
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d006      	beq.n	8005008 <UART_SetConfig+0x1b4>
 8004ffa:	e00b      	b.n	8005014 <UART_SetConfig+0x1c0>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e0cc      	b.n	800519c <UART_SetConfig+0x348>
 8005002:	2302      	movs	r3, #2
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e0c9      	b.n	800519c <UART_SetConfig+0x348>
 8005008:	2304      	movs	r3, #4
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e0c6      	b.n	800519c <UART_SetConfig+0x348>
 800500e:	2308      	movs	r3, #8
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e0c3      	b.n	800519c <UART_SetConfig+0x348>
 8005014:	2310      	movs	r3, #16
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e0c0      	b.n	800519c <UART_SetConfig+0x348>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a44      	ldr	r2, [pc, #272]	; (8005130 <UART_SetConfig+0x2dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d125      	bne.n	8005070 <UART_SetConfig+0x21c>
 8005024:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <UART_SetConfig+0x2cc>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005032:	d017      	beq.n	8005064 <UART_SetConfig+0x210>
 8005034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005038:	d817      	bhi.n	800506a <UART_SetConfig+0x216>
 800503a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503e:	d00b      	beq.n	8005058 <UART_SetConfig+0x204>
 8005040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005044:	d811      	bhi.n	800506a <UART_SetConfig+0x216>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <UART_SetConfig+0x1fe>
 800504a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800504e:	d006      	beq.n	800505e <UART_SetConfig+0x20a>
 8005050:	e00b      	b.n	800506a <UART_SetConfig+0x216>
 8005052:	2300      	movs	r3, #0
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e0a1      	b.n	800519c <UART_SetConfig+0x348>
 8005058:	2302      	movs	r3, #2
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e09e      	b.n	800519c <UART_SetConfig+0x348>
 800505e:	2304      	movs	r3, #4
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e09b      	b.n	800519c <UART_SetConfig+0x348>
 8005064:	2308      	movs	r3, #8
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e098      	b.n	800519c <UART_SetConfig+0x348>
 800506a:	2310      	movs	r3, #16
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e095      	b.n	800519c <UART_SetConfig+0x348>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2f      	ldr	r2, [pc, #188]	; (8005134 <UART_SetConfig+0x2e0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d125      	bne.n	80050c6 <UART_SetConfig+0x272>
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <UART_SetConfig+0x2cc>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005088:	d017      	beq.n	80050ba <UART_SetConfig+0x266>
 800508a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508e:	d817      	bhi.n	80050c0 <UART_SetConfig+0x26c>
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005094:	d00b      	beq.n	80050ae <UART_SetConfig+0x25a>
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509a:	d811      	bhi.n	80050c0 <UART_SetConfig+0x26c>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <UART_SetConfig+0x254>
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d006      	beq.n	80050b4 <UART_SetConfig+0x260>
 80050a6:	e00b      	b.n	80050c0 <UART_SetConfig+0x26c>
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e076      	b.n	800519c <UART_SetConfig+0x348>
 80050ae:	2302      	movs	r3, #2
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e073      	b.n	800519c <UART_SetConfig+0x348>
 80050b4:	2304      	movs	r3, #4
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e070      	b.n	800519c <UART_SetConfig+0x348>
 80050ba:	2308      	movs	r3, #8
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e06d      	b.n	800519c <UART_SetConfig+0x348>
 80050c0:	2310      	movs	r3, #16
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e06a      	b.n	800519c <UART_SetConfig+0x348>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <UART_SetConfig+0x2e4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d138      	bne.n	8005142 <UART_SetConfig+0x2ee>
 80050d0:	4b13      	ldr	r3, [pc, #76]	; (8005120 <UART_SetConfig+0x2cc>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050de:	d017      	beq.n	8005110 <UART_SetConfig+0x2bc>
 80050e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050e4:	d82a      	bhi.n	800513c <UART_SetConfig+0x2e8>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d00b      	beq.n	8005104 <UART_SetConfig+0x2b0>
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d824      	bhi.n	800513c <UART_SetConfig+0x2e8>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <UART_SetConfig+0x2aa>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d006      	beq.n	800510a <UART_SetConfig+0x2b6>
 80050fc:	e01e      	b.n	800513c <UART_SetConfig+0x2e8>
 80050fe:	2300      	movs	r3, #0
 8005100:	77fb      	strb	r3, [r7, #31]
 8005102:	e04b      	b.n	800519c <UART_SetConfig+0x348>
 8005104:	2302      	movs	r3, #2
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	e048      	b.n	800519c <UART_SetConfig+0x348>
 800510a:	2304      	movs	r3, #4
 800510c:	77fb      	strb	r3, [r7, #31]
 800510e:	e045      	b.n	800519c <UART_SetConfig+0x348>
 8005110:	2308      	movs	r3, #8
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e042      	b.n	800519c <UART_SetConfig+0x348>
 8005116:	bf00      	nop
 8005118:	efff69f3 	.word	0xefff69f3
 800511c:	40011000 	.word	0x40011000
 8005120:	40023800 	.word	0x40023800
 8005124:	40004400 	.word	0x40004400
 8005128:	40004800 	.word	0x40004800
 800512c:	40004c00 	.word	0x40004c00
 8005130:	40005000 	.word	0x40005000
 8005134:	40011400 	.word	0x40011400
 8005138:	40007800 	.word	0x40007800
 800513c:	2310      	movs	r3, #16
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e02c      	b.n	800519c <UART_SetConfig+0x348>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a72      	ldr	r2, [pc, #456]	; (8005310 <UART_SetConfig+0x4bc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d125      	bne.n	8005198 <UART_SetConfig+0x344>
 800514c:	4b71      	ldr	r3, [pc, #452]	; (8005314 <UART_SetConfig+0x4c0>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005156:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800515a:	d017      	beq.n	800518c <UART_SetConfig+0x338>
 800515c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005160:	d817      	bhi.n	8005192 <UART_SetConfig+0x33e>
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d00b      	beq.n	8005180 <UART_SetConfig+0x32c>
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516c:	d811      	bhi.n	8005192 <UART_SetConfig+0x33e>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <UART_SetConfig+0x326>
 8005172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005176:	d006      	beq.n	8005186 <UART_SetConfig+0x332>
 8005178:	e00b      	b.n	8005192 <UART_SetConfig+0x33e>
 800517a:	2300      	movs	r3, #0
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e00d      	b.n	800519c <UART_SetConfig+0x348>
 8005180:	2302      	movs	r3, #2
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e00a      	b.n	800519c <UART_SetConfig+0x348>
 8005186:	2304      	movs	r3, #4
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e007      	b.n	800519c <UART_SetConfig+0x348>
 800518c:	2308      	movs	r3, #8
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e004      	b.n	800519c <UART_SetConfig+0x348>
 8005192:	2310      	movs	r3, #16
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x348>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	d15b      	bne.n	800525e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051a6:	7ffb      	ldrb	r3, [r7, #31]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d828      	bhi.n	80051fe <UART_SetConfig+0x3aa>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x360>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ff 	.word	0x080051ff
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fd fd18 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80051dc:	61b8      	str	r0, [r7, #24]
        break;
 80051de:	e013      	b.n	8005208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7fd fd28 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80051e4:	61b8      	str	r0, [r7, #24]
        break;
 80051e6:	e00f      	b.n	8005208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b4b      	ldr	r3, [pc, #300]	; (8005318 <UART_SetConfig+0x4c4>)
 80051ea:	61bb      	str	r3, [r7, #24]
        break;
 80051ec:	e00c      	b.n	8005208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fd fc3b 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80051f2:	61b8      	str	r0, [r7, #24]
        break;
 80051f4:	e008      	b.n	8005208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	61bb      	str	r3, [r7, #24]
        break;
 80051fc:	e004      	b.n	8005208 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	77bb      	strb	r3, [r7, #30]
        break;
 8005206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d074      	beq.n	80052f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	005a      	lsls	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	d916      	bls.n	8005258 <UART_SetConfig+0x404>
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005230:	d212      	bcs.n	8005258 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f023 030f 	bic.w	r3, r3, #15
 800523a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	b29a      	uxth	r2, r3
 8005248:	89fb      	ldrh	r3, [r7, #14]
 800524a:	4313      	orrs	r3, r2
 800524c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	89fa      	ldrh	r2, [r7, #14]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	e04f      	b.n	80052f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	77bb      	strb	r3, [r7, #30]
 800525c:	e04c      	b.n	80052f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800525e:	7ffb      	ldrb	r3, [r7, #31]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d828      	bhi.n	80052b6 <UART_SetConfig+0x462>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x418>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005291 	.word	0x08005291
 8005270:	08005299 	.word	0x08005299
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a7 	.word	0x080052a7
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fd fcbc 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8005294:	61b8      	str	r0, [r7, #24]
        break;
 8005296:	e013      	b.n	80052c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005298:	f7fd fccc 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 800529c:	61b8      	str	r0, [r7, #24]
        break;
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <UART_SetConfig+0x4c4>)
 80052a2:	61bb      	str	r3, [r7, #24]
        break;
 80052a4:	e00c      	b.n	80052c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fd fbdf 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80052aa:	61b8      	str	r0, [r7, #24]
        break;
 80052ac:	e008      	b.n	80052c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b2:	61bb      	str	r3, [r7, #24]
        break;
 80052b4:	e004      	b.n	80052c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	77bb      	strb	r3, [r7, #30]
        break;
 80052be:	bf00      	nop
    }

    if (pclk != 0U)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085a      	lsrs	r2, r3, #1
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	441a      	add	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d909      	bls.n	80052f4 <UART_SetConfig+0x4a0>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d205      	bcs.n	80052f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	e001      	b.n	80052f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005304:	7fbb      	ldrb	r3, [r7, #30]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40007c00 	.word	0x40007c00
 8005314:	40023800 	.word	0x40023800
 8005318:	00f42400 	.word	0x00f42400

0800531c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541a:	d10a      	bne.n	8005432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af02      	add	r7, sp, #8
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005470:	f7fc f8d4 	bl	800161c <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d10e      	bne.n	80054a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f81b 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e011      	b.n	80054c6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b09c      	sub	sp, #112	; 0x70
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	e0a7      	b.n	8005630 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	f000 80a3 	beq.w	8005630 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc f897 	bl	800161c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
 80054fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d13f      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005514:	667b      	str	r3, [r7, #100]	; 0x64
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005520:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005552:	64ba      	str	r2, [r7, #72]	; 0x48
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e068      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d050      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559c:	d148      	bne.n	8005630 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e6      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3308      	adds	r3, #8
 80055e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055fa:	623a      	str	r2, [r7, #32]
 80055fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	61bb      	str	r3, [r7, #24]
   return(result);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e010      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	f43f af48 	beq.w	80054e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3770      	adds	r7, #112	; 0x70
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800565c:	b084      	sub	sp, #16
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	f107 001c 	add.w	r0, r7, #28
 800566a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005672:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005674:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005676:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800567a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800567e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005682:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005686:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <SDMMC_Init+0x54>)
 8005694:	4013      	ands	r3, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	b004      	add	sp, #16
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	ffff8100 	.word	0xffff8100

080056b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2203      	movs	r2, #3
 80056fc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0303 	and.w	r3, r3, #3
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005746:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800574c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005752:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <SDMMC_SendCommand+0x50>)
 8005760:	4013      	ands	r3, r2
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	fffff000 	.word	0xfffff000

0800577c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	b2db      	uxtb	r3, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3314      	adds	r3, #20
 80057a4:	461a      	mov	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4413      	add	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
}  
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80057e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80057ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0

}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005822:	2310      	movs	r3, #16
 8005824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005826:	2340      	movs	r3, #64	; 0x40
 8005828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800582e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005832:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff74 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	2110      	movs	r1, #16
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9d6 	bl	8005bf8 <SDMMC_GetCmdResp1>
 800584c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800584e:	69fb      	ldr	r3, [r7, #28]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005866:	2311      	movs	r3, #17
 8005868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800586a:	2340      	movs	r3, #64	; 0x40
 800586c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005876:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005878:	f107 0308 	add.w	r3, r7, #8
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ff52 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	2111      	movs	r1, #17
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9b4 	bl	8005bf8 <SDMMC_GetCmdResp1>
 8005890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005892:	69fb      	ldr	r3, [r7, #28]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80058aa:	2312      	movs	r3, #18
 80058ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff30 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	2112      	movs	r1, #18
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f992 	bl	8005bf8 <SDMMC_GetCmdResp1>
 80058d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058d6:	69fb      	ldr	r3, [r7, #28]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80058ee:	2318      	movs	r3, #24
 80058f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff ff0e 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	2118      	movs	r1, #24
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f970 	bl	8005bf8 <SDMMC_GetCmdResp1>
 8005918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800591a:	69fb      	ldr	r3, [r7, #28]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005932:	2319      	movs	r3, #25
 8005934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005936:	2340      	movs	r3, #64	; 0x40
 8005938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800593e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005944:	f107 0308 	add.w	r3, r7, #8
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff feec 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005950:	f241 3288 	movw	r2, #5000	; 0x1388
 8005954:	2119      	movs	r1, #25
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f94e 	bl	8005bf8 <SDMMC_GetCmdResp1>
 800595c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800595e:	69fb      	ldr	r3, [r7, #28]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005974:	230c      	movs	r3, #12
 8005976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005984:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fecb 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <SDMMC_CmdStopTransfer+0x40>)
 8005994:	210c      	movs	r1, #12
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f92e 	bl	8005bf8 <SDMMC_GetCmdResp1>
 800599c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800599e:	69fb      	ldr	r3, [r7, #28]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	05f5e100 	.word	0x05f5e100

080059ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80059bc:	2307      	movs	r3, #7
 80059be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059ce:	f107 0310 	add.w	r3, r7, #16
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff fea7 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	2107      	movs	r1, #7
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f909 	bl	8005bf8 <SDMMC_GetCmdResp1>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3728      	adds	r7, #40	; 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a10:	f107 0308 	add.w	r3, r7, #8
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fe86 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb23 	bl	8006068 <SDMMC_GetCmdError>
 8005a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a24:	69fb      	ldr	r3, [r7, #28]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a36:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fe67 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fab6 	bl	8005fcc <SDMMC_GetCmdResp7>
 8005a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005a7a:	2337      	movs	r3, #55	; 0x37
 8005a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a7e:	2340      	movs	r3, #64	; 0x40
 8005a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a8c:	f107 0308 	add.w	r3, r7, #8
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fe48 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9c:	2137      	movs	r1, #55	; 0x37
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8aa 	bl	8005bf8 <SDMMC_GetCmdResp1>
 8005aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <SDMMC_CmdAppOperCommand+0x44>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005ac2:	2329      	movs	r3, #41	; 0x29
 8005ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ac6:	2340      	movs	r3, #64	; 0x40
 8005ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ad4:	f107 0308 	add.w	r3, r7, #8
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fe24 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f9bf 	bl	8005e64 <SDMMC_GetCmdResp3>
 8005ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	80100000 	.word	0x80100000

08005af8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005b04:	2302      	movs	r3, #2
 8005b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005b08:	23c0      	movs	r3, #192	; 0xc0
 8005b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fe03 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f956 	bl	8005dd4 <SDMMC_GetCmdResp2>
 8005b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005b42:	2309      	movs	r3, #9
 8005b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005b46:	23c0      	movs	r3, #192	; 0xc0
 8005b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fde4 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f937 	bl	8005dd4 <SDMMC_GetCmdResp2>
 8005b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b68:	69fb      	ldr	r3, [r7, #28]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b088      	sub	sp, #32
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b80:	2303      	movs	r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b84:	2340      	movs	r3, #64	; 0x40
 8005b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b92:	f107 0308 	add.w	r3, r7, #8
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fdc5 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	2103      	movs	r1, #3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f99c 	bl	8005ee0 <SDMMC_GetCmdResp6>
 8005ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005baa:	69fb      	ldr	r3, [r7, #28]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005bc2:	230d      	movs	r3, #13
 8005bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bc6:	2340      	movs	r3, #64	; 0x40
 8005bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bd4:	f107 0308 	add.w	r3, r7, #8
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fda4 	bl	8005728 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	210d      	movs	r1, #13
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f806 	bl	8005bf8 <SDMMC_GetCmdResp1>
 8005bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bee:	69fb      	ldr	r3, [r7, #28]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	460b      	mov	r3, r1
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <SDMMC_GetCmdResp1+0x1d0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	; (8005dcc <SDMMC_GetCmdResp1+0x1d4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	0a5a      	lsrs	r2, r3, #9
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c28:	e0c9      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ef      	beq.n	8005c1a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ea      	bne.n	8005c1a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2204      	movs	r2, #4
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c56:	2304      	movs	r3, #4
 8005c58:	e0b1      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0a6      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	22c5      	movs	r2, #197	; 0xc5
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fd80 	bl	800577c <SDMMC_GetCommandResponse>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	7afb      	ldrb	r3, [r7, #11]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d001      	beq.n	8005c8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e099      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fd82 	bl	8005796 <SDMMC_GetResponse>
 8005c92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <SDMMC_GetCmdResp1+0x1d8>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e08d      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da02      	bge.n	8005cae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cac:	e087      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	e080      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	e079      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cd8:	e071      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce8:	e069      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf8:	e061      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d08:	e059      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d18:	e051      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d28:	e049      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d38:	e041      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d48:	e039      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d58:	e031      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d68:	e029      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d78:	e021      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005d84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d88:	e019      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d98:	e011      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005da4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005da8:	e009      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005db4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005db8:	e001      	b.n	8005dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	10624dd3 	.word	0x10624dd3
 8005dd0:	fdffe008 	.word	0xfdffe008

08005dd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ddc:	4b1f      	ldr	r3, [pc, #124]	; (8005e5c <SDMMC_GetCmdResp2+0x88>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <SDMMC_GetCmdResp2+0x8c>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e00:	e026      	b.n	8005e50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e00e      	b.n	8005e50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e003      	b.n	8005e50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	22c5      	movs	r2, #197	; 0xc5
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	10624dd3 	.word	0x10624dd3

08005e64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <SDMMC_GetCmdResp3+0x74>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <SDMMC_GetCmdResp3+0x78>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0a5b      	lsrs	r3, r3, #9
 8005e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	60fa      	str	r2, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e90:	e01b      	b.n	8005eca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ef      	beq.n	8005e82 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ea      	bne.n	8005e82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	e003      	b.n	8005eca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	22c5      	movs	r2, #197	; 0xc5
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	10624dd3 	.word	0x10624dd3

08005ee0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005eee:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <SDMMC_GetCmdResp6+0xe4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a35      	ldr	r2, [pc, #212]	; (8005fc8 <SDMMC_GetCmdResp6+0xe8>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	0a5b      	lsrs	r3, r3, #9
 8005efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1e5a      	subs	r2, r3, #1
 8005f08:	61fa      	str	r2, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f12:	e052      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ea      	bne.n	8005f04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f40:	2304      	movs	r3, #4
 8005f42:	e03a      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e02f      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff fc0e 	bl	800577c <SDMMC_GetCommandResponse>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d001      	beq.n	8005f6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e025      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	22c5      	movs	r2, #197	; 0xc5
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005f74:	2100      	movs	r1, #0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fc0d 	bl	8005796 <SDMMC_GetResponse>
 8005f7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e011      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fa4:	e009      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb4:	e001      	b.n	8005fba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000000 	.word	0x20000000
 8005fc8:	10624dd3 	.word	0x10624dd3

08005fcc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <SDMMC_GetCmdResp7+0x94>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <SDMMC_GetCmdResp7+0x98>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0a5b      	lsrs	r3, r3, #9
 8005fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe4:	fb02 f303 	mul.w	r3, r2, r3
 8005fe8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	60fa      	str	r2, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ff8:	e02c      	b.n	8006054 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0ef      	beq.n	8005fea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ea      	bne.n	8005fea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006026:	2304      	movs	r3, #4
 8006028:	e014      	b.n	8006054 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800603c:	2301      	movs	r3, #1
 800603e:	e009      	b.n	8006054 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2240      	movs	r2, #64	; 0x40
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006052:	2300      	movs	r3, #0
  
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	20000000 	.word	0x20000000
 8006064:	10624dd3 	.word	0x10624dd3

08006068 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <SDMMC_GetCmdError+0x50>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a11      	ldr	r2, [pc, #68]	; (80060bc <SDMMC_GetCmdError+0x54>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	0a5b      	lsrs	r3, r3, #9
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	60fa      	str	r2, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006094:	e009      	b.n	80060aa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f1      	beq.n	8006086 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	22c5      	movs	r2, #197	; 0xc5
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000000 	.word	0x20000000
 80060bc:	10624dd3 	.word	0x10624dd3

080060c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80060c4:	4904      	ldr	r1, [pc, #16]	; (80060d8 <MX_FATFS_Init+0x18>)
 80060c6:	4805      	ldr	r0, [pc, #20]	; (80060dc <MX_FATFS_Init+0x1c>)
 80060c8:	f002 fbfe 	bl	80088c8 <FATFS_LinkDriver>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <MX_FATFS_Init+0x20>)
 80060d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80060d4:	bf00      	nop
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20001250 	.word	0x20001250
 80060dc:	080089c4 	.word	0x080089c4
 80060e0:	2000124c 	.word	0x2000124c

080060e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80060e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80060fe:	f000 f888 	bl	8006212 <BSP_SD_IsDetected>
 8006102:	4603      	mov	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d001      	beq.n	800610c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006108:	2302      	movs	r3, #2
 800610a:	e005      	b.n	8006118 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800610c:	4804      	ldr	r0, [pc, #16]	; (8006120 <BSP_SD_Init+0x2c>)
 800610e:	f7fd f9c7 	bl	80034a0 <HAL_SD_Init>
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006116:	79fb      	ldrb	r3, [r7, #7]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000028 	.word	0x20000028

08006124 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	68f9      	ldr	r1, [r7, #12]
 800613a:	4806      	ldr	r0, [pc, #24]	; (8006154 <BSP_SD_ReadBlocks_DMA+0x30>)
 800613c:	f7fd fa68 	bl	8003610 <HAL_SD_ReadBlocks_DMA>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000028 	.word	0x20000028

08006158 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	4806      	ldr	r0, [pc, #24]	; (8006188 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006170:	f7fd fb30 	bl	80037d4 <HAL_SD_WriteBlocks_DMA>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000028 	.word	0x20000028

0800618c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006190:	4805      	ldr	r0, [pc, #20]	; (80061a8 <BSP_SD_GetCardState+0x1c>)
 8006192:	f7fd ff55 	bl	8004040 <HAL_SD_GetCardState>
 8006196:	4603      	mov	r3, r0
 8006198:	2b04      	cmp	r3, #4
 800619a:	bf14      	ite	ne
 800619c:	2301      	movne	r3, #1
 800619e:	2300      	moveq	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000028 	.word	0x20000028

080061ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4803      	ldr	r0, [pc, #12]	; (80061c4 <BSP_SD_GetCardInfo+0x18>)
 80061b8:	f7fd ff16 	bl	8003fe8 <HAL_SD_GetCardInfo>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000028 	.word	0x20000028

080061c8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80061d0:	f000 f818 	bl	8006204 <BSP_SD_AbortCallback>
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80061e4:	f000 f9a8 	bl	8006538 <BSP_SD_WriteCpltCallback>
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80061f8:	f000 f9aa 	bl	8006550 <BSP_SD_ReadCpltCallback>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0

}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006218:	2301      	movs	r3, #1
 800621a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800621c:	f000 f80c 	bl	8006238 <BSP_PlatformIsDetected>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006226:	2300      	movs	r3, #0
 8006228:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	b2db      	uxtb	r3, r3
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800623e:	2301      	movs	r3, #1
 8006240:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006246:	4806      	ldr	r0, [pc, #24]	; (8006260 <BSP_PlatformIsDetected+0x28>)
 8006248:	f7fc f84c 	bl	80022e4 <HAL_GPIO_ReadPin>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006252:	2300      	movs	r3, #0
 8006254:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006256:	79fb      	ldrb	r3, [r7, #7]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40020800 	.word	0x40020800

08006264 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800626c:	f7fb f9d6 	bl	800161c <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006272:	e006      	b.n	8006282 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006274:	f7ff ff8a 	bl	800618c <BSP_SD_GetCardState>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800627e:	2300      	movs	r3, #0
 8006280:	e009      	b.n	8006296 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006282:	f7fb f9cb 	bl	800161c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	429a      	cmp	r2, r3
 8006290:	d8f0      	bhi.n	8006274 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <SD_CheckStatus+0x38>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80062b0:	f7ff ff6c 	bl	800618c <BSP_SD_GetCardState>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80062ba:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <SD_CheckStatus+0x38>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <SD_CheckStatus+0x38>)
 80062c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80062ca:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <SD_CheckStatus+0x38>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000009 	.word	0x20000009

080062dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80062e6:	f7ff ff05 	bl	80060f4 <BSP_SD_Init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d107      	bne.n	8006300 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ffd4 	bl	80062a0 <SD_CheckStatus>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <SD_initialize+0x34>)
 80062fe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <SD_initialize+0x34>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000009 	.word	0x20000009

08006314 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff ffbd 	bl	80062a0 <SD_CheckStatus>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006344:	f247 5030 	movw	r0, #30000	; 0x7530
 8006348:	f7ff ff8c 	bl	8006264 <SD_CheckStatusWithTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	da01      	bge.n	8006356 <SD_read+0x26>
  {
    return res;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	e03b      	b.n	80063ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	68b8      	ldr	r0, [r7, #8]
 800635c:	f7ff fee2 	bl	8006124 <BSP_SD_ReadBlocks_DMA>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d132      	bne.n	80063cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <SD_read+0xa8>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800636c:	f7fb f956 	bl	800161c <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006372:	bf00      	nop
 8006374:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <SD_read+0xa8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <SD_read+0x5e>
 800637c:	f7fb f94e 	bl	800161c <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f247 522f 	movw	r2, #29999	; 0x752f
 800638a:	4293      	cmp	r3, r2
 800638c:	d9f2      	bls.n	8006374 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <SD_read+0xa8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
 800639a:	e017      	b.n	80063cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <SD_read+0xa8>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063a2:	f7fb f93b 	bl	800161c <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063a8:	e007      	b.n	80063ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063aa:	f7ff feef 	bl	800618c <BSP_SD_GetCardState>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <SD_read+0x8a>
          {
            res = RES_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80063b8:	e008      	b.n	80063cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063ba:	f7fb f92f 	bl	800161c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d9ee      	bls.n	80063aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200016b8 	.word	0x200016b8

080063dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <SD_write+0xa8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80063f6:	f247 5030 	movw	r0, #30000	; 0x7530
 80063fa:	f7ff ff33 	bl	8006264 <SD_CheckStatusWithTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	da01      	bge.n	8006408 <SD_write+0x2c>
  {
    return res;
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	e038      	b.n	800647a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	f7ff fea3 	bl	8006158 <BSP_SD_WriteBlocks_DMA>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d12f      	bne.n	8006478 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006418:	f7fb f900 	bl	800161c <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800641e:	bf00      	nop
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <SD_write+0xa8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <SD_write+0x5e>
 8006428:	f7fb f8f8 	bl	800161c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f247 522f 	movw	r2, #29999	; 0x752f
 8006436:	4293      	cmp	r3, r2
 8006438:	d9f2      	bls.n	8006420 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <SD_write+0xa8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
 8006446:	e017      	b.n	8006478 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <SD_write+0xa8>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800644e:	f7fb f8e5 	bl	800161c <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006454:	e007      	b.n	8006466 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006456:	f7ff fe99 	bl	800618c <BSP_SD_GetCardState>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <SD_write+0x8a>
          {
            res = RES_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
            break;
 8006464:	e008      	b.n	8006478 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006466:	f7fb f8d9 	bl	800161c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f247 522f 	movw	r2, #29999	; 0x752f
 8006474:	4293      	cmp	r3, r2
 8006476:	d9ee      	bls.n	8006456 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200016b4 	.word	0x200016b4

08006488 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	603a      	str	r2, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
 8006494:	460b      	mov	r3, r1
 8006496:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800649e:	4b25      	ldr	r3, [pc, #148]	; (8006534 <SD_ioctl+0xac>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <SD_ioctl+0x28>
 80064ac:	2303      	movs	r3, #3
 80064ae:	e03c      	b.n	800652a <SD_ioctl+0xa2>

  switch (cmd)
 80064b0:	79bb      	ldrb	r3, [r7, #6]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d834      	bhi.n	8006520 <SD_ioctl+0x98>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <SD_ioctl+0x34>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	080064d5 	.word	0x080064d5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	08006507 	.word	0x08006507
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064d2:	e028      	b.n	8006526 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80064d4:	f107 030c 	add.w	r3, r7, #12
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fe67 	bl	80061ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064ea:	e01c      	b.n	8006526 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80064ec:	f107 030c 	add.w	r3, r7, #12
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fe5b 	bl	80061ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006504:	e00f      	b.n	8006526 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006506:	f107 030c 	add.w	r3, r7, #12
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fe4e 	bl	80061ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	0a5a      	lsrs	r2, r3, #9
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800651e:	e002      	b.n	8006526 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006520:	2304      	movs	r3, #4
 8006522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800652a:	4618      	mov	r0, r3
 800652c:	3730      	adds	r7, #48	; 0x30
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000009 	.word	0x20000009

08006538 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <BSP_SD_WriteCpltCallback+0x14>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	bf00      	nop
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	200016b4 	.word	0x200016b4

08006550 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006554:	4b03      	ldr	r3, [pc, #12]	; (8006564 <BSP_SD_ReadCpltCallback+0x14>)
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	200016b8 	.word	0x200016b8

08006568 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	4a08      	ldr	r2, [pc, #32]	; (8006598 <disk_status+0x30>)
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	79fa      	ldrb	r2, [r7, #7]
 8006580:	4905      	ldr	r1, [pc, #20]	; (8006598 <disk_status+0x30>)
 8006582:	440a      	add	r2, r1
 8006584:	7a12      	ldrb	r2, [r2, #8]
 8006586:	4610      	mov	r0, r2
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200016e4 	.word	0x200016e4

0800659c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	4a0d      	ldr	r2, [pc, #52]	; (80065e4 <disk_initialize+0x48>)
 80065ae:	5cd3      	ldrb	r3, [r2, r3]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d111      	bne.n	80065d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <disk_initialize+0x48>)
 80065b8:	2101      	movs	r1, #1
 80065ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <disk_initialize+0x48>)
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	79fa      	ldrb	r2, [r7, #7]
 80065ca:	4906      	ldr	r1, [pc, #24]	; (80065e4 <disk_initialize+0x48>)
 80065cc:	440a      	add	r2, r1
 80065ce:	7a12      	ldrb	r2, [r2, #8]
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200016e4 	.word	0x200016e4

080065e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <disk_read+0x3c>)
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	689c      	ldr	r4, [r3, #8]
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	4a07      	ldr	r2, [pc, #28]	; (8006624 <disk_read+0x3c>)
 8006608:	4413      	add	r3, r2
 800660a:	7a18      	ldrb	r0, [r3, #8]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	47a0      	blx	r4
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]
  return res;
 8006618:	7dfb      	ldrb	r3, [r7, #23]
}
 800661a:	4618      	mov	r0, r3
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	bf00      	nop
 8006624:	200016e4 	.word	0x200016e4

08006628 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	4a0a      	ldr	r2, [pc, #40]	; (8006664 <disk_write+0x3c>)
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68dc      	ldr	r4, [r3, #12]
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <disk_write+0x3c>)
 8006648:	4413      	add	r3, r2
 800664a:	7a18      	ldrb	r0, [r3, #8]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	47a0      	blx	r4
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]
  return res;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	bd90      	pop	{r4, r7, pc}
 8006662:	bf00      	nop
 8006664:	200016e4 	.word	0x200016e4

08006668 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	603a      	str	r2, [r7, #0]
 8006672:	71fb      	strb	r3, [r7, #7]
 8006674:	460b      	mov	r3, r1
 8006676:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <disk_ioctl+0x38>)
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	79fa      	ldrb	r2, [r7, #7]
 8006686:	4906      	ldr	r1, [pc, #24]	; (80066a0 <disk_ioctl+0x38>)
 8006688:	440a      	add	r2, r1
 800668a:	7a10      	ldrb	r0, [r2, #8]
 800668c:	79b9      	ldrb	r1, [r7, #6]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
  return res;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	200016e4 	.word	0x200016e4

080066a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3301      	adds	r3, #1
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	b21a      	sxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	b21b      	sxth	r3, r3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	b21b      	sxth	r3, r3
 80066c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80066c6:	89fb      	ldrh	r3, [r7, #14]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3303      	adds	r3, #3
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	3202      	adds	r2, #2
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	3201      	adds	r2, #1
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
	return rv;
 800670c:	68fb      	ldr	r3, [r7, #12]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	887a      	ldrh	r2, [r7, #2]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	887b      	ldrh	r3, [r7, #2]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	887a      	ldrh	r2, [r7, #2]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	1c53      	adds	r3, r2, #1
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1c59      	adds	r1, r3, #1
 80067cc:	6179      	str	r1, [r7, #20]
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f1      	bne.n	80067c2 <mem_cpy+0x1a>
	}
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	617a      	str	r2, [r7, #20]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3b01      	subs	r3, #1
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f3      	bne.n	80067fa <mem_set+0x10>
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006820:	b480      	push	{r7}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	61fa      	str	r2, [r7, #28]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	61ba      	str	r2, [r7, #24]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	1acb      	subs	r3, r1, r3
 800684c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3b01      	subs	r3, #1
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <mem_cmp+0x40>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0eb      	beq.n	8006838 <mem_cmp+0x18>

	return r;
 8006860:	697b      	ldr	r3, [r7, #20]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3724      	adds	r7, #36	; 0x24
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006878:	e002      	b.n	8006880 <chk_chr+0x12>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3301      	adds	r3, #1
 800687e:	607b      	str	r3, [r7, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <chk_chr+0x26>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	4293      	cmp	r3, r2
 8006892:	d1f2      	bne.n	800687a <chk_chr+0xc>
	return *str;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	781b      	ldrb	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e029      	b.n	800690c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80068b8:	4a27      	ldr	r2, [pc, #156]	; (8006958 <chk_lock+0xb4>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01d      	beq.n	8006902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80068c6:	4a24      	ldr	r2, [pc, #144]	; (8006958 <chk_lock+0xb4>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4413      	add	r3, r2
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d116      	bne.n	8006906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <chk_lock+0xb4>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d10c      	bne.n	8006906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80068ec:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <chk_lock+0xb4>)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	4413      	add	r3, r2
 80068f4:	3308      	adds	r3, #8
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d102      	bne.n	8006906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006900:	e007      	b.n	8006912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d9d2      	bls.n	80068b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d109      	bne.n	800692c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <chk_lock+0x80>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d101      	bne.n	8006928 <chk_lock+0x84>
 8006924:	2300      	movs	r3, #0
 8006926:	e010      	b.n	800694a <chk_lock+0xa6>
 8006928:	2312      	movs	r3, #18
 800692a:	e00e      	b.n	800694a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d108      	bne.n	8006944 <chk_lock+0xa0>
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <chk_lock+0xb4>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	4413      	add	r3, r2
 800693a:	330c      	adds	r3, #12
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d101      	bne.n	8006948 <chk_lock+0xa4>
 8006944:	2310      	movs	r3, #16
 8006946:	e000      	b.n	800694a <chk_lock+0xa6>
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	200016c4 	.word	0x200016c4

0800695c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	e002      	b.n	800696e <enq_lock+0x12>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3301      	adds	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d806      	bhi.n	8006982 <enq_lock+0x26>
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <enq_lock+0x40>)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	4413      	add	r3, r2
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f2      	bne.n	8006968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b02      	cmp	r3, #2
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	200016c4 	.word	0x200016c4

080069a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e01f      	b.n	80069f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80069b0:	4a41      	ldr	r2, [pc, #260]	; (8006ab8 <inc_lock+0x118>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	4413      	add	r3, r2
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d113      	bne.n	80069ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80069c2:	4a3d      	ldr	r2, [pc, #244]	; (8006ab8 <inc_lock+0x118>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	4413      	add	r3, r2
 80069ca:	3304      	adds	r3, #4
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d109      	bne.n	80069ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80069d6:	4a38      	ldr	r2, [pc, #224]	; (8006ab8 <inc_lock+0x118>)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4413      	add	r3, r2
 80069de:	3308      	adds	r3, #8
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d006      	beq.n	80069f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d9dc      	bls.n	80069b0 <inc_lock+0x10>
 80069f6:	e000      	b.n	80069fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80069f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d132      	bne.n	8006a66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <inc_lock+0x6c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d806      	bhi.n	8006a20 <inc_lock+0x80>
 8006a12:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <inc_lock+0x118>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	4413      	add	r3, r2
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f2      	bne.n	8006a06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d101      	bne.n	8006a2a <inc_lock+0x8a>
 8006a26:	2300      	movs	r3, #0
 8006a28:	e040      	b.n	8006aac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4922      	ldr	r1, [pc, #136]	; (8006ab8 <inc_lock+0x118>)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	440b      	add	r3, r1
 8006a36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	491e      	ldr	r1, [pc, #120]	; (8006ab8 <inc_lock+0x118>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	440b      	add	r3, r1
 8006a44:	3304      	adds	r3, #4
 8006a46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	491a      	ldr	r1, [pc, #104]	; (8006ab8 <inc_lock+0x118>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	440b      	add	r3, r1
 8006a54:	3308      	adds	r3, #8
 8006a56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a58:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <inc_lock+0x118>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	4413      	add	r3, r2
 8006a60:	330c      	adds	r3, #12
 8006a62:	2200      	movs	r2, #0
 8006a64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <inc_lock+0xe0>
 8006a6c:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <inc_lock+0x118>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	4413      	add	r3, r2
 8006a74:	330c      	adds	r3, #12
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <inc_lock+0xe0>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e015      	b.n	8006aac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d108      	bne.n	8006a98 <inc_lock+0xf8>
 8006a86:	4a0c      	ldr	r2, [pc, #48]	; (8006ab8 <inc_lock+0x118>)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	4413      	add	r3, r2
 8006a8e:	330c      	adds	r3, #12
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	e001      	b.n	8006a9c <inc_lock+0xfc>
 8006a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a9c:	4906      	ldr	r1, [pc, #24]	; (8006ab8 <inc_lock+0x118>)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	440b      	add	r3, r1
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	200016c4 	.word	0x200016c4

08006abc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d825      	bhi.n	8006b1c <dec_lock+0x60>
		n = Files[i].ctr;
 8006ad0:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <dec_lock+0x74>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	4413      	add	r3, r2
 8006ad8:	330c      	adds	r3, #12
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ade:	89fb      	ldrh	r3, [r7, #14]
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae4:	d101      	bne.n	8006aea <dec_lock+0x2e>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <dec_lock+0x3a>
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006af6:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <dec_lock+0x74>)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	4413      	add	r3, r2
 8006afe:	330c      	adds	r3, #12
 8006b00:	89fa      	ldrh	r2, [r7, #14]
 8006b02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <dec_lock+0x5a>
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <dec_lock+0x74>)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	4413      	add	r3, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	737b      	strb	r3, [r7, #13]
 8006b1a:	e001      	b.n	8006b20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200016c4 	.word	0x200016c4

08006b34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e010      	b.n	8006b64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006b42:	4a0d      	ldr	r2, [pc, #52]	; (8006b78 <clear_lock+0x44>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	4413      	add	r3, r2
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d105      	bne.n	8006b5e <clear_lock+0x2a>
 8006b52:	4a09      	ldr	r2, [pc, #36]	; (8006b78 <clear_lock+0x44>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	4413      	add	r3, r2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d9eb      	bls.n	8006b42 <clear_lock+0xe>
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	200016c4 	.word	0x200016c4

08006b7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d034      	beq.n	8006bfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7858      	ldrb	r0, [r3, #1]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	f7ff fd40 	bl	8006628 <disk_write>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e022      	b.n	8006bfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	1ad2      	subs	r2, r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d217      	bcs.n	8006bfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	789b      	ldrb	r3, [r3, #2]
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	e010      	b.n	8006bf4 <sync_window+0x78>
					wsect += fs->fsize;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7858      	ldrb	r0, [r3, #1]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006be6:	2301      	movs	r3, #1
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	f7ff fd1d 	bl	8006628 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d8eb      	bhi.n	8006bd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d01b      	beq.n	8006c54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ffad 	bl	8006b7c <sync_window>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d113      	bne.n	8006c54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7858      	ldrb	r0, [r3, #1]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c36:	2301      	movs	r3, #1
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	f7ff fcd5 	bl	80065e8 <disk_read>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ff87 	bl	8006b7c <sync_window>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d158      	bne.n	8006d2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d148      	bne.n	8006d12 <sync_fs+0xb2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791b      	ldrb	r3, [r3, #4]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d144      	bne.n	8006d12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3330      	adds	r3, #48	; 0x30
 8006c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fda9 	bl	80067ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3330      	adds	r3, #48	; 0x30
 8006c9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ca0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fd38 	bl	800671a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3330      	adds	r3, #48	; 0x30
 8006cae:	4921      	ldr	r1, [pc, #132]	; (8006d34 <sync_fs+0xd4>)
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fd4d 	bl	8006750 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3330      	adds	r3, #48	; 0x30
 8006cba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006cbe:	491e      	ldr	r1, [pc, #120]	; (8006d38 <sync_fs+0xd8>)
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fd45 	bl	8006750 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3330      	adds	r3, #48	; 0x30
 8006cca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7ff fd3b 	bl	8006750 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3330      	adds	r3, #48	; 0x30
 8006cde:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7ff fd31 	bl	8006750 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7858      	ldrb	r0, [r3, #1]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	2301      	movs	r3, #1
 8006d08:	f7ff fc8e 	bl	8006628 <disk_write>
			fs->fsi_flag = 0;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fca4 	bl	8006668 <disk_ioctl>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <sync_fs+0xca>
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	41615252 	.word	0x41615252
 8006d38:	61417272 	.word	0x61417272

08006d3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3b02      	subs	r3, #2
 8006d4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	3b02      	subs	r3, #2
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d301      	bcc.n	8006d5c <clust2sect+0x20>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e008      	b.n	8006d6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	895b      	ldrh	r3, [r3, #10]
 8006d60:	461a      	mov	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	fb03 f202 	mul.w	r2, r3, r2
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	4413      	add	r3, r2
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d904      	bls.n	8006d9a <get_fat+0x20>
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e08f      	b.n	8006ec0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006da0:	f04f 33ff 	mov.w	r3, #4294967295
 8006da4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d062      	beq.n	8006e74 <get_fat+0xfa>
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	dc7c      	bgt.n	8006eac <get_fat+0x132>
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d002      	beq.n	8006dbc <get_fat+0x42>
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d042      	beq.n	8006e40 <get_fat+0xc6>
 8006dba:	e077      	b.n	8006eac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	0a5b      	lsrs	r3, r3, #9
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f7ff ff14 	bl	8006c04 <move_window>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d167      	bne.n	8006eb2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	60fa      	str	r2, [r7, #12]
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006df4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6a1a      	ldr	r2, [r3, #32]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	0a5b      	lsrs	r3, r3, #9
 8006dfe:	4413      	add	r3, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	6938      	ldr	r0, [r7, #16]
 8006e04:	f7ff fefe 	bl	8006c04 <move_window>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d153      	bne.n	8006eb6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <get_fat+0xbc>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	e002      	b.n	8006e3c <get_fat+0xc2>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e3c:	617b      	str	r3, [r7, #20]
			break;
 8006e3e:	e03f      	b.n	8006ec0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	4413      	add	r3, r2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f7ff fed9 	bl	8006c04 <move_window>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d130      	bne.n	8006eba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006e66:	4413      	add	r3, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fc1b 	bl	80066a4 <ld_word>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	617b      	str	r3, [r7, #20]
			break;
 8006e72:	e025      	b.n	8006ec0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	6a1a      	ldr	r2, [r3, #32]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	09db      	lsrs	r3, r3, #7
 8006e7c:	4413      	add	r3, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6938      	ldr	r0, [r7, #16]
 8006e82:	f7ff febf 	bl	8006c04 <move_window>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d118      	bne.n	8006ebe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fc19 	bl	80066d4 <ld_dword>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ea8:	617b      	str	r3, [r7, #20]
			break;
 8006eaa:	e009      	b.n	8006ec0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	e006      	b.n	8006ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eb2:	bf00      	nop
 8006eb4:	e004      	b.n	8006ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ebe:	bf00      	nop
		}
	}

	return val;
 8006ec0:	697b      	ldr	r3, [r7, #20]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006eca:	b590      	push	{r4, r7, lr}
 8006ecc:	b089      	sub	sp, #36	; 0x24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f240 80d9 	bls.w	8007094 <put_fat+0x1ca>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	f080 80d3 	bcs.w	8007094 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	f000 8096 	beq.w	8007024 <put_fat+0x15a>
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	f300 80cb 	bgt.w	8007094 <put_fat+0x1ca>
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d002      	beq.n	8006f08 <put_fat+0x3e>
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d06e      	beq.n	8006fe4 <put_fat+0x11a>
 8006f06:	e0c5      	b.n	8007094 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	085b      	lsrs	r3, r3, #1
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4413      	add	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1a      	ldr	r2, [r3, #32]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	0a5b      	lsrs	r3, r3, #9
 8006f1e:	4413      	add	r3, r2
 8006f20:	4619      	mov	r1, r3
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff fe6e 	bl	8006c04 <move_window>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 80a9 	bne.w	8007086 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1c59      	adds	r1, r3, #1
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f44:	4413      	add	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00d      	beq.n	8006f6e <put_fat+0xa4>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	b25a      	sxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	b25b      	sxtb	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b25b      	sxtb	r3, r3
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e001      	b.n	8006f72 <put_fat+0xa8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	0a5b      	lsrs	r3, r3, #9
 8006f84:	4413      	add	r3, r2
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fe3b 	bl	8006c04 <move_window>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f92:	7ffb      	ldrb	r3, [r7, #31]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d178      	bne.n	800708a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	4413      	add	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <put_fat+0xf0>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	e00e      	b.n	8006fd8 <put_fat+0x10e>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	f023 030f 	bic.w	r3, r3, #15
 8006fc4:	b25a      	sxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	b25b      	sxtb	r3, r3
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	70da      	strb	r2, [r3, #3]
			break;
 8006fe2:	e057      	b.n	8007094 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	4413      	add	r3, r2
 8006fee:	4619      	mov	r1, r3
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fe07 	bl	8006c04 <move_window>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ffa:	7ffb      	ldrb	r3, [r7, #31]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d146      	bne.n	800708e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800700e:	4413      	add	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	b292      	uxth	r2, r2
 8007014:	4611      	mov	r1, r2
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fb7f 	bl	800671a <st_word>
			fs->wflag = 1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	70da      	strb	r2, [r3, #3]
			break;
 8007022:	e037      	b.n	8007094 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	09db      	lsrs	r3, r3, #7
 800702c:	4413      	add	r3, r2
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff fde7 	bl	8006c04 <move_window>
 8007036:	4603      	mov	r3, r0
 8007038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800703a:	7ffb      	ldrb	r3, [r7, #31]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d128      	bne.n	8007092 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007054:	4413      	add	r3, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fb3c 	bl	80066d4 <ld_dword>
 800705c:	4603      	mov	r3, r0
 800705e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007062:	4323      	orrs	r3, r4
 8007064:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007074:	4413      	add	r3, r2
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fb69 	bl	8006750 <st_dword>
			fs->wflag = 1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	70da      	strb	r2, [r3, #3]
			break;
 8007084:	e006      	b.n	8007094 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007086:	bf00      	nop
 8007088:	e004      	b.n	8007094 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800708a:	bf00      	nop
 800708c:	e002      	b.n	8007094 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800708e:	bf00      	nop
 8007090:	e000      	b.n	8007094 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007092:	bf00      	nop
		}
	}
	return res;
 8007094:	7ffb      	ldrb	r3, [r7, #31]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3724      	adds	r7, #36	; 0x24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}

0800709e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b088      	sub	sp, #32
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d904      	bls.n	80070c4 <remove_chain+0x26>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d301      	bcc.n	80070c8 <remove_chain+0x2a>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e04b      	b.n	8007160 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00c      	beq.n	80070e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	69b8      	ldr	r0, [r7, #24]
 80070d6:	f7ff fef8 	bl	8006eca <put_fat>
 80070da:	4603      	mov	r3, r0
 80070dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80070de:	7ffb      	ldrb	r3, [r7, #31]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <remove_chain+0x4a>
 80070e4:	7ffb      	ldrb	r3, [r7, #31]
 80070e6:	e03b      	b.n	8007160 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff fe45 	bl	8006d7a <get_fat>
 80070f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d031      	beq.n	800715c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <remove_chain+0x64>
 80070fe:	2302      	movs	r3, #2
 8007100:	e02e      	b.n	8007160 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d101      	bne.n	800710e <remove_chain+0x70>
 800710a:	2301      	movs	r3, #1
 800710c:	e028      	b.n	8007160 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800710e:	2200      	movs	r2, #0
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	69b8      	ldr	r0, [r7, #24]
 8007114:	f7ff fed9 	bl	8006eca <put_fat>
 8007118:	4603      	mov	r3, r0
 800711a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800711c:	7ffb      	ldrb	r3, [r7, #31]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <remove_chain+0x88>
 8007122:	7ffb      	ldrb	r3, [r7, #31]
 8007124:	e01c      	b.n	8007160 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	3b02      	subs	r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d20b      	bcs.n	800714c <remove_chain+0xae>
			fs->free_clst++;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	791b      	ldrb	r3, [r3, #4]
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3c6      	bcc.n	80070e8 <remove_chain+0x4a>
 800715a:	e000      	b.n	800715e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800715c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10d      	bne.n	800719a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <create_chain+0x2c>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	429a      	cmp	r2, r3
 8007192:	d31b      	bcc.n	80071cc <create_chain+0x64>
 8007194:	2301      	movs	r3, #1
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	e018      	b.n	80071cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fdec 	bl	8006d7a <get_fat>
 80071a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d801      	bhi.n	80071ae <create_chain+0x46>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e070      	b.n	8007290 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d101      	bne.n	80071ba <create_chain+0x52>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	e06a      	b.n	8007290 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d201      	bcs.n	80071c8 <create_chain+0x60>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	e063      	b.n	8007290 <create_chain+0x128>
		scl = clst;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d307      	bcc.n	80071f0 <create_chain+0x88>
				ncl = 2;
 80071e0:	2302      	movs	r3, #2
 80071e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d901      	bls.n	80071f0 <create_chain+0x88>
 80071ec:	2300      	movs	r3, #0
 80071ee:	e04f      	b.n	8007290 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80071f0:	69f9      	ldr	r1, [r7, #28]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fdc1 	bl	8006d7a <get_fat>
 80071f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d003      	beq.n	800720e <create_chain+0xa6>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d101      	bne.n	8007212 <create_chain+0xaa>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	e03e      	b.n	8007290 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	429a      	cmp	r2, r3
 8007218:	d1da      	bne.n	80071d0 <create_chain+0x68>
 800721a:	2300      	movs	r3, #0
 800721c:	e038      	b.n	8007290 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800721e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007220:	f04f 32ff 	mov.w	r2, #4294967295
 8007224:	69f9      	ldr	r1, [r7, #28]
 8007226:	6938      	ldr	r0, [r7, #16]
 8007228:	f7ff fe4f 	bl	8006eca <put_fat>
 800722c:	4603      	mov	r3, r0
 800722e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <create_chain+0xe2>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6938      	ldr	r0, [r7, #16]
 8007242:	f7ff fe42 	bl	8006eca <put_fat>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d116      	bne.n	800727e <create_chain+0x116>
		fs->last_clst = ncl;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	3b02      	subs	r3, #2
 8007260:	429a      	cmp	r2, r3
 8007262:	d804      	bhi.n	800726e <create_chain+0x106>
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	1e5a      	subs	r2, r3, #1
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	b2da      	uxtb	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	711a      	strb	r2, [r3, #4]
 800727c:	e007      	b.n	800728e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d102      	bne.n	800728a <create_chain+0x122>
 8007284:	f04f 33ff 	mov.w	r3, #4294967295
 8007288:	e000      	b.n	800728c <create_chain+0x124>
 800728a:	2301      	movs	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800728e:	69fb      	ldr	r3, [r7, #28]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	3304      	adds	r3, #4
 80072ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	0a5b      	lsrs	r3, r3, #9
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	8952      	ldrh	r2, [r2, #10]
 80072b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1d1a      	adds	r2, r3, #4
 80072c2:	613a      	str	r2, [r7, #16]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <clmt_clust+0x3a>
 80072ce:	2300      	movs	r3, #0
 80072d0:	e010      	b.n	80072f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d307      	bcc.n	80072ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3304      	adds	r3, #4
 80072e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072e8:	e7e9      	b.n	80072be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80072ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4413      	add	r3, r2
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007316:	d204      	bcs.n	8007322 <dir_sdi+0x22>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007322:	2302      	movs	r3, #2
 8007324:	e063      	b.n	80073ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <dir_sdi+0x46>
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d902      	bls.n	8007346 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	8912      	ldrh	r2, [r2, #8]
 8007354:	4293      	cmp	r3, r2
 8007356:	d301      	bcc.n	800735c <dir_sdi+0x5c>
 8007358:	2302      	movs	r3, #2
 800735a:	e048      	b.n	80073ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	61da      	str	r2, [r3, #28]
 8007364:	e029      	b.n	80073ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	895b      	ldrh	r3, [r3, #10]
 800736a:	025b      	lsls	r3, r3, #9
 800736c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800736e:	e019      	b.n	80073a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6979      	ldr	r1, [r7, #20]
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff fd00 	bl	8006d7a <get_fat>
 800737a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d101      	bne.n	8007388 <dir_sdi+0x88>
 8007384:	2301      	movs	r3, #1
 8007386:	e032      	b.n	80073ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d904      	bls.n	8007398 <dir_sdi+0x98>
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	429a      	cmp	r2, r3
 8007396:	d301      	bcc.n	800739c <dir_sdi+0x9c>
 8007398:	2302      	movs	r3, #2
 800739a:	e028      	b.n	80073ee <dir_sdi+0xee>
			ofs -= csz;
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d2e1      	bcs.n	8007370 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80073ac:	6979      	ldr	r1, [r7, #20]
 80073ae:	6938      	ldr	r0, [r7, #16]
 80073b0:	f7ff fcc4 	bl	8006d3c <clust2sect>
 80073b4:	4602      	mov	r2, r0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <dir_sdi+0xcc>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e010      	b.n	80073ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	0a5b      	lsrs	r3, r3, #9
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	3320      	adds	r3, #32
 800740c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <dir_next+0x28>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800741c:	d301      	bcc.n	8007422 <dir_next+0x2c>
 800741e:	2304      	movs	r3, #4
 8007420:	e0aa      	b.n	8007578 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 8098 	bne.w	800755e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	8912      	ldrh	r2, [r2, #8]
 8007448:	4293      	cmp	r3, r2
 800744a:	f0c0 8088 	bcc.w	800755e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	61da      	str	r2, [r3, #28]
 8007454:	2304      	movs	r3, #4
 8007456:	e08f      	b.n	8007578 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	0a5b      	lsrs	r3, r3, #9
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	8952      	ldrh	r2, [r2, #10]
 8007460:	3a01      	subs	r2, #1
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d17a      	bne.n	800755e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7ff fc82 	bl	8006d7a <get_fat>
 8007476:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d801      	bhi.n	8007482 <dir_next+0x8c>
 800747e:	2302      	movs	r3, #2
 8007480:	e07a      	b.n	8007578 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d101      	bne.n	800748e <dir_next+0x98>
 800748a:	2301      	movs	r3, #1
 800748c:	e074      	b.n	8007578 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	429a      	cmp	r2, r3
 8007496:	d358      	bcc.n	800754a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	61da      	str	r2, [r3, #28]
 80074a4:	2304      	movs	r3, #4
 80074a6:	e067      	b.n	8007578 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7ff fe59 	bl	8007168 <create_chain>
 80074b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <dir_next+0xcc>
 80074be:	2307      	movs	r3, #7
 80074c0:	e05a      	b.n	8007578 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <dir_next+0xd6>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e055      	b.n	8007578 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d101      	bne.n	80074d8 <dir_next+0xe2>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e04f      	b.n	8007578 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff fb4f 	bl	8006b7c <sync_window>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <dir_next+0xf2>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e047      	b.n	8007578 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3330      	adds	r3, #48	; 0x30
 80074ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff f979 	bl	80067ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	6979      	ldr	r1, [r7, #20]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fc1c 	bl	8006d3c <clust2sect>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	62da      	str	r2, [r3, #44]	; 0x2c
 800750a:	e012      	b.n	8007532 <dir_next+0x13c>
						fs->wflag = 1;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fb32 	bl	8006b7c <sync_window>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <dir_next+0x12c>
 800751e:	2301      	movs	r3, #1
 8007520:	e02a      	b.n	8007578 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	62da      	str	r2, [r3, #44]	; 0x2c
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	895b      	ldrh	r3, [r3, #10]
 8007536:	461a      	mov	r2, r3
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4293      	cmp	r3, r2
 800753c:	d3e6      	bcc.n	800750c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad2      	subs	r2, r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007550:	6979      	ldr	r1, [r7, #20]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fbf2 	bl	8006d3c <clust2sect>
 8007558:	4602      	mov	r2, r0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff feb4 	bl	8007300 <dir_sdi>
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d12b      	bne.n	80075fa <dir_alloc+0x7a>
		n = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fb29 	bl	8006c04 <move_window>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11d      	bne.n	80075f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2be5      	cmp	r3, #229	; 0xe5
 80075c4:	d004      	beq.n	80075d0 <dir_alloc+0x50>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d107      	bne.n	80075e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	3301      	adds	r3, #1
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d102      	bne.n	80075e4 <dir_alloc+0x64>
 80075de:	e00c      	b.n	80075fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80075e0:	2300      	movs	r3, #0
 80075e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80075e4:	2101      	movs	r1, #1
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff ff05 	bl	80073f6 <dir_next>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0d7      	beq.n	80075a6 <dir_alloc+0x26>
 80075f6:	e000      	b.n	80075fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80075f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d101      	bne.n	8007604 <dir_alloc+0x84>
 8007600:	2307      	movs	r3, #7
 8007602:	75fb      	strb	r3, [r7, #23]
	return res;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	331a      	adds	r3, #26
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff f841 	bl	80066a4 <ld_word>
 8007622:	4603      	mov	r3, r0
 8007624:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d109      	bne.n	8007642 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	3314      	adds	r3, #20
 8007632:	4618      	mov	r0, r3
 8007634:	f7ff f836 	bl	80066a4 <ld_word>
 8007638:	4603      	mov	r3, r0
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	331a      	adds	r3, #26
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	b292      	uxth	r2, r2
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff f859 	bl	800671a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d109      	bne.n	8007684 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f103 0214 	add.w	r2, r3, #20
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	b29b      	uxth	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7ff f84b 	bl	800671a <st_word>
	}
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fe2f 	bl	8007300 <dir_sdi>
 80076a2:	4603      	mov	r3, r0
 80076a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <dir_find+0x24>
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	e03e      	b.n	800772e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6938      	ldr	r0, [r7, #16]
 80076b8:	f7ff faa4 	bl	8006c04 <move_window>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d12f      	bne.n	8007726 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <dir_find+0x4e>
 80076d4:	2304      	movs	r3, #4
 80076d6:	75fb      	strb	r3, [r7, #23]
 80076d8:	e028      	b.n	800772c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	330b      	adds	r3, #11
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	330b      	adds	r3, #11
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <dir_find+0x86>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a18      	ldr	r0, [r3, #32]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3324      	adds	r3, #36	; 0x24
 8007704:	220b      	movs	r2, #11
 8007706:	4619      	mov	r1, r3
 8007708:	f7ff f88a 	bl	8006820 <mem_cmp>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007712:	2100      	movs	r1, #0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fe6e 	bl	80073f6 <dir_next>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0c5      	beq.n	80076b0 <dir_find+0x24>
 8007724:	e002      	b.n	800772c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007726:	bf00      	nop
 8007728:	e000      	b.n	800772c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800772a:	bf00      	nop

	return res;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff ff1a 	bl	8007580 <dir_alloc>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d11c      	bne.n	8007790 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	4619      	mov	r1, r3
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f7ff fa51 	bl	8006c04 <move_window>
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	2220      	movs	r2, #32
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff f838 	bl	80067ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a18      	ldr	r0, [r3, #32]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	220b      	movs	r2, #11
 8007784:	4619      	mov	r1, r3
 8007786:	f7ff f80f 	bl	80067a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2201      	movs	r2, #1
 800778e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80077b2:	220b      	movs	r2, #11
 80077b4:	2120      	movs	r1, #32
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f7ff f817 	bl	80067ea <mem_set>
	si = i = 0; ni = 8;
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	2308      	movs	r3, #8
 80077c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	61fa      	str	r2, [r7, #28]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80077d6:	7efb      	ldrb	r3, [r7, #27]
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d94e      	bls.n	800787a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80077dc:	7efb      	ldrb	r3, [r7, #27]
 80077de:	2b2f      	cmp	r3, #47	; 0x2f
 80077e0:	d006      	beq.n	80077f0 <create_name+0x54>
 80077e2:	7efb      	ldrb	r3, [r7, #27]
 80077e4:	2b5c      	cmp	r3, #92	; 0x5c
 80077e6:	d110      	bne.n	800780a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80077e8:	e002      	b.n	80077f0 <create_name+0x54>
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	3301      	adds	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b2f      	cmp	r3, #47	; 0x2f
 80077fa:	d0f6      	beq.n	80077ea <create_name+0x4e>
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b5c      	cmp	r3, #92	; 0x5c
 8007806:	d0f0      	beq.n	80077ea <create_name+0x4e>
			break;
 8007808:	e038      	b.n	800787c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800780a:	7efb      	ldrb	r3, [r7, #27]
 800780c:	2b2e      	cmp	r3, #46	; 0x2e
 800780e:	d003      	beq.n	8007818 <create_name+0x7c>
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d30c      	bcc.n	8007832 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b0b      	cmp	r3, #11
 800781c:	d002      	beq.n	8007824 <create_name+0x88>
 800781e:	7efb      	ldrb	r3, [r7, #27]
 8007820:	2b2e      	cmp	r3, #46	; 0x2e
 8007822:	d001      	beq.n	8007828 <create_name+0x8c>
 8007824:	2306      	movs	r3, #6
 8007826:	e044      	b.n	80078b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007828:	2308      	movs	r3, #8
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	230b      	movs	r3, #11
 800782e:	617b      	str	r3, [r7, #20]
			continue;
 8007830:	e022      	b.n	8007878 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da04      	bge.n	8007844 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800783a:	7efb      	ldrb	r3, [r7, #27]
 800783c:	3b80      	subs	r3, #128	; 0x80
 800783e:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <create_name+0x120>)
 8007840:	5cd3      	ldrb	r3, [r2, r3]
 8007842:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007844:	7efb      	ldrb	r3, [r7, #27]
 8007846:	4619      	mov	r1, r3
 8007848:	481d      	ldr	r0, [pc, #116]	; (80078c0 <create_name+0x124>)
 800784a:	f7ff f810 	bl	800686e <chk_chr>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <create_name+0xbc>
 8007854:	2306      	movs	r3, #6
 8007856:	e02c      	b.n	80078b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007858:	7efb      	ldrb	r3, [r7, #27]
 800785a:	2b60      	cmp	r3, #96	; 0x60
 800785c:	d905      	bls.n	800786a <create_name+0xce>
 800785e:	7efb      	ldrb	r3, [r7, #27]
 8007860:	2b7a      	cmp	r3, #122	; 0x7a
 8007862:	d802      	bhi.n	800786a <create_name+0xce>
 8007864:	7efb      	ldrb	r3, [r7, #27]
 8007866:	3b20      	subs	r3, #32
 8007868:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	613a      	str	r2, [r7, #16]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	4413      	add	r3, r2
 8007874:	7efa      	ldrb	r2, [r7, #27]
 8007876:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007878:	e7a6      	b.n	80077c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800787a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	441a      	add	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <create_name+0xf4>
 800788c:	2306      	movs	r3, #6
 800788e:	e010      	b.n	80078b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2be5      	cmp	r3, #229	; 0xe5
 8007896:	d102      	bne.n	800789e <create_name+0x102>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2205      	movs	r2, #5
 800789c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800789e:	7efb      	ldrb	r3, [r7, #27]
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d801      	bhi.n	80078a8 <create_name+0x10c>
 80078a4:	2204      	movs	r2, #4
 80078a6:	e000      	b.n	80078aa <create_name+0x10e>
 80078a8:	2200      	movs	r2, #0
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	330b      	adds	r3, #11
 80078ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80078b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	080089d8 	.word	0x080089d8
 80078c0:	08008960 	.word	0x08008960

080078c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80078d8:	e002      	b.n	80078e0 <follow_path+0x1c>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b2f      	cmp	r3, #47	; 0x2f
 80078e6:	d0f8      	beq.n	80078da <follow_path+0x16>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b5c      	cmp	r3, #92	; 0x5c
 80078ee:	d0f4      	beq.n	80078da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2200      	movs	r2, #0
 80078f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b1f      	cmp	r3, #31
 80078fc:	d80a      	bhi.n	8007914 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2280      	movs	r2, #128	; 0x80
 8007902:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007906:	2100      	movs	r1, #0
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fcf9 	bl	8007300 <dir_sdi>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]
 8007912:	e043      	b.n	800799c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007914:	463b      	mov	r3, r7
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff ff3f 	bl	800779c <create_name>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d134      	bne.n	8007992 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff feaf 	bl	800768c <dir_find>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007938:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d127      	bne.n	8007996 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d122      	bne.n	8007996 <follow_path+0xd2>
 8007950:	2305      	movs	r3, #5
 8007952:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007954:	e01f      	b.n	8007996 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11c      	bne.n	800799a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	799b      	ldrb	r3, [r3, #6]
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800796c:	2305      	movs	r3, #5
 800796e:	75fb      	strb	r3, [r7, #23]
 8007970:	e014      	b.n	800799c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007980:	4413      	add	r3, r2
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fe42 	bl	800760e <ld_clust>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007990:	e7c0      	b.n	8007914 <follow_path+0x50>
			if (res != FR_OK) break;
 8007992:	bf00      	nop
 8007994:	e002      	b.n	800799c <follow_path+0xd8>
				break;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800799a:	bf00      	nop
			}
		}
	}

	return res;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b087      	sub	sp, #28
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295
 80079b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d031      	beq.n	8007a20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e002      	b.n	80079ca <get_ldnumber+0x24>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	3301      	adds	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d903      	bls.n	80079da <get_ldnumber+0x34>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b3a      	cmp	r3, #58	; 0x3a
 80079d8:	d1f4      	bne.n	80079c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b3a      	cmp	r3, #58	; 0x3a
 80079e0:	d11c      	bne.n	8007a1c <get_ldnumber+0x76>
			tp = *path;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	60fa      	str	r2, [r7, #12]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	3b30      	subs	r3, #48	; 0x30
 80079f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d80e      	bhi.n	8007a18 <get_ldnumber+0x72>
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d10a      	bne.n	8007a18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d107      	bne.n	8007a18 <get_ldnumber+0x72>
					vol = (int)i;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	e002      	b.n	8007a22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007a20:	693b      	ldr	r3, [r7, #16]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	70da      	strb	r2, [r3, #3]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff f8da 	bl	8006c04 <move_window>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <check_fs+0x2a>
 8007a56:	2304      	movs	r3, #4
 8007a58:	e038      	b.n	8007acc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3330      	adds	r3, #48	; 0x30
 8007a5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fe1e 	bl	80066a4 <ld_word>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d001      	beq.n	8007a78 <check_fs+0x48>
 8007a74:	2303      	movs	r3, #3
 8007a76:	e029      	b.n	8007acc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a7e:	2be9      	cmp	r3, #233	; 0xe9
 8007a80:	d009      	beq.n	8007a96 <check_fs+0x66>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a88:	2beb      	cmp	r3, #235	; 0xeb
 8007a8a:	d11e      	bne.n	8007aca <check_fs+0x9a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a92:	2b90      	cmp	r3, #144	; 0x90
 8007a94:	d119      	bne.n	8007aca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3330      	adds	r3, #48	; 0x30
 8007a9a:	3336      	adds	r3, #54	; 0x36
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fe19 	bl	80066d4 <ld_dword>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	4a0a      	ldr	r2, [pc, #40]	; (8007ad4 <check_fs+0xa4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d101      	bne.n	8007ab2 <check_fs+0x82>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e00c      	b.n	8007acc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3330      	adds	r3, #48	; 0x30
 8007ab6:	3352      	adds	r3, #82	; 0x52
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fe0b 	bl	80066d4 <ld_dword>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <check_fs+0xa8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d101      	bne.n	8007aca <check_fs+0x9a>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007aca:	2302      	movs	r3, #2
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	00544146 	.word	0x00544146
 8007ad8:	33544146 	.word	0x33544146

08007adc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b096      	sub	sp, #88	; 0x58
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff ff58 	bl	80079a6 <get_ldnumber>
 8007af6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da01      	bge.n	8007b02 <find_volume+0x26>
 8007afe:	230b      	movs	r3, #11
 8007b00:	e22d      	b.n	8007f5e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b02:	4aa1      	ldr	r2, [pc, #644]	; (8007d88 <find_volume+0x2ac>)
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <find_volume+0x3a>
 8007b12:	230c      	movs	r3, #12
 8007b14:	e223      	b.n	8007f5e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01a      	beq.n	8007b62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fd19 	bl	8006568 <disk_status>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <find_volume+0x82>
 8007b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	e1ff      	b.n	8007f5e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e1fd      	b.n	8007f5e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fd11 	bl	800659c <disk_initialize>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e1e6      	b.n	8007f5e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <find_volume+0xca>
 8007b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ba2:	230a      	movs	r3, #10
 8007ba4:	e1db      	b.n	8007f5e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bae:	f7ff ff3f 	bl	8007a30 <check_fs>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007bb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d149      	bne.n	8007c54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc4:	e01e      	b.n	8007c04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bd4:	4413      	add	r3, r2
 8007bd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	3304      	adds	r3, #4
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <find_volume+0x114>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	3308      	adds	r3, #8
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fd74 	bl	80066d4 <ld_dword>
 8007bec:	4602      	mov	r2, r0
 8007bee:	e000      	b.n	8007bf2 <find_volume+0x116>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	3358      	adds	r3, #88	; 0x58
 8007bf8:	443b      	add	r3, r7
 8007bfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c00:	3301      	adds	r3, #1
 8007c02:	643b      	str	r3, [r7, #64]	; 0x40
 8007c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d9dd      	bls.n	8007bc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <find_volume+0x13e>
 8007c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c16:	3b01      	subs	r3, #1
 8007c18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	3358      	adds	r3, #88	; 0x58
 8007c20:	443b      	add	r3, r7
 8007c22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <find_volume+0x15e>
 8007c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c32:	f7ff fefd 	bl	8007a30 <check_fs>
 8007c36:	4603      	mov	r3, r0
 8007c38:	e000      	b.n	8007c3c <find_volume+0x160>
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d905      	bls.n	8007c54 <find_volume+0x178>
 8007c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d9e2      	bls.n	8007c1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d101      	bne.n	8007c60 <find_volume+0x184>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e17e      	b.n	8007f5e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d901      	bls.n	8007c6c <find_volume+0x190>
 8007c68:	230d      	movs	r3, #13
 8007c6a:	e178      	b.n	8007f5e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	3330      	adds	r3, #48	; 0x30
 8007c70:	330b      	adds	r3, #11
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fd16 	bl	80066a4 <ld_word>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7e:	d001      	beq.n	8007c84 <find_volume+0x1a8>
 8007c80:	230d      	movs	r3, #13
 8007c82:	e16c      	b.n	8007f5e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	3330      	adds	r3, #48	; 0x30
 8007c88:	3316      	adds	r3, #22
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fd0a 	bl	80066a4 <ld_word>
 8007c90:	4603      	mov	r3, r0
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <find_volume+0x1cc>
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	3330      	adds	r3, #48	; 0x30
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe fd17 	bl	80066d4 <ld_dword>
 8007ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	789b      	ldrb	r3, [r3, #2]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d005      	beq.n	8007ccc <find_volume+0x1f0>
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	789b      	ldrb	r3, [r3, #2]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d001      	beq.n	8007ccc <find_volume+0x1f0>
 8007cc8:	230d      	movs	r3, #13
 8007cca:	e148      	b.n	8007f5e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	895b      	ldrh	r3, [r3, #10]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <find_volume+0x224>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	895b      	ldrh	r3, [r3, #10]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	895b      	ldrh	r3, [r3, #10]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <find_volume+0x228>
 8007d00:	230d      	movs	r3, #13
 8007d02:	e12c      	b.n	8007f5e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	3330      	adds	r3, #48	; 0x30
 8007d08:	3311      	adds	r3, #17
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fcca 	bl	80066a4 <ld_word>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <find_volume+0x24e>
 8007d26:	230d      	movs	r3, #13
 8007d28:	e119      	b.n	8007f5e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	3330      	adds	r3, #48	; 0x30
 8007d2e:	3313      	adds	r3, #19
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fcb7 	bl	80066a4 <ld_word>
 8007d36:	4603      	mov	r3, r0
 8007d38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <find_volume+0x272>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	3320      	adds	r3, #32
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fcc4 	bl	80066d4 <ld_dword>
 8007d4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	3330      	adds	r3, #48	; 0x30
 8007d52:	330e      	adds	r3, #14
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe fca5 	bl	80066a4 <ld_word>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <find_volume+0x28c>
 8007d64:	230d      	movs	r3, #13
 8007d66:	e0fa      	b.n	8007f5e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6c:	4413      	add	r3, r2
 8007d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d70:	8912      	ldrh	r2, [r2, #8]
 8007d72:	0912      	lsrs	r2, r2, #4
 8007d74:	b292      	uxth	r2, r2
 8007d76:	4413      	add	r3, r2
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d204      	bcs.n	8007d8c <find_volume+0x2b0>
 8007d82:	230d      	movs	r3, #13
 8007d84:	e0eb      	b.n	8007f5e <find_volume+0x482>
 8007d86:	bf00      	nop
 8007d88:	200016bc 	.word	0x200016bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d94:	8952      	ldrh	r2, [r2, #10]
 8007d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <find_volume+0x2ca>
 8007da2:	230d      	movs	r3, #13
 8007da4:	e0db      	b.n	8007f5e <find_volume+0x482>
		fmt = FS_FAT32;
 8007da6:	2303      	movs	r3, #3
 8007da8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d802      	bhi.n	8007dbc <find_volume+0x2e0>
 8007db6:	2302      	movs	r3, #2
 8007db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d802      	bhi.n	8007dcc <find_volume+0x2f0>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dd8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dde:	441a      	add	r2, r3
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007de4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	441a      	add	r2, r3
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d11e      	bne.n	8007e34 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	3330      	adds	r3, #48	; 0x30
 8007dfa:	332a      	adds	r3, #42	; 0x2a
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fc51 	bl	80066a4 <ld_word>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <find_volume+0x330>
 8007e08:	230d      	movs	r3, #13
 8007e0a:	e0a8      	b.n	8007f5e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	891b      	ldrh	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <find_volume+0x33c>
 8007e14:	230d      	movs	r3, #13
 8007e16:	e0a2      	b.n	8007f5e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	3330      	adds	r3, #48	; 0x30
 8007e1c:	332c      	adds	r3, #44	; 0x2c
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fc58 	bl	80066d4 <ld_dword>
 8007e24:	4602      	mov	r2, r0
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	647b      	str	r3, [r7, #68]	; 0x44
 8007e32:	e01f      	b.n	8007e74 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	891b      	ldrh	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <find_volume+0x364>
 8007e3c:	230d      	movs	r3, #13
 8007e3e:	e08e      	b.n	8007f5e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	6a1a      	ldr	r2, [r3, #32]
 8007e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e46:	441a      	add	r2, r3
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d103      	bne.n	8007e5c <find_volume+0x380>
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	e00a      	b.n	8007e72 <find_volume+0x396>
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	085a      	lsrs	r2, r3, #1
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	699a      	ldr	r2, [r3, #24]
 8007e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e7e:	0a5b      	lsrs	r3, r3, #9
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d201      	bcs.n	8007e88 <find_volume+0x3ac>
 8007e84:	230d      	movs	r3, #13
 8007e86:	e06a      	b.n	8007f5e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	611a      	str	r2, [r3, #16]
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d149      	bne.n	8007f3a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	3330      	adds	r3, #48	; 0x30
 8007eaa:	3330      	adds	r3, #48	; 0x30
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fbf9 	bl	80066a4 <ld_word>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d140      	bne.n	8007f3a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eba:	3301      	adds	r3, #1
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ec0:	f7fe fea0 	bl	8006c04 <move_window>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d137      	bne.n	8007f3a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	2200      	movs	r2, #0
 8007ece:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fbe3 	bl	80066a4 <ld_word>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d127      	bne.n	8007f3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	3330      	adds	r3, #48	; 0x30
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fbf0 	bl	80066d4 <ld_dword>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4a1c      	ldr	r2, [pc, #112]	; (8007f68 <find_volume+0x48c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d11e      	bne.n	8007f3a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	3330      	adds	r3, #48	; 0x30
 8007f00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fbe5 	bl	80066d4 <ld_dword>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4a17      	ldr	r2, [pc, #92]	; (8007f6c <find_volume+0x490>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d113      	bne.n	8007f3a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	3330      	adds	r3, #48	; 0x30
 8007f16:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fbda 	bl	80066d4 <ld_dword>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	3330      	adds	r3, #48	; 0x30
 8007f2a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fbd0 	bl	80066d4 <ld_dword>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <find_volume+0x494>)
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <find_volume+0x494>)
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <find_volume+0x494>)
 8007f50:	881a      	ldrh	r2, [r3, #0]
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f58:	f7fe fdec 	bl	8006b34 <clear_lock>
#endif
	return FR_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3758      	adds	r7, #88	; 0x58
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	41615252 	.word	0x41615252
 8007f6c:	61417272 	.word	0x61417272
 8007f70:	200016c0 	.word	0x200016c0

08007f74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f7e:	2309      	movs	r3, #9
 8007f80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01c      	beq.n	8007fc2 <validate+0x4e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d018      	beq.n	8007fc2 <validate+0x4e>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d013      	beq.n	8007fc2 <validate+0x4e>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	889a      	ldrh	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	88db      	ldrh	r3, [r3, #6]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d10c      	bne.n	8007fc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fada 	bl	8006568 <disk_status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <validate+0x4e>
			res = FR_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <validate+0x5a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	e000      	b.n	8007fd0 <validate+0x5c>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	6013      	str	r3, [r2, #0]
	return res;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fcd5 	bl	80079a6 <get_ldnumber>
 8007ffc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da01      	bge.n	8008008 <f_mount+0x28>
 8008004:	230b      	movs	r3, #11
 8008006:	e02b      	b.n	8008060 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008008:	4a17      	ldr	r2, [pc, #92]	; (8008068 <f_mount+0x88>)
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008010:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008018:	69b8      	ldr	r0, [r7, #24]
 800801a:	f7fe fd8b 	bl	8006b34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	490d      	ldr	r1, [pc, #52]	; (8008068 <f_mount+0x88>)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <f_mount+0x66>
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d001      	beq.n	800804a <f_mount+0x6a>
 8008046:	2300      	movs	r3, #0
 8008048:	e00a      	b.n	8008060 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800804a:	f107 010c 	add.w	r1, r7, #12
 800804e:	f107 0308 	add.w	r3, r7, #8
 8008052:	2200      	movs	r2, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fd41 	bl	8007adc <find_volume>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800805e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	200016bc 	.word	0x200016bc

0800806c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b098      	sub	sp, #96	; 0x60
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <f_open+0x18>
 8008080:	2309      	movs	r3, #9
 8008082:	e1ad      	b.n	80083e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800808a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800808c:	79fa      	ldrb	r2, [r7, #7]
 800808e:	f107 0110 	add.w	r1, r7, #16
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fd20 	bl	8007adc <find_volume>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80080a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8191 	bne.w	80083ce <f_open+0x362>
		dj.obj.fs = fs;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	f107 0314 	add.w	r3, r7, #20
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fc03 	bl	80078c4 <follow_path>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d11a      	bne.n	8008102 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	da03      	bge.n	80080de <f_open+0x72>
				res = FR_INVALID_NAME;
 80080d6:	2306      	movs	r3, #6
 80080d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080dc:	e011      	b.n	8008102 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fbd4 	bl	80068a4 <chk_lock>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	f003 031c 	and.w	r3, r3, #28
 8008108:	2b00      	cmp	r3, #0
 800810a:	d07f      	beq.n	800820c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800810c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008110:	2b00      	cmp	r3, #0
 8008112:	d017      	beq.n	8008144 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008118:	2b04      	cmp	r3, #4
 800811a:	d10e      	bne.n	800813a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800811c:	f7fe fc1e 	bl	800695c <enq_lock>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d006      	beq.n	8008134 <f_open+0xc8>
 8008126:	f107 0314 	add.w	r3, r7, #20
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fb03 	bl	8007736 <dir_register>
 8008130:	4603      	mov	r3, r0
 8008132:	e000      	b.n	8008136 <f_open+0xca>
 8008134:	2312      	movs	r3, #18
 8008136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	f043 0308 	orr.w	r3, r3, #8
 8008140:	71fb      	strb	r3, [r7, #7]
 8008142:	e010      	b.n	8008166 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008144:	7ebb      	ldrb	r3, [r7, #26]
 8008146:	f003 0311 	and.w	r3, r3, #17
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <f_open+0xea>
					res = FR_DENIED;
 800814e:	2307      	movs	r3, #7
 8008150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008154:	e007      	b.n	8008166 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <f_open+0xfa>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800816a:	2b00      	cmp	r3, #0
 800816c:	d168      	bne.n	8008240 <f_open+0x1d4>
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d063      	beq.n	8008240 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008178:	f7fd ffb4 	bl	80060e4 <get_fattime>
 800817c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	330e      	adds	r3, #14
 8008182:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fae3 	bl	8006750 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	3316      	adds	r3, #22
 800818e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fadd 	bl	8006750 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	330b      	adds	r3, #11
 800819a:	2220      	movs	r2, #32
 800819c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fa32 	bl	800760e <ld_clust>
 80081aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081b0:	2200      	movs	r2, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff fa4a 	bl	800764c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	331c      	adds	r3, #28
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fac6 	bl	8006750 <st_dword>
					fs->wflag = 1;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2201      	movs	r2, #1
 80081c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d037      	beq.n	8008240 <f_open+0x1d4>
						dw = fs->winsect;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80081d6:	f107 0314 	add.w	r3, r7, #20
 80081da:	2200      	movs	r2, #0
 80081dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe ff5d 	bl	800709e <remove_chain>
 80081e4:	4603      	mov	r3, r0
 80081e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80081ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d126      	bne.n	8008240 <f_open+0x1d4>
							res = move_window(fs, dw);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fd04 	bl	8006c04 <move_window>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008206:	3a01      	subs	r2, #1
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e019      	b.n	8008240 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800820c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008210:	2b00      	cmp	r3, #0
 8008212:	d115      	bne.n	8008240 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008214:	7ebb      	ldrb	r3, [r7, #26]
 8008216:	f003 0310 	and.w	r3, r3, #16
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <f_open+0x1ba>
					res = FR_NO_FILE;
 800821e:	2304      	movs	r3, #4
 8008220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008224:	e00c      	b.n	8008240 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <f_open+0x1d4>
 8008230:	7ebb      	ldrb	r3, [r7, #26]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <f_open+0x1d4>
						res = FR_DENIED;
 800823a:	2307      	movs	r3, #7
 800823c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008244:	2b00      	cmp	r3, #0
 8008246:	d128      	bne.n	800829a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008258:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	bf14      	ite	ne
 8008272:	2301      	movne	r3, #1
 8008274:	2300      	moveq	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	f107 0314 	add.w	r3, r7, #20
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fb8d 	bl	80069a0 <inc_lock>
 8008286:	4602      	mov	r2, r0
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <f_open+0x22e>
 8008294:	2302      	movs	r3, #2
 8008296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800829a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 8095 	bne.w	80083ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff f9af 	bl	800760e <ld_clust>
 80082b0:	4602      	mov	r2, r0
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	331c      	adds	r3, #28
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fa0a 	bl	80066d4 <ld_dword>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	88da      	ldrh	r2, [r3, #6]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	79fa      	ldrb	r2, [r7, #7]
 80082de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3330      	adds	r3, #48	; 0x30
 80082f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fa74 	bl	80067ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d060      	beq.n	80083ce <f_open+0x362>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05c      	beq.n	80083ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	895b      	ldrh	r3, [r3, #10]
 8008320:	025b      	lsls	r3, r3, #9
 8008322:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	657b      	str	r3, [r7, #84]	; 0x54
 8008330:	e016      	b.n	8008360 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd1f 	bl	8006d7a <get_fat>
 800833c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800833e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008340:	2b01      	cmp	r3, #1
 8008342:	d802      	bhi.n	800834a <f_open+0x2de>
 8008344:	2302      	movs	r3, #2
 8008346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800834a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d102      	bne.n	8008358 <f_open+0x2ec>
 8008352:	2301      	movs	r3, #1
 8008354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800835a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	657b      	str	r3, [r7, #84]	; 0x54
 8008360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <f_open+0x304>
 8008368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836c:	429a      	cmp	r2, r3
 800836e:	d8e0      	bhi.n	8008332 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008374:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d127      	bne.n	80083ce <f_open+0x362>
 800837e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008384:	2b00      	cmp	r3, #0
 8008386:	d022      	beq.n	80083ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fcd5 	bl	8006d3c <clust2sect>
 8008392:	6478      	str	r0, [r7, #68]	; 0x44
 8008394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008396:	2b00      	cmp	r3, #0
 8008398:	d103      	bne.n	80083a2 <f_open+0x336>
						res = FR_INT_ERR;
 800839a:	2302      	movs	r3, #2
 800839c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083a0:	e015      	b.n	80083ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a4:	0a5a      	lsrs	r2, r3, #9
 80083a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a8:	441a      	add	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	7858      	ldrb	r0, [r3, #1]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1a      	ldr	r2, [r3, #32]
 80083bc:	2301      	movs	r3, #1
 80083be:	f7fe f913 	bl	80065e8 <disk_read>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <f_open+0x362>
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <f_open+0x370>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3760      	adds	r7, #96	; 0x60
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f107 0214 	add.w	r2, r7, #20
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff fdb3 	bl	8007f74 <validate>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008418:	2b00      	cmp	r3, #0
 800841a:	d107      	bne.n	800842c <f_read+0x44>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	7d5b      	ldrb	r3, [r3, #21]
 8008420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <f_read+0x4a>
 800842c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008430:	e115      	b.n	800865e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	7d1b      	ldrb	r3, [r3, #20]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <f_read+0x5a>
 800843e:	2307      	movs	r3, #7
 8008440:	e10d      	b.n	800865e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	429a      	cmp	r2, r3
 8008454:	f240 80fe 	bls.w	8008654 <f_read+0x26c>
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800845c:	e0fa      	b.n	8008654 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 80c6 	bne.w	80085f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	0a5b      	lsrs	r3, r3, #9
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	8952      	ldrh	r2, [r2, #10]
 8008476:	3a01      	subs	r2, #1
 8008478:	4013      	ands	r3, r2
 800847a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d12f      	bne.n	80084e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d103      	bne.n	8008492 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	633b      	str	r3, [r7, #48]	; 0x30
 8008490:	e013      	b.n	80084ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	4619      	mov	r1, r3
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7fe fef9 	bl	8007298 <clmt_clust>
 80084a6:	6338      	str	r0, [r7, #48]	; 0x30
 80084a8:	e007      	b.n	80084ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fc61 	bl	8006d7a <get_fat>
 80084b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d804      	bhi.n	80084ca <f_read+0xe2>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2202      	movs	r2, #2
 80084c4:	755a      	strb	r2, [r3, #21]
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0c9      	b.n	800865e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d104      	bne.n	80084dc <f_read+0xf4>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	755a      	strb	r2, [r3, #21]
 80084d8:	2301      	movs	r3, #1
 80084da:	e0c0      	b.n	800865e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f7fe fc26 	bl	8006d3c <clust2sect>
 80084f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <f_read+0x11a>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2202      	movs	r2, #2
 80084fc:	755a      	strb	r2, [r3, #21]
 80084fe:	2302      	movs	r3, #2
 8008500:	e0ad      	b.n	800865e <f_read+0x276>
			sect += csect;
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	0a5b      	lsrs	r3, r3, #9
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d039      	beq.n	800858a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	4413      	add	r3, r2
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	8952      	ldrh	r2, [r2, #10]
 8008520:	4293      	cmp	r3, r2
 8008522:	d905      	bls.n	8008530 <f_read+0x148>
					cc = fs->csize - csect;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	895b      	ldrh	r3, [r3, #10]
 8008528:	461a      	mov	r2, r3
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	7858      	ldrb	r0, [r3, #1]
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800853a:	f7fe f855 	bl	80065e8 <disk_read>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <f_read+0x166>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	755a      	strb	r2, [r3, #21]
 800854a:	2301      	movs	r3, #1
 800854c:	e087      	b.n	800865e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	7d1b      	ldrb	r3, [r3, #20]
 8008552:	b25b      	sxtb	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	da14      	bge.n	8008582 <f_read+0x19a>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008562:	429a      	cmp	r2, r3
 8008564:	d90d      	bls.n	8008582 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1a      	ldr	r2, [r3, #32]
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	025b      	lsls	r3, r3, #9
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	18d0      	adds	r0, r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3330      	adds	r3, #48	; 0x30
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	4619      	mov	r1, r3
 800857e:	f7fe f913 	bl	80067a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	025b      	lsls	r3, r3, #9
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008588:	e050      	b.n	800862c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	429a      	cmp	r2, r3
 8008592:	d02e      	beq.n	80085f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	7d1b      	ldrb	r3, [r3, #20]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	da18      	bge.n	80085d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	7858      	ldrb	r0, [r3, #1]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	2301      	movs	r3, #1
 80085ae:	f7fe f83b 	bl	8006628 <disk_write>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <f_read+0x1da>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	755a      	strb	r2, [r3, #21]
 80085be:	2301      	movs	r3, #1
 80085c0:	e04d      	b.n	800865e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7d1b      	ldrb	r3, [r3, #20]
 80085c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	7858      	ldrb	r0, [r3, #1]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085da:	2301      	movs	r3, #1
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	f7fe f803 	bl	80065e8 <disk_read>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <f_read+0x20a>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	755a      	strb	r2, [r3, #21]
 80085ee:	2301      	movs	r3, #1
 80085f0:	e035      	b.n	800865e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008600:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d901      	bls.n	8008612 <f_read+0x22a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008620:	4413      	add	r3, r2
 8008622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008624:	4619      	mov	r1, r3
 8008626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008628:	f7fe f8be 	bl	80067a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800862c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	4413      	add	r3, r2
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	441a      	add	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	619a      	str	r2, [r3, #24]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008646:	441a      	add	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f47f af01 	bne.w	800845e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3738      	adds	r7, #56	; 0x38
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f107 0208 	add.w	r2, r7, #8
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fc7c 	bl	8007f74 <validate>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d168      	bne.n	8008758 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7d1b      	ldrb	r3, [r3, #20]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d062      	beq.n	8008758 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7d1b      	ldrb	r3, [r3, #20]
 8008696:	b25b      	sxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	da15      	bge.n	80086c8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	7858      	ldrb	r0, [r3, #1]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	2301      	movs	r3, #1
 80086ac:	f7fd ffbc 	bl	8006628 <disk_write>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <f_sync+0x54>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e04f      	b.n	800875a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7d1b      	ldrb	r3, [r3, #20]
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80086c8:	f7fd fd0c 	bl	80060e4 <get_fattime>
 80086cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7fe fa94 	bl	8006c04 <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d138      	bne.n	8008758 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	330b      	adds	r3, #11
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	330b      	adds	r3, #11
 80086f6:	f042 0220 	orr.w	r2, r2, #32
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	461a      	mov	r2, r3
 8008708:	68f9      	ldr	r1, [r7, #12]
 800870a:	f7fe ff9f 	bl	800764c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f103 021c 	add.w	r2, r3, #28
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe f818 	bl	8006750 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3316      	adds	r3, #22
 8008724:	6939      	ldr	r1, [r7, #16]
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe f812 	bl	8006750 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3312      	adds	r3, #18
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fff1 	bl	800671a <st_word>
					fs->wflag = 1;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2201      	movs	r2, #1
 800873c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fa8d 	bl	8006c60 <sync_fs>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7d1b      	ldrb	r3, [r3, #20]
 800874e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008752:	b2da      	uxtb	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff7b 	bl	8008666 <f_sync>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d118      	bne.n	80087ac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f107 0208 	add.w	r2, r7, #8
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fbf6 	bl	8007f74 <validate>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe f990 	bl	8006abc <dec_lock>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b088      	sub	sp, #32
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80087ca:	e01b      	b.n	8008804 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	f107 0114 	add.w	r1, r7, #20
 80087d4:	2201      	movs	r2, #1
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff fe06 	bl	80083e8 <f_read>
		if (rc != 1) break;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d116      	bne.n	8008810 <f_gets+0x5a>
		c = s[0];
 80087e2:	7d3b      	ldrb	r3, [r7, #20]
 80087e4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b0d      	cmp	r3, #13
 80087ea:	d100      	bne.n	80087ee <f_gets+0x38>
 80087ec:	e00a      	b.n	8008804 <f_gets+0x4e>
		*p++ = c;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	61ba      	str	r2, [r7, #24]
 80087f4:	7dfa      	ldrb	r2, [r7, #23]
 80087f6:	701a      	strb	r2, [r3, #0]
		n++;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	2b0a      	cmp	r3, #10
 8008802:	d007      	beq.n	8008814 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	429a      	cmp	r2, r3
 800880c:	dbde      	blt.n	80087cc <f_gets+0x16>
 800880e:	e002      	b.n	8008816 <f_gets+0x60>
		if (rc != 1) break;
 8008810:	bf00      	nop
 8008812:	e000      	b.n	8008816 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008814:	bf00      	nop
	}
	*p = 0;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <f_gets+0x70>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	e000      	b.n	8008828 <f_gets+0x72>
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800883e:	2301      	movs	r3, #1
 8008840:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008846:	4b1f      	ldr	r3, [pc, #124]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008848:	7a5b      	ldrb	r3, [r3, #9]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d131      	bne.n	80088b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008850:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008852:	7a5b      	ldrb	r3, [r3, #9]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 800885a:	2100      	movs	r1, #0
 800885c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800885e:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008860:	7a5b      	ldrb	r3, [r3, #9]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4a17      	ldr	r2, [pc, #92]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008870:	7a5b      	ldrb	r3, [r3, #9]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	461a      	mov	r2, r3
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008878:	4413      	add	r3, r2
 800887a:	79fa      	ldrb	r2, [r7, #7]
 800887c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 8008880:	7a5b      	ldrb	r3, [r3, #9]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	b2d1      	uxtb	r1, r2
 8008888:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <FATFS_LinkDriverEx+0x94>)
 800888a:	7251      	strb	r1, [r2, #9]
 800888c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800888e:	7dbb      	ldrb	r3, [r7, #22]
 8008890:	3330      	adds	r3, #48	; 0x30
 8008892:	b2da      	uxtb	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3301      	adds	r3, #1
 800889c:	223a      	movs	r2, #58	; 0x3a
 800889e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3302      	adds	r3, #2
 80088a4:	222f      	movs	r2, #47	; 0x2f
 80088a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	3303      	adds	r3, #3
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	200016e4 	.word	0x200016e4

080088c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088d2:	2200      	movs	r2, #0
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ffaa 	bl	8008830 <FATFS_LinkDriverEx>
 80088dc:	4603      	mov	r3, r0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <memset>:
 80088e6:	4402      	add	r2, r0
 80088e8:	4603      	mov	r3, r0
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d100      	bne.n	80088f0 <memset+0xa>
 80088ee:	4770      	bx	lr
 80088f0:	f803 1b01 	strb.w	r1, [r3], #1
 80088f4:	e7f9      	b.n	80088ea <memset+0x4>
	...

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x38>)
 80088fc:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 80088fe:	1b64      	subs	r4, r4, r5
 8008900:	10a4      	asrs	r4, r4, #2
 8008902:	2600      	movs	r6, #0
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	4d0b      	ldr	r5, [pc, #44]	; (8008938 <__libc_init_array+0x40>)
 800890a:	4c0c      	ldr	r4, [pc, #48]	; (800893c <__libc_init_array+0x44>)
 800890c:	f000 f818 	bl	8008940 <_init>
 8008910:	1b64      	subs	r4, r4, r5
 8008912:	10a4      	asrs	r4, r4, #2
 8008914:	2600      	movs	r6, #0
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	08008a60 	.word	0x08008a60
 8008934:	08008a60 	.word	0x08008a60
 8008938:	08008a60 	.word	0x08008a60
 800893c:	08008a64 	.word	0x08008a64

08008940 <_init>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr

0800894c <_fini>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr
