
SD_CARD_UART_TO_FPGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800bc08  0800bc08  0001bc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf48  0800bf48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf48  0800bf48  0001bf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf50  0800bf50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf50  0800bf50  0001bf50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf54  0800bf54  0001bf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bf58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000078  0800bfd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200009d4  0800bfd0  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018357  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b5  00000000  00000000  00038442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001018  00000000  00000000  0003cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a72f  00000000  00000000  0003dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4df  00000000  00000000  0006860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb294  00000000  00000000  00084aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006650  00000000  00000000  0017fd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001863d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbf0 	.word	0x0800bbf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800bbf0 	.word	0x0800bbf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b98e 	b.w	8000efc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f824 	bl	8000c34 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fd11 	bl	8000628 <__aeabi_dmul>
 8000c06:	f7ff ffbf 	bl	8000b88 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc92 	bl	8000534 <__aeabi_ui2d>
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <__aeabi_d2ulz+0x38>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f7ff fd08 	bl	8000628 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff fb4a 	bl	80002b8 <__aeabi_dsub>
 8000c24:	f7ff ffb0 	bl	8000b88 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9e08      	ldr	r6, [sp, #32]
 8000c3a:	460d      	mov	r5, r1
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460f      	mov	r7, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14a      	bne.n	8000cda <__udivmoddi4+0xa6>
 8000c44:	428a      	cmp	r2, r1
 8000c46:	4694      	mov	ip, r2
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0xe2>
 8000c4a:	fab2 f382 	clz	r3, r2
 8000c4e:	b143      	cbz	r3, 8000c62 <__udivmoddi4+0x2e>
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	409c      	lsls	r4, r3
 8000c62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c66:	fa1f f58c 	uxth.w	r5, ip
 8000c6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c6e:	0c22      	lsrs	r2, r4, #16
 8000c70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c78:	fb01 f005 	mul.w	r0, r1, r5
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c80:	eb1c 0202 	adds.w	r2, ip, r2
 8000c84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c88:	f080 811c 	bcs.w	8000ec4 <__udivmoddi4+0x290>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f240 8119 	bls.w	8000ec4 <__udivmoddi4+0x290>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4462      	add	r2, ip
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca6:	fb00 f505 	mul.w	r5, r0, r5
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x90>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x294>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x294>
 8000cc0:	4464      	add	r4, ip
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc8:	1b64      	subs	r4, r4, r5
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b11e      	cbz	r6, 8000cd6 <__udivmoddi4+0xa2>
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0xbc>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f000 80ed 	beq.w	8000ebe <__udivmoddi4+0x28a>
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cea:	4608      	mov	r0, r1
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	fab3 f183 	clz	r1, r3
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d149      	bne.n	8000d8c <__udivmoddi4+0x158>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	d302      	bcc.n	8000d02 <__udivmoddi4+0xce>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	f200 80f8 	bhi.w	8000ef2 <__udivmoddi4+0x2be>
 8000d02:	1a84      	subs	r4, r0, r2
 8000d04:	eb65 0203 	sbc.w	r2, r5, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d0e2      	beq.n	8000cd6 <__udivmoddi4+0xa2>
 8000d10:	e9c6 4700 	strd	r4, r7, [r6]
 8000d14:	e7df      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000d16:	b902      	cbnz	r2, 8000d1a <__udivmoddi4+0xe6>
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	fab2 f382 	clz	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x210>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d34:	fb07 2015 	mls	r0, r7, r5, r2
 8000d38:	0c22      	lsrs	r2, r4, #16
 8000d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d3e:	fb0e f005 	mul.w	r0, lr, r5
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d46:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x122>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2b8>
 8000d56:	4645      	mov	r5, r8
 8000d58:	1a12      	subs	r2, r2, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x14e>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x14c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2c2>
 8000d80:	4610      	mov	r0, r2
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8a:	e79f      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d8c:	f1c1 0720 	rsb	r7, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	40fd      	lsrs	r5, r7
 8000da4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da8:	4323      	orrs	r3, r4
 8000daa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	fb09 5518 	mls	r5, r9, r8, r5
 8000db6:	0c1c      	lsrs	r4, r3, #16
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc0:	42a5      	cmp	r5, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b0>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dd8:	42a5      	cmp	r5, r4
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2b4>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	1b64      	subs	r4, r4, r5
 8000de6:	b29d      	uxth	r5, r3
 8000de8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dec:	fb09 4413 	mls	r4, r9, r3, r4
 8000df0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1da>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2ac>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	4464      	add	r4, ip
 8000e0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e12:	fba3 9502 	umull	r9, r5, r3, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46ae      	mov	lr, r5
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x29c>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x298>
 8000e24:	b156      	cbz	r6, 8000e3c <__udivmoddi4+0x208>
 8000e26:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e32:	40ca      	lsrs	r2, r1
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	4317      	orrs	r7, r2
 8000e38:	e9c6 7400 	strd	r7, r4, [r6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	f1c3 0120 	rsb	r1, r3, #32
 8000e48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e50:	fa25 f101 	lsr.w	r1, r5, r1
 8000e54:	409d      	lsls	r5, r3
 8000e56:	432a      	orrs	r2, r5
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e64:	fb07 1510 	mls	r5, r7, r0, r1
 8000e68:	0c11      	lsrs	r1, r2, #16
 8000e6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e72:	428d      	cmp	r5, r1
 8000e74:	fa04 f403 	lsl.w	r4, r4, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x258>
 8000e7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e84:	428d      	cmp	r5, r1
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b0>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1b49      	subs	r1, r1, r5
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e94:	fb07 1115 	mls	r1, r7, r5, r1
 8000e98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea0:	4291      	cmp	r1, r2
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x282>
 8000ea4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2a8>
 8000eae:	4291      	cmp	r1, r2
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2a8>
 8000eb2:	3d02      	subs	r5, #2
 8000eb4:	4462      	add	r2, ip
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0xfc>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xa2>
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	e6e6      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x90>
 8000ecc:	4548      	cmp	r0, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f0>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f0>
 8000edc:	4645      	mov	r5, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x282>
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1da>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x258>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b0>
 8000eec:	3d02      	subs	r5, #2
 8000eee:	4462      	add	r2, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x124>
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	e70a      	b.n	8000d0c <__udivmoddi4+0xd8>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x14e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <write_DDS_register>:
#include <math.h>

const double tune_dict_freq[3] = {50e6, 400e6, 1000e6};
const uint8_t  tune_dict_samp[3] = {20, 12, 6};

HAL_StatusTypeDef write_DDS_register(uint8_t opcode, UART_HandleTypeDef *huart, uint64_t data){
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b08b      	sub	sp, #44	; 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	e9c7 2300 	strd	r2, r3, [r7]
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]

	uint8_t data_buffer[17]; // the full data buffer to be sent
	uint8_t temp_data; // cannot send 48 bit. This will hold the splitted 8 bit value
	HAL_StatusTypeDef transmit_status;

	data_buffer[16] = opcode; // send the opcode first
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f887 3020 	strb.w	r3, [r7, #32]

	for (size_t i = 0; i < 6; ++i){
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	e01f      	b.n	8000f5c <write_DDS_register+0x5c>
		temp_data = (uint8_t)(data >> (i * 8)); // get the 8 LSb s
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	00d9      	lsls	r1, r3, #3
 8000f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f24:	f1c1 0620 	rsb	r6, r1, #32
 8000f28:	f1a1 0020 	sub.w	r0, r1, #32
 8000f2c:	fa22 f401 	lsr.w	r4, r2, r1
 8000f30:	fa03 f606 	lsl.w	r6, r3, r6
 8000f34:	4334      	orrs	r4, r6
 8000f36:	fa23 f000 	lsr.w	r0, r3, r0
 8000f3a:	4304      	orrs	r4, r0
 8000f3c:	fa23 f501 	lsr.w	r5, r3, r1
 8000f40:	4623      	mov	r3, r4
 8000f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		data_buffer[10 + i] = temp_data; // adding the data to the array
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	330a      	adds	r3, #10
 8000f4a:	3328      	adds	r3, #40	; 0x28
 8000f4c:	443b      	add	r3, r7
 8000f4e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000f52:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (size_t i = 0; i < 6; ++i){
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d9dc      	bls.n	8000f1c <write_DDS_register+0x1c>
	} // end of the for loop

	// transmit the signal
	transmit_status = HAL_UART_Transmit(huart, data_buffer, sizeof(data_buffer),150);
 8000f62:	f107 0110 	add.w	r1, r7, #16
 8000f66:	2396      	movs	r3, #150	; 0x96
 8000f68:	2211      	movs	r2, #17
 8000f6a:	68b8      	ldr	r0, [r7, #8]
 8000f6c:	f005 f80e 	bl	8005f8c <HAL_UART_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	return transmit_status;
 8000f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
} // end of the write DDS register
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	372c      	adds	r7, #44	; 0x2c
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f84 <min_freq>:

double min_freq(double f_sample){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	ed87 0b00 	vstr	d0, [r7]
    // this function will return the minimum frequency can be achived with this samples
    return f_sample / N_SAMPLES;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <min_freq+0x30>)
 8000f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f98:	f7ff fc70 	bl	800087c <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	ec43 2b17 	vmov	d7, r2, r3
} // end of the minimum frequency calculation
 8000fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa8:	eef0 0a67 	vmov.f32	s1, s15
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	42f00000 	.word	0x42f00000

08000fb8 <f_to_n>:

Result f_to_n(double f_out, double f_sample, uint8_t mem_type){
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b09a      	sub	sp, #104	; 0x68
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6178      	str	r0, [r7, #20]
 8000fc0:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fc4:	ed87 1b00 	vstr	d1, [r7]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	74fb      	strb	r3, [r7, #19]
    double n = (f_out/f_sample) * N_SAMPLES;
 8000fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd4:	f7ff fc52 	bl	800087c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b7c      	ldr	r3, [pc, #496]	; (80011d8 <f_to_n+0x220>)
 8000fe6:	f7ff fb1f 	bl	8000628 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    double samples = N_SAMPLES / n;
 8000ff2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4977      	ldr	r1, [pc, #476]	; (80011d8 <f_to_n+0x220>)
 8000ffc:	f7ff fc3e 	bl	800087c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    double tune_float = n * tune_dict_freq[mem_type] / f_RUN;
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	4a74      	ldr	r2, [pc, #464]	; (80011dc <f_to_n+0x224>)
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001014:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001018:	f7ff fb06 	bl	8000628 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	a368      	add	r3, pc, #416	; (adr r3, 80011c8 <f_to_n+0x210>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fc27 	bl	800087c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    Result res;
    res.tune_word = (uint64_t)round(tune_float);
 8001036:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800103a:	f009 fed5 	bl	800ade8 <round>
 800103e:	ec53 2b10 	vmov	r2, r3, d0
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fdd7 	bl	8000bf8 <__aeabi_d2ulz>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2306 	strd	r2, r3, [r7, #24]
//    res.offset_0 = (uint64_t)round(tune_float/4);
    res.offset_1 = (uint64_t)round(tune_float/2);
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800105e:	f7ff fc0d 	bl	800087c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	ec43 2b17 	vmov	d7, r2, r3
 800106a:	eeb0 0a47 	vmov.f32	s0, s14
 800106e:	eef0 0a67 	vmov.f32	s1, s15
 8001072:	f009 feb9 	bl	800ade8 <round>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fdbb 	bl	8000bf8 <__aeabi_d2ulz>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    res.offset_2 = (uint64_t)round(2*tune_float/4);
 800108a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	f7ff f913 	bl	80002bc <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <f_to_n+0x228>)
 80010a4:	f7ff fbea 	bl	800087c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ec43 2b17 	vmov	d7, r2, r3
 80010b0:	eeb0 0a47 	vmov.f32	s0, s14
 80010b4:	eef0 0a67 	vmov.f32	s1, s15
 80010b8:	f009 fe96 	bl	800ade8 <round>
 80010bc:	ec53 2b10 	vmov	r2, r3, d0
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd98 	bl	8000bf8 <__aeabi_d2ulz>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    res.offset_3 = (uint64_t)round(3*tune_float/4);
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <f_to_n+0x22c>)
 80010d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80010da:	f7ff faa5 	bl	8000628 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <f_to_n+0x228>)
 80010ec:	f7ff fbc6 	bl	800087c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	f009 fe72 	bl	800ade8 <round>
 8001104:	ec53 2b10 	vmov	r2, r3, d0
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd74 	bl	8000bf8 <__aeabi_d2ulz>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    res.samples = (uint32_t)round(fmin(samples, pow(2,tune_dict_samp[mem_type])));
 8001118:	7cfb      	ldrb	r3, [r7, #19]
 800111a:	4a33      	ldr	r2, [pc, #204]	; (80011e8 <f_to_n+0x230>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa08 	bl	8000534 <__aeabi_ui2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	ec43 2b11 	vmov	d1, r2, r3
 800112c:	ed9f 0b28 	vldr	d0, [pc, #160]	; 80011d0 <f_to_n+0x218>
 8001130:	f009 fd8e 	bl	800ac50 <pow>
 8001134:	eeb0 7a40 	vmov.f32	s14, s0
 8001138:	eef0 7a60 	vmov.f32	s15, s1
 800113c:	eeb0 1a47 	vmov.f32	s2, s14
 8001140:	eef0 1a67 	vmov.f32	s3, s15
 8001144:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001148:	f009 fdfd 	bl	800ad46 <fmin>
 800114c:	eeb0 7a40 	vmov.f32	s14, s0
 8001150:	eef0 7a60 	vmov.f32	s15, s1
 8001154:	eeb0 0a47 	vmov.f32	s0, s14
 8001158:	eef0 0a67 	vmov.f32	s1, s15
 800115c:	f009 fe44 	bl	800ade8 <round>
 8001160:	ec53 2b10 	vmov	r2, r3, d0
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd0e 	bl	8000b88 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
    res.freq_act = res.tune_word * f_RUN / N_SAMPLES;
 8001170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fa20 	bl	80005bc <__aeabi_ul2d>
 800117c:	a312      	add	r3, pc, #72	; (adr r3, 80011c8 <f_to_n+0x210>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa51 	bl	8000628 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <f_to_n+0x220>)
 8001194:	f7ff fb72 	bl	800087c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    return res; // returning the result
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	461d      	mov	r5, r3
 80011a4:	f107 0418 	add.w	r4, r7, #24
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011b8:	e885 0003 	stmia.w	r5, {r0, r1}
} // end of freq to n
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	3768      	adds	r7, #104	; 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	20000000 	.word	0x20000000
 80011cc:	41a2a05f 	.word	0x41a2a05f
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40000000 	.word	0x40000000
 80011d8:	42f00000 	.word	0x42f00000
 80011dc:	0800bc60 	.word	0x0800bc60
 80011e0:	40100000 	.word	0x40100000
 80011e4:	40080000 	.word	0x40080000
 80011e8:	0800bc78 	.word	0x0800bc78

080011ec <generate_configuration>:

Result generate_configuration(double f_out){
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b0c2      	sub	sp, #264	; 0x108
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	ed03 0b02 	vstr	d0, [r3, #-8]
    Result results[3]; // the results will be stored here
    Result result;
    uint32_t max_samples = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    uint8_t max_sample_index = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
    double min_fr_comp;
    double max_fr_comp;

    for(uint8_t mem_type = 0; mem_type < 3; mem_type ++){
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 800120e:	e07b      	b.n	8001308 <generate_configuration+0x11c>

        min_fr_comp = min_freq(tune_dict_freq[mem_type]);
 8001210:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <generate_configuration+0x160>)
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	ed93 7b00 	vldr	d7, [r3]
 800121e:	eeb0 0a47 	vmov.f32	s0, s14
 8001222:	eef0 0a67 	vmov.f32	s1, s15
 8001226:	f7ff fead 	bl	8000f84 <min_freq>
 800122a:	ed87 0b3e 	vstr	d0, [r7, #248]	; 0xf8
        max_fr_comp = (2 * tune_dict_freq[mem_type]);
 800122e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001232:	4a46      	ldr	r2, [pc, #280]	; (800134c <generate_configuration+0x160>)
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	f7ff f83c 	bl	80002bc <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

        if (min_fr_comp < f_out && f_out < max_fr_comp){
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001254:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001258:	f7ff fc58 	bl	8000b0c <__aeabi_dcmplt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d04d      	beq.n	80012fe <generate_configuration+0x112>
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800126c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8001270:	f7ff fc4c 	bl	8000b0c <__aeabi_dcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d041      	beq.n	80012fe <generate_configuration+0x112>
            result = f_to_n(f_out, tune_dict_freq[mem_type], mem_type);
 800127a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800127e:	4a33      	ldr	r2, [pc, #204]	; (800134c <generate_configuration+0x160>)
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	ed93 7b00 	vldr	d7, [r3]
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	eeb0 1a47 	vmov.f32	s2, s14
 800129c:	eef0 1a67 	vmov.f32	s3, s15
 80012a0:	ed10 0b02 	vldr	d0, [r0, #-8]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe87 	bl	8000fb8 <f_to_n>

            if (result.samples > 2){
 80012aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d926      	bls.n	80012fe <generate_configuration+0x112>
                // now this is a valid result
                result.mem = mem_type;
 80012b0:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80012b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                results[mem_type] = result; // adding the result to the array
 80012b8:	f897 2102 	ldrb.w	r2, [r7, #258]	; 0x102
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012c8:	443b      	add	r3, r7
 80012ca:	3bc0      	subs	r3, #192	; 0xc0
 80012cc:	461d      	mov	r5, r3
 80012ce:	f107 0410 	add.w	r4, r7, #16
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e2:	e885 0003 	stmia.w	r5, {r0, r1}

                if(result.samples > max_samples){
 80012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d206      	bcs.n	80012fe <generate_configuration+0x112>
                    max_samples = result.samples;
 80012f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                    max_sample_index = mem_type;
 80012f6:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80012fa:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
    for(uint8_t mem_type = 0; mem_type < 3; mem_type ++){
 80012fe:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8001302:	3301      	adds	r3, #1
 8001304:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8001308:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800130c:	2b02      	cmp	r3, #2
 800130e:	f67f af7f 	bls.w	8001210 <generate_configuration+0x24>
            } // end of if
        } // end of if statement

    } // end of the for loop

    return results[max_sample_index]; // returning the result
 8001312:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001324:	443b      	add	r3, r7
 8001326:	3bc0      	subs	r3, #192	; 0xc0
 8001328:	460c      	mov	r4, r1
 800132a:	461d      	mov	r5, r3
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	e895 0003 	ldmia.w	r5, {r0, r1}
 800133c:	e884 0003 	stmia.w	r4, {r0, r1}

} // end of generate configuration
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	0800bc60 	.word	0x0800bc60

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b092      	sub	sp, #72	; 0x48
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f001 fa48 	bl	80027ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f8f5 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 fa01 	bl	8001764 <MX_GPIO_Init>
  MX_DMA_Init();
 8001362:	f000 f9d9 	bl	8001718 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001366:	f000 f957 	bl	8001618 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800136a:	f005 ffc9 	bl	8007300 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 800136e:	f000 f9a3 	bl	80016b8 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001372:	f000 f971 	bl	8001658 <MX_USART1_UART_Init>
//  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	4965      	ldr	r1, [pc, #404]	; (8001510 <main+0x1c0>)
 800137a:	4866      	ldr	r0, [pc, #408]	; (8001514 <main+0x1c4>)
 800137c:	f007 ff50 	bl	8009220 <f_mount>



    n = (f_open(&SDFile,"arb1_512.txt",FA_READ) !=FR_OK);
 8001380:	2201      	movs	r2, #1
 8001382:	4965      	ldr	r1, [pc, #404]	; (8001518 <main+0x1c8>)
 8001384:	4865      	ldr	r0, [pc, #404]	; (800151c <main+0x1cc>)
 8001386:	f007 ff91 	bl	80092ac <f_open>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <main+0x1d0>)
 800139a:	701a      	strb	r2, [r3, #0]
    if (n != FR_OK){
 800139c:	4b60      	ldr	r3, [pc, #384]	; (8001520 <main+0x1d0>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <main+0x58>
   	 Error_Handler();
 80013a4:	f000 fe46 	bl	8002034 <Error_Handler>
//    HAL_Delay(50);
//    HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_6,GPIO_PIN_SET);


    //Resetting
    HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_6,GPIO_PIN_RESET); // master reset pin
 80013a8:	2200      	movs	r2, #0
 80013aa:	2140      	movs	r1, #64	; 0x40
 80013ac:	485d      	ldr	r0, [pc, #372]	; (8001524 <main+0x1d4>)
 80013ae:	f002 f8b9 	bl	8003524 <HAL_GPIO_WritePin>

    HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	; 0x32
 80013b4:	f001 fa46 	bl	8002844 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_6,GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4859      	ldr	r0, [pc, #356]	; (8001524 <main+0x1d4>)
 80013be:	f002 f8b1 	bl	8003524 <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET); // reseeting the phase accumulatore
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	4858      	ldr	r0, [pc, #352]	; (8001528 <main+0x1d8>)
 80013c8:	f002 f8ac 	bl	8003524 <HAL_GPIO_WritePin>



    HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_3,GPIO_PIN_RESET);//read
 80013cc:	2200      	movs	r2, #0
 80013ce:	2108      	movs	r1, #8
 80013d0:	4856      	ldr	r0, [pc, #344]	; (800152c <main+0x1dc>)
 80013d2:	f002 f8a7 	bl	8003524 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_2,GPIO_PIN_SET);//write
 80013d6:	2201      	movs	r2, #1
 80013d8:	2104      	movs	r1, #4
 80013da:	4854      	ldr	r0, [pc, #336]	; (800152c <main+0x1dc>)
 80013dc:	f002 f8a2 	bl	8003524 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB ,GPIO_PIN_14,GPIO_PIN_RESET); // load done pin (first reset)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	4852      	ldr	r0, [pc, #328]	; (8001530 <main+0x1e0>)
 80013e8:	f002 f89c 	bl	8003524 <HAL_GPIO_WritePin>
 /* USER CODE END 2 */

 /* Infinite loop */
 /* USER CODE BEGIN WHILE */

 while (f_gets(get_text,sizeof (get_text),&SDFile))
 80013ec:	e046      	b.n	800147c <main+0x12c>
 	{
	 char delim[] = " ";
 80013ee:	2320      	movs	r3, #32
 80013f0:	80bb      	strh	r3, [r7, #4]

	      // Tokenize the string
	 char *token = strtok(get_text, delim);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	484f      	ldr	r0, [pc, #316]	; (8001534 <main+0x1e4>)
 80013f8:	f008 fd34 	bl	8009e64 <strtok>
 80013fc:	6478      	str	r0, [r7, #68]	; 0x44
	     // Assuming there are 11 numbers in the string

	 int k = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
	 while (token != NULL && k < 17) {
 8001402:	e011      	b.n	8001428 <main+0xd8>
	          // Convert token to uint8_t
		 uint8Array[k] = (uint8_t)atoi(token);
 8001404:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001406:	f008 fb8e 	bl	8009b26 <atoi>
 800140a:	4603      	mov	r3, r0
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <main+0x1e8>)
 8001410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001412:	4413      	add	r3, r2
 8001414:	460a      	mov	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]

	          // Move to the next token
	     token = strtok(NULL, " ");
 8001418:	4948      	ldr	r1, [pc, #288]	; (800153c <main+0x1ec>)
 800141a:	2000      	movs	r0, #0
 800141c:	f008 fd22 	bl	8009e64 <strtok>
 8001420:	6478      	str	r0, [r7, #68]	; 0x44
	     k++;
 8001422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001424:	3301      	adds	r3, #1
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
	 while (token != NULL && k < 17) {
 8001428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <main+0xe4>
 800142e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001430:	2b10      	cmp	r3, #16
 8001432:	dde7      	ble.n	8001404 <main+0xb4>
	    }
	 uint8Array[16]=0x05;
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <main+0x1e8>)
 8001436:	2205      	movs	r2, #5
 8001438:	741a      	strb	r2, [r3, #16]

	 HAL_UART_Transmit(&huart6,uint8Array,sizeof(uint8Array),150);
 800143a:	2396      	movs	r3, #150	; 0x96
 800143c:	2211      	movs	r2, #17
 800143e:	493e      	ldr	r1, [pc, #248]	; (8001538 <main+0x1e8>)
 8001440:	483f      	ldr	r0, [pc, #252]	; (8001540 <main+0x1f0>)
 8001442:	f004 fda3 	bl	8005f8c <HAL_UART_Transmit>
	 i++;
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <main+0x1f4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <main+0x1f4>)
 800144e:	6013      	str	r3, [r2, #0]
	 if (i==511){
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <main+0x1f4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001458:	4293      	cmp	r3, r2
 800145a:	d10f      	bne.n	800147c <main+0x12c>
		 HAL_GPIO_WritePin(GPIOB ,GPIO_PIN_14,GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001462:	4833      	ldr	r0, [pc, #204]	; (8001530 <main+0x1e0>)
 8001464:	f002 f85e 	bl	8003524 <HAL_GPIO_WritePin>
	     HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_3,GPIO_PIN_SET);//read
 8001468:	2201      	movs	r2, #1
 800146a:	2108      	movs	r1, #8
 800146c:	482f      	ldr	r0, [pc, #188]	; (800152c <main+0x1dc>)
 800146e:	f002 f859 	bl	8003524 <HAL_GPIO_WritePin>
	     HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_2,GPIO_PIN_RESET);//write low
 8001472:	2200      	movs	r2, #0
 8001474:	2104      	movs	r1, #4
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <main+0x1dc>)
 8001478:	f002 f854 	bl	8003524 <HAL_GPIO_WritePin>
 while (f_gets(get_text,sizeof (get_text),&SDFile))
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <main+0x1cc>)
 800147e:	218c      	movs	r1, #140	; 0x8c
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <main+0x1e4>)
 8001482:	f008 fab8 	bl	80099f6 <f_gets>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1b0      	bne.n	80013ee <main+0x9e>

//	 HAL_UART_Transmit(&huart1,ftext[i],sizeof(ftext[i]),1000);


 	}
    f_close(&SDFile);
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <main+0x1cc>)
 800148e:	f008 fa88 	bl	80099a2 <f_close>


    HAL_GPIO_WritePin(GPIOB ,GPIO_PIN_14,GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <main+0x1e0>)
 800149a:	f002 f843 	bl	8003524 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_3,GPIO_PIN_SET);//read
 800149e:	2201      	movs	r2, #1
 80014a0:	2108      	movs	r1, #8
 80014a2:	4822      	ldr	r0, [pc, #136]	; (800152c <main+0x1dc>)
 80014a4:	f002 f83e 	bl	8003524 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI ,GPIO_PIN_2,GPIO_PIN_RESET);//write low
 80014a8:	2200      	movs	r2, #0
 80014aa:	2104      	movs	r1, #4
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <main+0x1dc>)
 80014ae:	f002 f839 	bl	8003524 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);// stop resetting the phase accumulator
 80014b2:	2201      	movs	r2, #1
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <main+0x1d8>)
 80014b8:	f002 f834 	bl	8003524 <HAL_GPIO_WritePin>


    ////// Set the DDS register control here
    Result configuration = generate_configuration(125e6); // generate configuration for 1Mhz
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001508 <main+0x1b8>
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe91 	bl	80011ec <generate_configuration>
    write_DDS_register(OPCODE_WRITE_CARRIER_REG, &huart6, configuration.tune_word);
 80014ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ce:	491c      	ldr	r1, [pc, #112]	; (8001540 <main+0x1f0>)
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff fd15 	bl	8000f00 <write_DDS_register>
    write_DDS_register(OPCODE_WRITE_OFFSET_REG1, &huart6, configuration.offset_1);
 80014d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014da:	4919      	ldr	r1, [pc, #100]	; (8001540 <main+0x1f0>)
 80014dc:	2011      	movs	r0, #17
 80014de:	f7ff fd0f 	bl	8000f00 <write_DDS_register>
    write_DDS_register(OPCODE_WRITE_OFFSET_REG2, &huart6, configuration.offset_2);
 80014e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014e6:	4916      	ldr	r1, [pc, #88]	; (8001540 <main+0x1f0>)
 80014e8:	2012      	movs	r0, #18
 80014ea:	f7ff fd09 	bl	8000f00 <write_DDS_register>
    write_DDS_register(OPCODE_WRITE_OFFSET_REG3, &huart6, configuration.offset_3);
 80014ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014f2:	4913      	ldr	r1, [pc, #76]	; (8001540 <main+0x1f0>)
 80014f4:	2013      	movs	r0, #19
 80014f6:	f7ff fd03 	bl	8000f00 <write_DDS_register>
 80014fa:	2300      	movs	r3, #0
//    HAL_GPIO_WritePin(GPIOG ,GPIO_PIN_6,GPIO_PIN_SET);
//    HAL_UART_Transmit(&huart1,ytext,sizeof(ytext),150);


  /* USER CODE END 3 */
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3748      	adds	r7, #72	; 0x48
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	00000000 	.word	0x00000000
 800150c:	419dcd65 	.word	0x419dcd65
 8001510:	200003e8 	.word	0x200003e8
 8001514:	200003ec 	.word	0x200003ec
 8001518:	0800bc08 	.word	0x0800bc08
 800151c:	2000061c 	.word	0x2000061c
 8001520:	200002e8 	.word	0x200002e8
 8001524:	40021800 	.word	0x40021800
 8001528:	40021c00 	.word	0x40021c00
 800152c:	40022000 	.word	0x40022000
 8001530:	40020400 	.word	0x40020400
 8001534:	200002ec 	.word	0x200002ec
 8001538:	2000037c 	.word	0x2000037c
 800153c:	0800bc18 	.word	0x0800bc18
 8001540:	20000260 	.word	0x20000260
 8001544:	20000378 	.word	0x20000378

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f008 fc7b 	bl	8009e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xc8>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <SystemClock_Config+0xc8>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <SystemClock_Config+0xc8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <SystemClock_Config+0xcc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <SystemClock_Config+0xcc>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <SystemClock_Config+0xcc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ac:	2302      	movs	r3, #2
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015b8:	2332      	movs	r3, #50	; 0x32
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 ffdd 	bl	8003588 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015d4:	f000 fd2e 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2101      	movs	r1, #1
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fa6a 	bl	8003ad0 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001602:	f000 fd17 	bl	8002034 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800161e:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <MX_SDMMC1_SD_Init+0x3c>)
 8001620:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000094 	.word	0x20000094
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART1_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART1_UART_Init+0x58>)
 800169c:	f004 fc28 	bl	8005ef0 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f000 fcc5 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001d8 	.word	0x200001d8
 80016b4:	40011000 	.word	0x40011000

080016b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <MX_USART6_UART_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART6_UART_Init+0x58>)
 80016fc:	f004 fbf8 	bl	8005ef0 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001706:	f000 fc95 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000260 	.word	0x20000260
 8001714:	40011400 	.word	0x40011400

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_DMA_Init+0x48>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <MX_DMA_Init+0x48>)
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <MX_DMA_Init+0x48>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	203b      	movs	r0, #59	; 0x3b
 800173c:	f001 f95e 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001740:	203b      	movs	r0, #59	; 0x3b
 8001742:	f001 f977 	bl	8002a34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2045      	movs	r0, #69	; 0x45
 800174c:	f001 f956 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001750:	2045      	movs	r0, #69	; 0x45
 8001752:	f001 f96f 	bl	8002a34 <HAL_NVIC_EnableIRQ>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b090      	sub	sp, #64	; 0x40
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800177a:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4aae      	ldr	r2, [pc, #696]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4bac      	ldr	r3, [pc, #688]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001792:	4ba9      	ldr	r3, [pc, #676]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4aa8      	ldr	r2, [pc, #672]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4ba6      	ldr	r3, [pc, #664]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4ba3      	ldr	r3, [pc, #652]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4aa2      	ldr	r2, [pc, #648]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4ba0      	ldr	r3, [pc, #640]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b9d      	ldr	r3, [pc, #628]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a9c      	ldr	r2, [pc, #624]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b9a      	ldr	r3, [pc, #616]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4b97      	ldr	r3, [pc, #604]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a96      	ldr	r2, [pc, #600]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b8e      	ldr	r3, [pc, #568]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8a      	ldr	r2, [pc, #552]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a84      	ldr	r2, [pc, #528]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800183a:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a7e      	ldr	r2, [pc, #504]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a78      	ldr	r2, [pc, #480]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <MX_GPIO_Init+0x2d4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D9_Pin|D5_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001888:	486c      	ldr	r0, [pc, #432]	; (8001a3c <MX_GPIO_Init+0x2d8>)
 800188a:	f001 fe4b 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2120      	movs	r1, #32
 8001892:	486b      	ldr	r0, [pc, #428]	; (8001a40 <MX_GPIO_Init+0x2dc>)
 8001894:	f001 fe46 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, D7_Pin|D8_Pin|LCD_DISP_Pin|D10_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f241 010d 	movw	r1, #4109	; 0x100d
 800189e:	4869      	ldr	r0, [pc, #420]	; (8001a44 <MX_GPIO_Init+0x2e0>)
 80018a0:	f001 fe40 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2108      	movs	r1, #8
 80018a8:	4867      	ldr	r0, [pc, #412]	; (8001a48 <MX_GPIO_Init+0x2e4>)
 80018aa:	f001 fe3b 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|D6_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80018b4:	4865      	ldr	r0, [pc, #404]	; (8001a4c <MX_GPIO_Init+0x2e8>)
 80018b6:	f001 fe35 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D2_Pin|EXT_RST_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	214c      	movs	r1, #76	; 0x4c
 80018be:	4864      	ldr	r0, [pc, #400]	; (8001a50 <MX_GPIO_Init+0x2ec>)
 80018c0:	f001 fe30 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ca:	4862      	ldr	r0, [pc, #392]	; (8001a54 <MX_GPIO_Init+0x2f0>)
 80018cc:	f001 fe2a 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80018d0:	2310      	movs	r3, #16
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018e0:	230e      	movs	r3, #14
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	485b      	ldr	r0, [pc, #364]	; (8001a58 <MX_GPIO_Init+0x2f4>)
 80018ec:	f001 fc56 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018f0:	2308      	movs	r3, #8
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	4855      	ldr	r0, [pc, #340]	; (8001a58 <MX_GPIO_Init+0x2f4>)
 8001904:	f001 fc4a 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001908:	2304      	movs	r3, #4
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001918:	2309      	movs	r3, #9
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	484d      	ldr	r0, [pc, #308]	; (8001a58 <MX_GPIO_Init+0x2f4>)
 8001924:	f001 fc3a 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001928:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800193a:	230b      	movs	r3, #11
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	4842      	ldr	r0, [pc, #264]	; (8001a50 <MX_GPIO_Init+0x2ec>)
 8001946:	f001 fc29 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800194a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195c:	230c      	movs	r3, #12
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	483c      	ldr	r0, [pc, #240]	; (8001a58 <MX_GPIO_Init+0x2f4>)
 8001968:	f001 fc18 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800196c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001972:	2312      	movs	r3, #18
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197e:	2304      	movs	r3, #4
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	4832      	ldr	r0, [pc, #200]	; (8001a54 <MX_GPIO_Init+0x2f0>)
 800198a:	f001 fc07 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800198e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019a0:	230a      	movs	r3, #10
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	482a      	ldr	r0, [pc, #168]	; (8001a54 <MX_GPIO_Init+0x2f0>)
 80019ac:	f001 fbf6 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80019b0:	2310      	movs	r3, #16
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c0:	2302      	movs	r3, #2
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	4822      	ldr	r0, [pc, #136]	; (8001a54 <MX_GPIO_Init+0x2f0>)
 80019cc:	f001 fbe6 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80019e0:	2308      	movs	r3, #8
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <MX_GPIO_Init+0x2dc>)
 80019ec:	f001 fbd6 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : D9_Pin D5_Pin */
  GPIO_InitStruct.Pin = D9_Pin|D5_Pin;
 80019f0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_GPIO_Init+0x2d8>)
 8001a0a:	f001 fbc7 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001a0e:	2360      	movs	r3, #96	; 0x60
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a1e:	230d      	movs	r3, #13
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <MX_GPIO_Init+0x2f4>)
 8001a2a:	f001 fbb7 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a2e:	2340      	movs	r3, #64	; 0x40
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	e012      	b.n	8001a5c <MX_GPIO_Init+0x2f8>
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022800 	.word	0x40022800
 8001a4c:	40021c00 	.word	0x40021c00
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a66:	230a      	movs	r3, #10
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	48bd      	ldr	r0, [pc, #756]	; (8001d68 <MX_GPIO_Init+0x604>)
 8001a72:	f001 fb93 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001a76:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	48b6      	ldr	r0, [pc, #728]	; (8001d6c <MX_GPIO_Init+0x608>)
 8001a94:	f001 fb82 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001a98:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aaa:	230e      	movs	r3, #14
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	48ae      	ldr	r0, [pc, #696]	; (8001d70 <MX_GPIO_Init+0x60c>)
 8001ab6:	f001 fb71 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	48a8      	ldr	r0, [pc, #672]	; (8001d70 <MX_GPIO_Init+0x60c>)
 8001ad0:	f001 fb64 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001ad4:	2340      	movs	r3, #64	; 0x40
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ad8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	48a2      	ldr	r0, [pc, #648]	; (8001d74 <MX_GPIO_Init+0x610>)
 8001aea:	f001 fb57 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001aee:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b00:	230c      	movs	r3, #12
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	489a      	ldr	r0, [pc, #616]	; (8001d74 <MX_GPIO_Init+0x610>)
 8001b0c:	f001 fb46 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001b10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b22:	230a      	movs	r3, #10
 8001b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4892      	ldr	r0, [pc, #584]	; (8001d78 <MX_GPIO_Init+0x614>)
 8001b2e:	f001 fb35 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001b32:	23f0      	movs	r3, #240	; 0xf0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b42:	230a      	movs	r3, #10
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	488b      	ldr	r0, [pc, #556]	; (8001d7c <MX_GPIO_Init+0x618>)
 8001b4e:	f001 fb25 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b52:	23f7      	movs	r3, #247	; 0xf7
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b62:	230e      	movs	r3, #14
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4884      	ldr	r0, [pc, #528]	; (8001d80 <MX_GPIO_Init+0x61c>)
 8001b6e:	f001 fb15 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b84:	2309      	movs	r3, #9
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4877      	ldr	r0, [pc, #476]	; (8001d6c <MX_GPIO_Init+0x608>)
 8001b90:	f001 fb04 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	486e      	ldr	r0, [pc, #440]	; (8001d6c <MX_GPIO_Init+0x608>)
 8001bb2:	f001 faf3 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4869      	ldr	r0, [pc, #420]	; (8001d74 <MX_GPIO_Init+0x610>)
 8001bce:	f001 fae5 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001be2:	230d      	movs	r3, #13
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	4861      	ldr	r0, [pc, #388]	; (8001d74 <MX_GPIO_Init+0x610>)
 8001bee:	f001 fad5 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin LCD_DISP_Pin D10_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin|LCD_DISP_Pin|D10_Pin;
 8001bf2:	f241 030d 	movw	r3, #4109	; 0x100d
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	485c      	ldr	r0, [pc, #368]	; (8001d7c <MX_GPIO_Init+0x618>)
 8001c0c:	f001 fac6 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	4619      	mov	r1, r3
 8001c24:	4857      	ldr	r0, [pc, #348]	; (8001d84 <MX_GPIO_Init+0x620>)
 8001c26:	f001 fab9 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001c2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4850      	ldr	r0, [pc, #320]	; (8001d88 <MX_GPIO_Init+0x624>)
 8001c48:	f001 faa8 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001c4c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c5e:	230e      	movs	r3, #14
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c66:	4619      	mov	r1, r3
 8001c68:	4844      	ldr	r0, [pc, #272]	; (8001d7c <MX_GPIO_Init+0x618>)
 8001c6a:	f001 fa97 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	483e      	ldr	r0, [pc, #248]	; (8001d80 <MX_GPIO_Init+0x61c>)
 8001c86:	f001 fa89 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c9c:	230d      	movs	r3, #13
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4831      	ldr	r0, [pc, #196]	; (8001d6c <MX_GPIO_Init+0x608>)
 8001ca8:	f001 fa78 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cac:	2310      	movs	r3, #16
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	482d      	ldr	r0, [pc, #180]	; (8001d74 <MX_GPIO_Init+0x610>)
 8001cc0:	f001 fa6c 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001cc4:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482c      	ldr	r0, [pc, #176]	; (8001d8c <MX_GPIO_Init+0x628>)
 8001cda:	f001 fa5f 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cee:	2305      	movs	r3, #5
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4820      	ldr	r0, [pc, #128]	; (8001d7c <MX_GPIO_Init+0x618>)
 8001cfa:	f001 fa4f 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin D6_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|D6_Pin;
 8001cfe:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	481d      	ldr	r0, [pc, #116]	; (8001d8c <MX_GPIO_Init+0x628>)
 8001d18:	f001 fa40 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001d1c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d2e:	230d      	movs	r3, #13
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4814      	ldr	r0, [pc, #80]	; (8001d8c <MX_GPIO_Init+0x628>)
 8001d3a:	f001 fa2f 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <MX_GPIO_Init+0x618>)
 8001d56:	f001 fa21 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d64:	e014      	b.n	8001d90 <MX_GPIO_Init+0x62c>
 8001d66:	bf00      	nop
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40021800 	.word	0x40021800
 8001d70:	40022400 	.word	0x40022400
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40022800 	.word	0x40022800
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40021400 	.word	0x40021400
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	488e      	ldr	r0, [pc, #568]	; (8001fd8 <MX_GPIO_Init+0x874>)
 8001d9e:	f001 f9fd 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001da2:	2310      	movs	r3, #16
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001db2:	230a      	movs	r3, #10
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4887      	ldr	r0, [pc, #540]	; (8001fdc <MX_GPIO_Init+0x878>)
 8001dbe:	f001 f9ed 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001dc2:	2328      	movs	r3, #40	; 0x28
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	487f      	ldr	r0, [pc, #508]	; (8001fdc <MX_GPIO_Init+0x878>)
 8001dde:	f001 f9dd 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	487a      	ldr	r0, [pc, #488]	; (8001fe0 <MX_GPIO_Init+0x87c>)
 8001df8:	f001 f9d0 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D2_Pin EXT_RST_Pin PG2 */
  GPIO_InitStruct.Pin = ARDUINO_D2_Pin|EXT_RST_Pin|GPIO_PIN_2;
 8001dfc:	234c      	movs	r3, #76	; 0x4c
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	4873      	ldr	r0, [pc, #460]	; (8001fe0 <MX_GPIO_Init+0x87c>)
 8001e14:	f001 f9c2 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001e18:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	486d      	ldr	r0, [pc, #436]	; (8001fe4 <MX_GPIO_Init+0x880>)
 8001e2e:	f001 f9b5 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001e32:	2308      	movs	r3, #8
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e42:	230c      	movs	r3, #12
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4866      	ldr	r0, [pc, #408]	; (8001fe8 <MX_GPIO_Init+0x884>)
 8001e4e:	f001 f9a5 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001e52:	2305      	movs	r3, #5
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e62:	230a      	movs	r3, #10
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	485e      	ldr	r0, [pc, #376]	; (8001fe8 <MX_GPIO_Init+0x884>)
 8001e6e:	f001 f995 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e72:	2332      	movs	r3, #50	; 0x32
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e82:	230b      	movs	r3, #11
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4856      	ldr	r0, [pc, #344]	; (8001fe8 <MX_GPIO_Init+0x884>)
 8001e8e:	f001 f985 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e92:	2304      	movs	r3, #4
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ea2:	2309      	movs	r3, #9
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	484f      	ldr	r0, [pc, #316]	; (8001fec <MX_GPIO_Init+0x888>)
 8001eae:	f001 f975 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001eb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ec4:	2309      	movs	r3, #9
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <MX_GPIO_Init+0x88c>)
 8001ed0:	f001 f964 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ed4:	2386      	movs	r3, #134	; 0x86
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ee4:	230b      	movs	r3, #11
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eec:	4619      	mov	r1, r3
 8001eee:	4841      	ldr	r0, [pc, #260]	; (8001ff4 <MX_GPIO_Init+0x890>)
 8001ef0:	f001 f954 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	483b      	ldr	r0, [pc, #236]	; (8001ff4 <MX_GPIO_Init+0x890>)
 8001f08:	f001 f948 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001f0c:	2350      	movs	r3, #80	; 0x50
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f1c:	230d      	movs	r3, #13
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f24:	4619      	mov	r1, r3
 8001f26:	4833      	ldr	r0, [pc, #204]	; (8001ff4 <MX_GPIO_Init+0x890>)
 8001f28:	f001 f938 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f32:	2312      	movs	r3, #18
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4824      	ldr	r0, [pc, #144]	; (8001fdc <MX_GPIO_Init+0x878>)
 8001f4a:	f001 f927 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f4e:	2328      	movs	r3, #40	; 0x28
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f5e:	230a      	movs	r3, #10
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4822      	ldr	r0, [pc, #136]	; (8001ff4 <MX_GPIO_Init+0x890>)
 8001f6a:	f001 f917 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : D12_Pin */
  GPIO_InitStruct.Pin = D12_Pin;
 8001f6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4819      	ldr	r0, [pc, #100]	; (8001fec <MX_GPIO_Init+0x888>)
 8001f88:	f001 f908 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MOSI_PWM_D11_Pin;
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_MOSI_PWM_D11_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <MX_GPIO_Init+0x888>)
 8001faa:	f001 f8f7 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2017      	movs	r0, #23
 8001fb4:	f000 fd22 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fb8:	2017      	movs	r0, #23
 8001fba:	f000 fd3b 	bl	8002a34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2028      	movs	r0, #40	; 0x28
 8001fc4:	f000 fd1a 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fc8:	2028      	movs	r0, #40	; 0x28
 8001fca:	f000 fd33 	bl	8002a34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fce:	bf00      	nop
 8001fd0:	3740      	adds	r7, #64	; 0x40
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021c00 	.word	0x40021c00
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]

}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002022:	f000 fbef 	bl	8002804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40001000 	.word	0x40001000

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	e7fe      	b.n	800203c <Error_Handler+0x8>
	...

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_MspInit+0x44>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_MspInit+0x44>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_MspInit+0x44>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_MspInit+0x44>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_MspInit+0x44>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_MspInit+0x44>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0ac      	sub	sp, #176	; 0xb0
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	2284      	movs	r2, #132	; 0x84
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f007 fed2 	bl	8009e52 <memset>
  if(hsd->Instance==SDMMC1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	; (8002280 <HAL_SD_MspInit+0x1f8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	f040 80de 	bne.w	8002276 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80020ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80020be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80020c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 ff17 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020d8:	f7ff ffac 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020dc:	4b69      	ldr	r3, [pc, #420]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	4a68      	ldr	r2, [pc, #416]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 80020e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e6:	6453      	str	r3, [r2, #68]	; 0x44
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f4:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a62      	ldr	r2, [pc, #392]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b60      	ldr	r3, [pc, #384]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a5c      	ldr	r2, [pc, #368]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_SD_MspInit+0x1fc>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002124:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800213e:	230c      	movs	r3, #12
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002148:	4619      	mov	r1, r3
 800214a:	484f      	ldr	r0, [pc, #316]	; (8002288 <HAL_SD_MspInit+0x200>)
 800214c:	f001 f826 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8002150:	2304      	movs	r3, #4
 8002152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002168:	230c      	movs	r3, #12
 800216a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002172:	4619      	mov	r1, r3
 8002174:	4845      	ldr	r0, [pc, #276]	; (800228c <HAL_SD_MspInit+0x204>)
 8002176:	f001 f811 	bl	800319c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800217a:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_SD_MspInit+0x208>)
 800217c:	4a45      	ldr	r2, [pc, #276]	; (8002294 <HAL_SD_MspInit+0x20c>)
 800217e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_SD_MspInit+0x208>)
 8002182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002186:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_SD_MspInit+0x208>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_SD_MspInit+0x208>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_SD_MspInit+0x208>)
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_SD_MspInit+0x208>)
 800219e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021aa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021ae:	2220      	movs	r2, #32
 80021b0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021c0:	2203      	movs	r2, #3
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80021d4:	482e      	ldr	r0, [pc, #184]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021d6:	f000 fc3b 	bl	8002a50 <HAL_DMA_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80021e0:	f7ff ff28 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ea:	4a29      	ldr	r2, [pc, #164]	; (8002290 <HAL_SD_MspInit+0x208>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_SD_MspInit+0x210>)
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_SD_MspInit+0x214>)
 80021f4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_SD_MspInit+0x210>)
 80021f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021fc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002200:	2240      	movs	r2, #64	; 0x40
 8002202:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_SD_MspInit+0x210>)
 800220c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002210:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002218:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_SD_MspInit+0x210>)
 800221c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002220:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002224:	2220      	movs	r2, #32
 8002226:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_SD_MspInit+0x210>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002230:	2204      	movs	r2, #4
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002236:	2203      	movs	r2, #3
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_SD_MspInit+0x210>)
 800223c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002244:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800224a:	4813      	ldr	r0, [pc, #76]	; (8002298 <HAL_SD_MspInit+0x210>)
 800224c:	f000 fc00 	bl	8002a50 <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 8002256:	f7ff feed 	bl	8002034 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_SD_MspInit+0x210>)
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_SD_MspInit+0x210>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2031      	movs	r0, #49	; 0x31
 800226c:	f000 fbc6 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002270:	2031      	movs	r0, #49	; 0x31
 8002272:	f000 fbdf 	bl	8002a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	37b0      	adds	r7, #176	; 0xb0
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40023800 	.word	0x40023800
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	20000118 	.word	0x20000118
 8002294:	40026458 	.word	0x40026458
 8002298:	20000178 	.word	0x20000178
 800229c:	400264a0 	.word	0x400264a0

080022a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0ae      	sub	sp, #184	; 0xb8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	2284      	movs	r2, #132	; 0x84
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f007 fdc6 	bl	8009e52 <memset>
  if(huart->Instance==USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a53      	ldr	r2, [pc, #332]	; (8002418 <HAL_UART_MspInit+0x178>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d15d      	bne.n	800238c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022d0:	2340      	movs	r3, #64	; 0x40
 80022d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022d4:	2300      	movs	r3, #0
 80022d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fe0f 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022e8:	f7ff fea4 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_UART_MspInit+0x17c>)
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_UART_MspInit+0x17c>)
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	6453      	str	r3, [r2, #68]	; 0x44
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_UART_MspInit+0x17c>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b45      	ldr	r3, [pc, #276]	; (800241c <HAL_UART_MspInit+0x17c>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_UART_MspInit+0x17c>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_UART_MspInit+0x17c>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_UART_MspInit+0x17c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a3e      	ldr	r2, [pc, #248]	; (800241c <HAL_UART_MspInit+0x17c>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b3c      	ldr	r3, [pc, #240]	; (800241c <HAL_UART_MspInit+0x17c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800234c:	2307      	movs	r3, #7
 800234e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002356:	4619      	mov	r1, r3
 8002358:	4831      	ldr	r0, [pc, #196]	; (8002420 <HAL_UART_MspInit+0x180>)
 800235a:	f000 ff1f 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800235e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002382:	4619      	mov	r1, r3
 8002384:	4827      	ldr	r0, [pc, #156]	; (8002424 <HAL_UART_MspInit+0x184>)
 8002386:	f000 ff09 	bl	800319c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800238a:	e040      	b.n	800240e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a25      	ldr	r2, [pc, #148]	; (8002428 <HAL_UART_MspInit+0x188>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d13b      	bne.n	800240e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800239c:	2300      	movs	r3, #0
 800239e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fdab 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80023b0:	f7ff fe40 	bl	8002034 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023ba:	f043 0320 	orr.w	r3, r3, #32
 80023be:	6453      	str	r3, [r2, #68]	; 0x44
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_UART_MspInit+0x17c>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023fc:	2308      	movs	r3, #8
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002402:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002406:	4619      	mov	r1, r3
 8002408:	4808      	ldr	r0, [pc, #32]	; (800242c <HAL_UART_MspInit+0x18c>)
 800240a:	f000 fec7 	bl	800319c <HAL_GPIO_Init>
}
 800240e:	bf00      	nop
 8002410:	37b8      	adds	r7, #184	; 0xb8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40011000 	.word	0x40011000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020400 	.word	0x40020400
 8002424:	40020000 	.word	0x40020000
 8002428:	40011400 	.word	0x40011400
 800242c:	40020800 	.word	0x40020800

08002430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_InitTick+0xe0>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a32      	ldr	r2, [pc, #200]	; (8002510 <HAL_InitTick+0xe0>)
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_InitTick+0xe0>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002458:	f107 0210 	add.w	r2, r7, #16
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fd1a 	bl	8003e9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002472:	f001 fceb 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8002476:	6378      	str	r0, [r7, #52]	; 0x34
 8002478:	e004      	b.n	8002484 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800247a:	f001 fce7 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800247e:	4603      	mov	r3, r0
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_InitTick+0xe4>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	3b01      	subs	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_InitTick+0xe8>)
 8002494:	4a21      	ldr	r2, [pc, #132]	; (800251c <HAL_InitTick+0xec>)
 8002496:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_InitTick+0xe8>)
 800249a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024a0:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <HAL_InitTick+0xe8>)
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_InitTick+0xe8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_InitTick+0xe8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_InitTick+0xe8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024b8:	4817      	ldr	r0, [pc, #92]	; (8002518 <HAL_InitTick+0xe8>)
 80024ba:	f003 fa39 	bl	8005930 <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11b      	bne.n	8002504 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024cc:	4812      	ldr	r0, [pc, #72]	; (8002518 <HAL_InitTick+0xe8>)
 80024ce:	f003 fa91 	bl	80059f4 <HAL_TIM_Base_Start_IT>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024e0:	2036      	movs	r0, #54	; 0x36
 80024e2:	f000 faa7 	bl	8002a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d808      	bhi.n	80024fe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	2036      	movs	r0, #54	; 0x36
 80024f2:	f000 fa83 	bl	80029fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_InitTick+0xf0>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e002      	b.n	8002504 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002508:	4618      	mov	r0, r3
 800250a:	3738      	adds	r7, #56	; 0x38
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	431bde83 	.word	0x431bde83
 8002518:	20000390 	.word	0x20000390
 800251c:	40001000 	.word	0x40001000
 8002520:	20000004 	.word	0x20000004

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <NMI_Handler+0x4>

0800252a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <MemManage_Handler+0x4>

08002536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <UsageFault_Handler+0x4>

08002542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D4_Pin);
 800257e:	2080      	movs	r0, #128	; 0x80
 8002580:	f000 ffea 	bl	8003558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800258c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002590:	f000 ffe2 	bl	8003558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <SDMMC1_IRQHandler+0x10>)
 800259e:	f002 fb1f 	bl	8004be0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000094 	.word	0x20000094

080025ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM6_DAC_IRQHandler+0x10>)
 80025b2:	f003 fa97 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000390 	.word	0x20000390

080025c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <DMA2_Stream3_IRQHandler+0x10>)
 80025c6:	f000 fb73 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000118 	.word	0x20000118

080025d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <DMA2_Stream6_IRQHandler+0x10>)
 80025da:	f000 fb69 	bl	8002cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000178 	.word	0x20000178

080025e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_kill>:

int _kill(int pid, int sig)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002602:	f007 fcd1 	bl	8009fa8 <__errno>
 8002606:	4603      	mov	r3, r0
 8002608:	2216      	movs	r2, #22
 800260a:	601a      	str	r2, [r3, #0]
  return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_exit>:

void _exit (int status)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ffe7 	bl	80025f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800262a:	e7fe      	b.n	800262a <_exit+0x12>

0800262c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e00a      	b.n	8002654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800263e:	f3af 8000 	nop.w
 8002642:	4601      	mov	r1, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	60ba      	str	r2, [r7, #8]
 800264a:	b2ca      	uxtb	r2, r1
 800264c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbf0      	blt.n	800263e <_read+0x12>
  }

  return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e009      	b.n	800268c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf1      	blt.n	8002678 <_write+0x12>
  }
  return len;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_close>:

int _close(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c6:	605a      	str	r2, [r3, #4]
  return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_isatty>:

int _isatty(int file)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f007 fc36 	bl	8009fa8 <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	220c      	movs	r2, #12
 8002740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20050000 	.word	0x20050000
 8002768:	00000800 	.word	0x00000800
 800276c:	200003dc 	.word	0x200003dc
 8002770:	200009d8 	.word	0x200009d8

08002774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7ff ffd7 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f007 fbf5 	bl	8009fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7fe fdc1 	bl	8001350 <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027dc:	0800bf58 	.word	0x0800bf58
  ldr r2, =_sbss
 80027e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027e4:	200009d4 	.word	0x200009d4

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>

080027ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ee:	2003      	movs	r0, #3
 80027f0:	f000 f8f9 	bl	80029e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f4:	200f      	movs	r0, #15
 80027f6:	f7ff fe1b 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fa:	f7ff fc21 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x24>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_IncTick+0x24>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008
 8002828:	200003e0 	.word	0x200003e0

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	200003e0 	.word	0x200003e0

08002844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff ffee 	bl	800282c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d005      	beq.n	800286a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_Delay+0x44>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286a:	bf00      	nop
 800286c:	f7ff ffde 	bl	800282c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8f7      	bhi.n	800286c <HAL_Delay+0x28>
  {
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000008 	.word	0x20000008

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <__NVIC_SetPriorityGrouping+0x40>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ba:	4a04      	ldr	r2, [pc, #16]	; (80028cc <__NVIC_SetPriorityGrouping+0x40>)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	60d3      	str	r3, [r2, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00
 80028d0:	05fa0000 	.word	0x05fa0000

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ff4c 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0e:	f7ff ff61 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f7ff ffb1 	bl	8002980 <NVIC_EncodePriority>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff80 	bl	800292c <__NVIC_SetPriority>
}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff54 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff fee6 	bl	800282c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e099      	b.n	8002ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8c:	e00f      	b.n	8002aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8e:	f7ff fecd 	bl	800282c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d908      	bls.n	8002aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e078      	b.n	8002ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e8      	bne.n	8002a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_DMA_Init+0x158>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0307 	bic.w	r3, r3, #7
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d117      	bne.n	8002b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 faa5 	bl	80030a4 <DMA_CheckFifoParam>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e016      	b.n	8002ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa5c 	bl	8003038 <DMA_CalcBaseAndBitshift>
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	223f      	movs	r2, #63	; 0x3f
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	f010803f 	.word	0xf010803f

08002bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_Start_IT+0x26>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e048      	b.n	8002c64 <HAL_DMA_Start_IT+0xb8>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d137      	bne.n	8002c56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9ee 	bl	8002fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	223f      	movs	r2, #63	; 0x3f
 8002c06:	409a      	lsls	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0216 	orr.w	r2, r2, #22
 8002c1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e005      	b.n	8002c62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00c      	b.n	8002ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cbc:	4b8e      	ldr	r3, [pc, #568]	; (8002ef8 <HAL_DMA_IRQHandler+0x248>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a8e      	ldr	r2, [pc, #568]	; (8002efc <HAL_DMA_IRQHandler+0x24c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2208      	movs	r2, #8
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2208      	movs	r2, #8
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2201      	movs	r2, #1
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2204      	movs	r2, #4
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	2204      	movs	r2, #4
 8002d76:	409a      	lsls	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d043      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03c      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	2210      	movs	r2, #16
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d018      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d024      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	e01f      	b.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
 8002df0:	e016      	b.n	8002e20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0208 	bic.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2220      	movs	r2, #32
 8002e26:	409a      	lsls	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 808f 	beq.w	8002f50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8087 	beq.w	8002f50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2220      	movs	r2, #32
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d136      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0216 	bic.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_DMA_IRQHandler+0x1da>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	223f      	movs	r2, #63	; 0x3f
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d07e      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
        }
        return;
 8002ec6:	e079      	b.n	8002fbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d031      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
 8002ef4:	e02c      	b.n	8002f50 <HAL_DMA_IRQHandler+0x2a0>
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d023      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
 8002f10:	e01e      	b.n	8002f50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10f      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0210 	bic.w	r2, r2, #16
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d032      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2205      	movs	r2, #5
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d307      	bcc.n	8002f98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f2      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x2cc>
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fbc:	bf00      	nop
    }
  }
}
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d108      	bne.n	800301c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800301a:	e007      	b.n	800302c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3b10      	subs	r3, #16
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <DMA_CalcBaseAndBitshift+0x60>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <DMA_CalcBaseAndBitshift+0x64>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d908      	bls.n	8003078 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <DMA_CalcBaseAndBitshift+0x68>)
 800306e:	4013      	ands	r3, r2
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	659a      	str	r2, [r3, #88]	; 0x58
 8003076:	e006      	b.n	8003086 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	aaaaaaab 	.word	0xaaaaaaab
 800309c:	0800bc94 	.word	0x0800bc94
 80030a0:	fffffc00 	.word	0xfffffc00

080030a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11f      	bne.n	80030fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d856      	bhi.n	8003172 <DMA_CheckFifoParam+0xce>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <DMA_CheckFifoParam+0x28>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030ef 	.word	0x080030ef
 80030d4:	080030dd 	.word	0x080030dd
 80030d8:	08003173 	.word	0x08003173
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d046      	beq.n	8003176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e043      	b.n	8003176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f6:	d140      	bne.n	800317a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e03d      	b.n	800317a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003106:	d121      	bne.n	800314c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d837      	bhi.n	800317e <DMA_CheckFifoParam+0xda>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <DMA_CheckFifoParam+0x70>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	0800312b 	.word	0x0800312b
 800311c:	08003125 	.word	0x08003125
 8003120:	0800313d 	.word	0x0800313d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e030      	b.n	800318c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d025      	beq.n	8003182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313a:	e022      	b.n	8003182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003144:	d11f      	bne.n	8003186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800314a:	e01c      	b.n	8003186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d903      	bls.n	800315a <DMA_CheckFifoParam+0xb6>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d003      	beq.n	8003160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003158:	e018      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      break;
 800315e:	e015      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00e      	beq.n	800318a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e00b      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003172:	bf00      	nop
 8003174:	e00a      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
 8003178:	e008      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e006      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e004      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;   
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
    }
  } 
  
  return status; 
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e175      	b.n	80034a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8164 	bne.w	80034a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d005      	beq.n	80031f2 <HAL_GPIO_Init+0x56>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80be 	beq.w	80034a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_GPIO_Init+0x324>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800333e:	4a61      	ldr	r2, [pc, #388]	; (80034c4 <HAL_GPIO_Init+0x328>)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_GPIO_Init+0x32c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d037      	beq.n	80033da <HAL_GPIO_Init+0x23e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a57      	ldr	r2, [pc, #348]	; (80034cc <HAL_GPIO_Init+0x330>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_GPIO_Init+0x23a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02b      	beq.n	80033d2 <HAL_GPIO_Init+0x236>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a55      	ldr	r2, [pc, #340]	; (80034d4 <HAL_GPIO_Init+0x338>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x232>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_GPIO_Init+0x33c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x22e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_GPIO_Init+0x340>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x22a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_GPIO_Init+0x344>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_GPIO_Init+0x348>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x222>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a50      	ldr	r2, [pc, #320]	; (80034e8 <HAL_GPIO_Init+0x34c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x21e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <HAL_GPIO_Init+0x350>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x21a>
 80033b2:	2309      	movs	r3, #9
 80033b4:	e012      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033b6:	230a      	movs	r3, #10
 80033b8:	e010      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e00e      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033be:	2307      	movs	r3, #7
 80033c0:	e00c      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033c2:	2306      	movs	r3, #6
 80033c4:	e00a      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e008      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ce:	2303      	movs	r3, #3
 80033d0:	e004      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033da:	2300      	movs	r3, #0
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f002 0203 	and.w	r2, r2, #3
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	4093      	lsls	r3, r2
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033ec:	4935      	ldr	r1, [pc, #212]	; (80034c4 <HAL_GPIO_Init+0x328>)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_GPIO_Init+0x354>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003448:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3301      	adds	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	f67f ae86 	bls.w	80031bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40020400 	.word	0x40020400
 80034d0:	40020800 	.word	0x40020800
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40021400 	.word	0x40021400
 80034e0:	40021800 	.word	0x40021800
 80034e4:	40021c00 	.word	0x40021c00
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40022400 	.word	0x40022400
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e001      	b.n	8003516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003540:	e003      	b.n	800354a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fd3e 	bl	8001ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e291      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ac:	4b96      	ldr	r3, [pc, #600]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d00c      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b8:	4b93      	ldr	r3, [pc, #588]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d112      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d0:	d10b      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d2:	4b8d      	ldr	r3, [pc, #564]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x130>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d168      	bne.n	80036b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e26b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x7a>
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e02e      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x9c>
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7b      	ldr	r2, [pc, #492]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800361c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0xc0>
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a72      	ldr	r2, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6b      	ldr	r2, [pc, #428]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7ff f8e0 	bl	800282c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7ff f8dc 	bl	800282c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e21f      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7ff f8cc 	bl	800282c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7ff f8c8 	bl	800282c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e20b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x110>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d069      	beq.n	800379a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c6:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d2:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11c      	bne.n	8003718 <HAL_RCC_OscConfig+0x190>
 80036de:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_RCC_OscConfig+0x17a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1df      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	493d      	ldr	r1, [pc, #244]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	e040      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d023      	beq.n	8003768 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7ff f87e 	bl	800282c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003734:	f7ff f87a 	bl	800282c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1bd      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b30      	ldr	r3, [pc, #192]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4929      	ldr	r1, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	e018      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7ff f85a 	bl	800282c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7ff f856 	bl	800282c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e199      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d038      	beq.n	8003818 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d019      	beq.n	80037e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7ff f837 	bl	800282c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c2:	f7ff f833 	bl	800282c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e176      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x23a>
 80037e0:	e01a      	b.n	8003818 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7ff f81d 	bl	800282c <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7ff f819 	bl	800282c <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d903      	bls.n	800380c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e15c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
 8003808:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b91      	ldr	r3, [pc, #580]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a4 	beq.w	800396e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384e:	4b82      	ldr	r3, [pc, #520]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800385a:	4b7f      	ldr	r3, [pc, #508]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fe ffe1 	bl	800282c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fe ffdd 	bl	800282c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e120      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x31a>
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a6e      	ldr	r2, [pc, #440]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x33c>
 80038aa:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a69      	ldr	r2, [pc, #420]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a66      	ldr	r2, [pc, #408]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e01c      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x35e>
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a60      	ldr	r2, [pc, #384]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	e00b      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a5a      	ldr	r2, [pc, #360]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fe ff91 	bl	800282c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe ff8d 	bl	800282c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0ce      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCC_OscConfig+0x386>
 8003930:	e014      	b.n	800395c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe ff7b 	bl	800282c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe ff77 	bl	800282c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b40      	ldr	r3, [pc, #256]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a4 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d06b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d149      	bne.n	8003a20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fe ff48 	bl	800282c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe ff44 	bl	800282c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e087      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4313      	orrs	r3, r2
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe ff18 	bl	800282c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe ff14 	bl	800282c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e057      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x478>
 8003a1e:	e04f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fefe 	bl	800282c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe fefa 	bl	800282c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e03d      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4ac>
 8003a52:	e035      	b.n	8003ac0 <HAL_RCC_OscConfig+0x538>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x544>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d028      	beq.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d121      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d11a      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0d0      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d910      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	4965      	ldr	r1, [pc, #404]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b8      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a58      	ldr	r2, [pc, #352]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	494d      	ldr	r1, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d040      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e073      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4936      	ldr	r1, [pc, #216]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fe32 	bl	800282c <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fe fe2e 	bl	800282c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e053      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d210      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 020f 	bic.w	r2, r3, #15
 8003c0a:	4922      	ldr	r1, [pc, #136]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4916      	ldr	r1, [pc, #88]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490a      	ldr	r1, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x1cc>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe fbd4 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023c00 	.word	0x40023c00
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	0800bc7c 	.word	0x0800bc7c
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b090      	sub	sp, #64	; 0x40
 8003cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	2300      	movs	r3, #0
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc0:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d00d      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	f200 80a1 	bhi.w	8003e14 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x34>
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cda:	e09b      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce0:	e09b      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ce2:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce6:	e098      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cf2:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	2200      	movs	r2, #0
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	627a      	str	r2, [r7, #36]	; 0x24
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d10:	2100      	movs	r1, #0
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d14:	fb03 f201 	mul.w	r2, r3, r1
 8003d18:	2300      	movs	r3, #0
 8003d1a:	fb00 f303 	mul.w	r3, r0, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d22:	fba0 1202 	umull	r1, r2, r0, r2
 8003d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d28:	460a      	mov	r2, r1
 8003d2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d2e:	4413      	add	r3, r2
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	2200      	movs	r2, #0
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	61fa      	str	r2, [r7, #28]
 8003d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d42:	f7fc ff41 	bl	8000bc8 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4e:	e053      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	617a      	str	r2, [r7, #20]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d62:	f04f 0b00 	mov.w	fp, #0
 8003d66:	4652      	mov	r2, sl
 8003d68:	465b      	mov	r3, fp
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d78:	0150      	lsls	r0, r2, #5
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d82:	eb63 090b 	sbc.w	r9, r3, fp
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d9a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d9e:	eb63 0509 	sbc.w	r5, r3, r9
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	00eb      	lsls	r3, r5, #3
 8003dac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db0:	00e2      	lsls	r2, r4, #3
 8003db2:	4614      	mov	r4, r2
 8003db4:	461d      	mov	r5, r3
 8003db6:	eb14 030a 	adds.w	r3, r4, sl
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	eb45 030b 	adc.w	r3, r5, fp
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	028b      	lsls	r3, r1, #10
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd8:	4621      	mov	r1, r4
 8003dda:	028a      	lsls	r2, r1, #10
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	2200      	movs	r2, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	60fa      	str	r2, [r7, #12]
 8003de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dec:	f7fc feec 	bl	8000bc8 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4613      	mov	r3, r2
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	3301      	adds	r3, #1
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3740      	adds	r7, #64	; 0x40
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	00f42400 	.word	0x00f42400
 8003e30:	017d7840 	.word	0x017d7840

08003e34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000000 	.word	0x20000000

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff0 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0800bc8c 	.word	0x0800bc8c

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffdc 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0b5b      	lsrs	r3, r3, #13
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800bc8c 	.word	0x0800bc8c

08003e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_RCC_GetClockConfig+0x60>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f28:	4b69      	ldr	r3, [pc, #420]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a68      	ldr	r2, [pc, #416]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	4b66      	ldr	r3, [pc, #408]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	4964      	ldr	r1, [pc, #400]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d017      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	4959      	ldr	r1, [pc, #356]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f78:	d101      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f96:	4b4e      	ldr	r3, [pc, #312]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	494a      	ldr	r1, [pc, #296]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808b 	beq.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a39      	ldr	r2, [pc, #228]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff0:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ffc:	4b35      	ldr	r3, [pc, #212]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fe fc10 	bl	800282c <HAL_GetTick>
 800400c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fe fc0c 	bl	800282c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e357      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d035      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d02e      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004074:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d114      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fe fbd4 	bl	800282c <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fe fbd0 	bl	800282c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e319      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040b6:	d111      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	4901      	ldr	r1, [pc, #4]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40007000 	.word	0x40007000
 80040d8:	0ffffcff 	.word	0x0ffffcff
 80040dc:	4baa      	ldr	r3, [pc, #680]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4aa9      	ldr	r2, [pc, #676]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040e6:	6093      	str	r3, [r2, #8]
 80040e8:	4ba7      	ldr	r3, [pc, #668]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	49a4      	ldr	r1, [pc, #656]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004106:	4ba0      	ldr	r3, [pc, #640]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800410c:	4a9e      	ldr	r2, [pc, #632]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004116:	4b9c      	ldr	r3, [pc, #624]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	4999      	ldr	r1, [pc, #612]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004134:	4b94      	ldr	r3, [pc, #592]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004142:	4991      	ldr	r1, [pc, #580]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004156:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004164:	4988      	ldr	r1, [pc, #544]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004178:	4b83      	ldr	r3, [pc, #524]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004186:	4980      	ldr	r1, [pc, #512]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4977      	ldr	r1, [pc, #476]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041bc:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	496f      	ldr	r1, [pc, #444]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041de:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f023 020c 	bic.w	r2, r3, #12
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	4966      	ldr	r1, [pc, #408]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004200:	4b61      	ldr	r3, [pc, #388]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	495e      	ldr	r1, [pc, #376]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004222:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	4955      	ldr	r1, [pc, #340]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004266:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	4944      	ldr	r1, [pc, #272]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004288:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	493c      	ldr	r1, [pc, #240]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	4933      	ldr	r1, [pc, #204]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042da:	492b      	ldr	r1, [pc, #172]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d011      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042fc:	4922      	ldr	r1, [pc, #136]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	4912      	ldr	r1, [pc, #72]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004360:	4909      	ldr	r1, [pc, #36]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d006      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80d9 	beq.w	800452e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a01      	ldr	r2, [pc, #4]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004388:	40023800 	.word	0x40023800
 800438c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438e:	f7fe fa4d 	bl	800282c <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004396:	f7fe fa49 	bl	800282c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	; 0x64
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e194      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a8:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d021      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043d6:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	4957      	ldr	r1, [pc, #348]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d129      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	0f1b      	lsrs	r3, r3, #28
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	019a      	lsls	r2, r3, #6
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	071b      	lsls	r3, r3, #28
 8004464:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004472:	f023 021f 	bic.w	r2, r3, #31
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	3b01      	subs	r3, #1
 800447c:	4937      	ldr	r1, [pc, #220]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	0e1b      	lsrs	r3, r3, #24
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a4:	0f1b      	lsrs	r3, r3, #28
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	019a      	lsls	r2, r3, #6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	431a      	orrs	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	071b      	lsls	r3, r3, #28
 80044c4:	4925      	ldr	r1, [pc, #148]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d011      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	019a      	lsls	r2, r3, #6
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	071b      	lsls	r3, r3, #28
 80044f4:	4919      	ldr	r1, [pc, #100]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fe f990 	bl	800282c <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004510:	f7fe f98c 	bl	800282c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0d7      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80cd 	bne.w	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fe f973 	bl	800282c <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800454a:	f7fe f96f 	bl	800282c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d903      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0ba      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800455c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004560:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800456c:	d0ed      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02e      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d12a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004596:	4b51      	ldr	r3, [pc, #324]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	0f1b      	lsrs	r3, r3, #28
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	019a      	lsls	r2, r3, #6
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	071b      	lsls	r3, r3, #28
 80045ca:	4944      	ldr	r1, [pc, #272]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045d2:	4b42      	ldr	r3, [pc, #264]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	493d      	ldr	r1, [pc, #244]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004600:	d11d      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	0e1b      	lsrs	r3, r3, #24
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	0f1b      	lsrs	r3, r3, #28
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	019a      	lsls	r2, r3, #6
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	4929      	ldr	r1, [pc, #164]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	0e1b      	lsrs	r3, r3, #24
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	019a      	lsls	r2, r3, #6
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	4917      	ldr	r1, [pc, #92]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4911      	ldr	r1, [pc, #68]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fe f8c0 	bl	800282c <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046b0:	f7fe f8bc 	bl	800282c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e007      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ce:	d1ef      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e022      	b.n	8004738 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fd fcbf 	bl	8002088 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2203      	movs	r2, #3
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f814 	bl	8004740 <HAL_SD_InitCard>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e00a      	b.n	8004738 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004740:	b5b0      	push	{r4, r5, r7, lr}
 8004742:	b08e      	sub	sp, #56	; 0x38
 8004744:	af04      	add	r7, sp, #16
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800475c:	2376      	movs	r3, #118	; 0x76
 800475e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681d      	ldr	r5, [r3, #0]
 8004764:	466c      	mov	r4, sp
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800476e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004778:	4628      	mov	r0, r5
 800477a:	f002 f88f 	bl	800689c <SDMMC_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e059      	b.n	8004844 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f002 f8c3 	bl	8006930 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80047ba:	2002      	movs	r0, #2
 80047bc:	f7fe f842 	bl	8002844 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 ff59 	bl	8005678 <SD_PowerON>
 80047c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e02e      	b.n	8004844 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fe78 	bl	80054dc <SD_InitCard>
 80047ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e01b      	b.n	8004844 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004814:	4618      	mov	r0, r3
 8004816:	f002 f91d 	bl	8006a54 <SDMMC_CmdBlockLength>
 800481a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00f      	beq.n	8004842 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_SD_InitCard+0x10c>)
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bdb0      	pop	{r4, r5, r7, pc}
 800484c:	004005ff 	.word	0x004005ff

08004850 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	; 0x30
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0c3      	b.n	8004a00 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	f040 80bc 	bne.w	80049fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800488c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	441a      	add	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	429a      	cmp	r2, r3
 8004898:	d907      	bls.n	80048aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0aa      	b.n	8004a00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2203      	movs	r2, #3
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4a4e      	ldr	r2, [pc, #312]	; (8004a08 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a4d      	ldr	r2, [pc, #308]	; (8004a0c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80048d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2200      	movs	r2, #0
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2200      	movs	r2, #0
 80048e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3380      	adds	r3, #128	; 0x80
 8004910:	4619      	mov	r1, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	f7fe f947 	bl	8002bac <HAL_DMA_Start_IT>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d017      	beq.n	8004954 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a35      	ldr	r2, [pc, #212]	; (8004a10 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e055      	b.n	8004a00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	2b01      	cmp	r3, #1
 800496a:	d002      	beq.n	8004972 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	025b      	lsls	r3, r3, #9
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
 8004976:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	025b      	lsls	r3, r3, #9
 800497c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800497e:	2390      	movs	r3, #144	; 0x90
 8004980:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004982:	2302      	movs	r3, #2
 8004984:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004986:	2300      	movs	r3, #0
 8004988:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800498a:	2301      	movs	r3, #1
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f107 0210 	add.w	r2, r7, #16
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f002 f82f 	bl	80069fc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d90a      	bls.n	80049ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2282      	movs	r2, #130	; 0x82
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 f893 	bl	8006adc <SDMMC_CmdReadMultiBlock>
 80049b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80049b8:	e009      	b.n	80049ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2281      	movs	r2, #129	; 0x81
 80049be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	4618      	mov	r0, r3
 80049c8:	f002 f866 	bl	8006a98 <SDMMC_CmdReadSingleBlock>
 80049cc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e002      	b.n	8004a00 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3730      	adds	r7, #48	; 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	080052eb 	.word	0x080052eb
 8004a0c:	0800535d 	.word	0x0800535d
 8004a10:	004005ff 	.word	0x004005ff

08004a14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0c6      	b.n	8004bca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 80bf 	bne.w	8004bc8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d907      	bls.n	8004a6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0ad      	b.n	8004bca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2203      	movs	r2, #3
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 021a 	orr.w	r2, r2, #26
 8004a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	4a50      	ldr	r2, [pc, #320]	; (8004bd4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	4a4f      	ldr	r2, [pc, #316]	; (8004bd8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004a9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d002      	beq.n	8004ab4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	025b      	lsls	r3, r3, #9
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d90a      	bls.n	8004ad0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22a0      	movs	r2, #160	; 0xa0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f002 f84c 	bl	8006b64 <SDMMC_CmdWriteMultiBlock>
 8004acc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ace:	e009      	b.n	8004ae4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2290      	movs	r2, #144	; 0x90
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 f81f 	bl	8006b20 <SDMMC_CmdWriteSingleBlock>
 8004ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d012      	beq.n	8004b10 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e05c      	b.n	8004bca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3380      	adds	r3, #128	; 0x80
 8004b50:	461a      	mov	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	025b      	lsls	r3, r3, #9
 8004b56:	089b      	lsrs	r3, r3, #2
 8004b58:	f7fe f828 	bl	8002bac <HAL_DMA_Start_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01a      	beq.n	8004b98 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 021a 	bic.w	r2, r2, #26
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e018      	b.n	8004bca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ba4:	2390      	movs	r3, #144	; 0x90
 8004ba6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f107 0210 	add.w	r2, r7, #16
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 ff1c 	bl	80069fc <SDMMC_ConfigData>

      return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3730      	adds	r7, #48	; 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	080052c1 	.word	0x080052c1
 8004bd8:	0800535d 	.word	0x0800535d
 8004bdc:	004005ff 	.word	0x004005ff

08004be0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_SD_IRQHandler+0x2e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fdec 	bl	80057e4 <SD_Read_IT>
 8004c0c:	e15a      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 808d 	beq.w	8004d38 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b9a      	ldr	r3, [pc, #616]	; (8004e9c <HAL_SD_IRQHandler+0x2bc>)
 8004c34:	400b      	ands	r3, r1
 8004c36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d039      	beq.n	8004cc6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_SD_IRQHandler+0x86>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 ff9c 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 8004c70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f921 	bl	8004ecc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_SD_IRQHandler+0xd6>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 fbba 	bl	8007430 <HAL_SD_RxCpltCallback>
 8004cbc:	e102      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 fbac 	bl	800741c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cc4:	e0fe      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80f9 	beq.w	8004ec4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 ff61 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 8004ce6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8e6 	bl	8004ecc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 80dc 	bne.w	8004ec4 <HAL_SD_IRQHandler+0x2e4>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80d6 	bne.w	8004ec4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0208 	bic.w	r2, r2, #8
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f002 fb73 	bl	800741c <HAL_SD_TxCpltCallback>
}
 8004d36:	e0c5      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_SD_IRQHandler+0x178>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fd98 	bl	8005886 <SD_Write_IT>
 8004d56:	e0b5      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80ae 	beq.w	8004ec4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	f043 0208 	orr.w	r2, r3, #8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	f043 0210 	orr.w	r2, r3, #16
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 feda 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f857 	bl	8004ecc <HAL_SD_ErrorCallback>
}
 8004e1e:	e051      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04c      	beq.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_SD_IRQHandler+0x25e>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d011      	beq.n	8004e62 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <HAL_SD_IRQHandler+0x2c0>)
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd ff0e 	bl	8002c6c <HAL_DMA_Abort_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d036      	beq.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fad0 	bl	8005400 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e60:	e030      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_SD_IRQHandler+0x296>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <HAL_SD_IRQHandler+0x2c4>)
 8004e7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd fef2 	bl	8002c6c <HAL_DMA_Abort_IT>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01a      	beq.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 faeb 	bl	800546e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e98:	e014      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
 8004e9a:	bf00      	nop
 8004e9c:	ffff3ec5 	.word	0xffff3ec5
 8004ea0:	08005401 	.word	0x08005401
 8004ea4:	0800546f 	.word	0x0800546f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f002 faa3 	bl	8007408 <HAL_SD_AbortCallback>
}
 8004ec2:	e7ff      	b.n	8004ec4 <HAL_SD_IRQHandler+0x2e4>
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eee:	0f9b      	lsrs	r3, r3, #30
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efa:	0e9b      	lsrs	r3, r3, #26
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f40:	0d1b      	lsrs	r3, r3, #20
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5e:	0bdb      	lsrs	r3, r3, #15
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	0b9b      	lsrs	r3, r3, #14
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f82:	0b5b      	lsrs	r3, r3, #13
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f94:	0b1b      	lsrs	r3, r3, #12
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d163      	bne.n	8005078 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb4:	009a      	lsls	r2, r3, #2
 8004fb6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fba:	4013      	ands	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004fc0:	0f92      	lsrs	r2, r2, #30
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fcc:	0edb      	lsrs	r3, r3, #27
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	0e1b      	lsrs	r3, r3, #24
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff0:	0d5b      	lsrs	r3, r3, #21
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005002:	0c9b      	lsrs	r3, r3, #18
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005014:	0bdb      	lsrs	r3, r3, #15
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	b2da      	uxtb	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	7e1b      	ldrb	r3, [r3, #24]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	3302      	adds	r3, #2
 8005038:	2201      	movs	r2, #1
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005042:	fb03 f202 	mul.w	r2, r3, r2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	7a1b      	ldrb	r3, [r3, #8]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005064:	0a52      	lsrs	r2, r2, #9
 8005066:	fb03 f202 	mul.w	r2, r3, r2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
 8005076:	e031      	b.n	80050dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	2b01      	cmp	r3, #1
 800507e:	d11d      	bne.n	80050bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	029a      	lsls	r2, r3, #10
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	661a      	str	r2, [r3, #96]	; 0x60
 80050ba:	e00f      	b.n	80050dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a58      	ldr	r2, [pc, #352]	; (8005224 <HAL_SD_GetCardCSD+0x344>)
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e09d      	b.n	8005218 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	0b9b      	lsrs	r3, r3, #14
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	09db      	lsrs	r3, r3, #7
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510a:	b2da      	uxtb	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	0fdb      	lsrs	r3, r3, #31
 8005116:	b2da      	uxtb	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	0f5b      	lsrs	r3, r3, #29
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	b2da      	uxtb	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	0e9b      	lsrs	r3, r3, #26
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	b2da      	uxtb	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	0d9b      	lsrs	r3, r3, #22
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	b2da      	uxtb	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	0d5b      	lsrs	r3, r3, #21
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	0bdb      	lsrs	r3, r3, #15
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	0b9b      	lsrs	r3, r3, #14
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	0b1b      	lsrs	r3, r3, #12
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	0a9b      	lsrs	r3, r3, #10
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	b2da      	uxtb	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	004005ff 	.word	0x004005ff

08005228 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800528c:	f107 030c 	add.w	r3, r7, #12
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa7e 	bl	8005794 <SD_SendStatus>
 8005298:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	0a5b      	lsrs	r3, r3, #9
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80052b6:	693b      	ldr	r3, [r7, #16]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	2b82      	cmp	r3, #130	; 0x82
 80052fe:	d111      	bne.n	8005324 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fc4f 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 800530a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fdd4 	bl	8004ecc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0208 	bic.w	r2, r2, #8
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f240 523a 	movw	r2, #1338	; 0x53a
 800533c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f002 f86f 	bl	8007430 <HAL_SD_RxCpltCallback>
#endif
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fd fe2a 	bl	8002fc4 <HAL_DMA_GetError>
 8005370:	4603      	mov	r3, r0
 8005372:	2b02      	cmp	r3, #2
 8005374:	d03e      	beq.n	80053f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d002      	beq.n	8005392 <SD_DMAError+0x36>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d12d      	bne.n	80053ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a19      	ldr	r2, [pc, #100]	; (80053fc <SD_DMAError+0xa0>)
 8005398:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80053b6:	6978      	ldr	r0, [r7, #20]
 80053b8:	f7ff ff62 	bl	8005280 <HAL_SD_GetCardState>
 80053bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d002      	beq.n	80053ca <SD_DMAError+0x6e>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d10a      	bne.n	80053e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fbea 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 80053d4:	4602      	mov	r2, r0
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	431a      	orrs	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7ff fd6c 	bl	8004ecc <HAL_SD_ErrorCallback>
#endif
  }
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	004005ff 	.word	0x004005ff

08005400 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f240 523a 	movw	r2, #1338	; 0x53a
 8005416:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff ff31 	bl	8005280 <HAL_SD_GetCardState>
 800541e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b06      	cmp	r3, #6
 8005432:	d002      	beq.n	800543a <SD_DMATxAbort+0x3a>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b05      	cmp	r3, #5
 8005438:	d10a      	bne.n	8005450 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f001 fbb2 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	431a      	orrs	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 ffd5 	bl	8007408 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800545e:	e002      	b.n	8005466 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff fd33 	bl	8004ecc <HAL_SD_ErrorCallback>
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f240 523a 	movw	r2, #1338	; 0x53a
 8005484:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fefa 	bl	8005280 <HAL_SD_GetCardState>
 800548c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d002      	beq.n	80054a8 <SD_DMARxAbort+0x3a>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d10a      	bne.n	80054be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fb7b 	bl	8006ba8 <SDMMC_CmdStopTransfer>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f001 ff9e 	bl	8007408 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80054cc:	e002      	b.n	80054d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fcfc 	bl	8004ecc <HAL_SD_ErrorCallback>
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b094      	sub	sp, #80	; 0x50
 80054e0:	af04      	add	r7, sp, #16
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fa2d 	bl	800694c <SDMMC_GetPowerState>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054fc:	e0b8      	b.n	8005670 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	2b03      	cmp	r3, #3
 8005504:	d02f      	beq.n	8005566 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f001 fc14 	bl	8006d38 <SDMMC_CmdSendCID>
 8005510:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <SD_InitCard+0x40>
    {
      return errorstate;
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551a:	e0a9      	b.n	8005670 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2100      	movs	r1, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fa57 	bl	80069d6 <SDMMC_GetResponse>
 8005528:	4602      	mov	r2, r0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2104      	movs	r1, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fa4e 	bl	80069d6 <SDMMC_GetResponse>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2108      	movs	r1, #8
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fa45 	bl	80069d6 <SDMMC_GetResponse>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	210c      	movs	r1, #12
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fa3c 	bl	80069d6 <SDMMC_GetResponse>
 800555e:	4602      	mov	r2, r0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	2b03      	cmp	r3, #3
 800556c:	d00d      	beq.n	800558a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f107 020e 	add.w	r2, r7, #14
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fc1a 	bl	8006db2 <SDMMC_CmdSetRelAdd>
 800557e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <SD_InitCard+0xae>
    {
      return errorstate;
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	e072      	b.n	8005670 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	2b03      	cmp	r3, #3
 8005590:	d036      	beq.n	8005600 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005592:	89fb      	ldrh	r3, [r7, #14]
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f001 fbe4 	bl	8006d74 <SDMMC_CmdSendCSD>
 80055ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	e05b      	b.n	8005670 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fa09 	bl	80069d6 <SDMMC_GetResponse>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2104      	movs	r1, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 fa00 	bl	80069d6 <SDMMC_GetResponse>
 80055d6:	4602      	mov	r2, r0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2108      	movs	r1, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 f9f7 	bl	80069d6 <SDMMC_GetResponse>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	210c      	movs	r1, #12
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f9ee 	bl	80069d6 <SDMMC_GetResponse>
 80055fa:	4602      	mov	r2, r0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2104      	movs	r1, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f9e5 	bl	80069d6 <SDMMC_GetResponse>
 800560c:	4603      	mov	r3, r0
 800560e:	0d1a      	lsrs	r2, r3, #20
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005614:	f107 0310 	add.w	r3, r7, #16
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fc60 	bl	8004ee0 <HAL_SD_GetCardCSD>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800562a:	e021      	b.n	8005670 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	2200      	movs	r2, #0
 8005638:	461c      	mov	r4, r3
 800563a:	4615      	mov	r5, r2
 800563c:	4622      	mov	r2, r4
 800563e:	462b      	mov	r3, r5
 8005640:	4608      	mov	r0, r1
 8005642:	f001 fad3 	bl	8006bec <SDMMC_CmdSelDesel>
 8005646:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <SD_InitCard+0x176>
  {
    return errorstate;
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	e00e      	b.n	8005670 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681d      	ldr	r5, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	466c      	mov	r4, sp
 800565a:	f103 0210 	add.w	r2, r3, #16
 800565e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005664:	3304      	adds	r3, #4
 8005666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005668:	4628      	mov	r0, r5
 800566a:	f001 f917 	bl	800689c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3740      	adds	r7, #64	; 0x40
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}

08005678 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 face 	bl	8006c32 <SDMMC_CmdGoIdleState>
 8005696:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	e072      	b.n	8005788 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fae1 	bl	8006c6e <SDMMC_CmdOperCond>
 80056ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fab7 	bl	8006c32 <SDMMC_CmdGoIdleState>
 80056c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	e05b      	b.n	8005788 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d137      	bne.n	800574e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fae1 	bl	8006cac <SDMMC_CmdAppCommand>
 80056ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02d      	beq.n	800574e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056f6:	e047      	b.n	8005788 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 fad4 	bl	8006cac <SDMMC_CmdAppCommand>
 8005704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <SD_PowerON+0x98>
    {
      return errorstate;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	e03b      	b.n	8005788 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	491e      	ldr	r1, [pc, #120]	; (8005790 <SD_PowerON+0x118>)
 8005716:	4618      	mov	r0, r3
 8005718:	f001 faea 	bl	8006cf0 <SDMMC_CmdAppOperCommand>
 800571c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005728:	e02e      	b.n	8005788 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f950 	bl	80069d6 <SDMMC_GetResponse>
 8005736:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0fdb      	lsrs	r3, r3, #31
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <SD_PowerON+0xcc>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <SD_PowerON+0xce>
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]

    count++;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3301      	adds	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005754:	4293      	cmp	r3, r2
 8005756:	d802      	bhi.n	800575e <SD_PowerON+0xe6>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0cc      	beq.n	80056f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005764:	4293      	cmp	r3, r2
 8005766:	d902      	bls.n	800576e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800576c:	e00c      	b.n	8005788 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	645a      	str	r2, [r3, #68]	; 0x44
 800577e:	e002      	b.n	8005786 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	c1100000 	.word	0xc1100000

08005794 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80057a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a8:	e018      	b.n	80057dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f001 fb1c 	bl	8006df4 <SDMMC_CmdSendStatus>
 80057bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	e009      	b.n	80057dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f901 	bl	80069d6 <SDMMC_GetResponse>
 80057d4:	4602      	mov	r2, r0
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d03f      	beq.n	800587e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	e033      	b.n	800586c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f873 	bl	80068f4 <SDMMC_ReadFIFO>
 800580e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	3b01      	subs	r3, #1
 8005822:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3b01      	subs	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3b01      	subs	r3, #1
 800584e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	0e1b      	lsrs	r3, r3, #24
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	701a      	strb	r2, [r3, #0]
      tmp++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3b01      	subs	r3, #1
 8005864:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b07      	cmp	r3, #7
 8005870:	d9c8      	bls.n	8005804 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d043      	beq.n	8005928 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e037      	b.n	8005916 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	021a      	lsls	r2, r3, #8
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	041a      	lsls	r2, r3, #16
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	061a      	lsls	r2, r3, #24
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f107 0208 	add.w	r2, r7, #8
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f000 ffff 	bl	800690e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3301      	adds	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b07      	cmp	r3, #7
 800591a:	d9c4      	bls.n	80058a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e049      	b.n	80059d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f841 	bl	80059de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 fa00 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d001      	beq.n	8005a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e054      	b.n	8005ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a26      	ldr	r2, [pc, #152]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d01d      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a22      	ldr	r2, [pc, #136]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <HAL_TIM_Base_Start_IT+0xd8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1f      	ldr	r2, [pc, #124]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_TIM_Base_Start_IT+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d115      	bne.n	8005aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d015      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d011      	beq.n	8005ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e000      	b.n	8005ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40001800 	.word	0x40001800
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0202 	mvn.w	r2, #2
 8005b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f905 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8f7 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f908 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8db 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8cd 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8de 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0208 	mvn.w	r2, #8
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8b1 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8a3 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8b4 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f887 	bl	8005d36 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f879 	bl	8005d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f88a 	bl	8005d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10e      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0201 	mvn.w	r2, #1
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fc f9d4 	bl	8002010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d10e      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c80:	2b80      	cmp	r3, #128	; 0x80
 8005c82:	d107      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f91a 	bl	8005ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d107      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f90d 	bl	8005edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d10e      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f838 	bl	8005d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d10e      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d107      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0220 	mvn.w	r2, #32
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8cd 	bl	8005eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d00f      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3a      	ldr	r2, [pc, #232]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d108      	bne.n	8005dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d027      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d023      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <TIM_Base_SetConfig+0x128>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a27      	ldr	r2, [pc, #156]	; (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <TIM_Base_SetConfig+0x130>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <TIM_Base_SetConfig+0x134>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a24      	ldr	r2, [pc, #144]	; (8005eac <TIM_Base_SetConfig+0x138>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0xf8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d103      	bne.n	8005e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	615a      	str	r2, [r3, #20]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800
 8005ea8:	40001800 	.word	0x40001800
 8005eac:	40001c00 	.word	0x40001c00
 8005eb0:	40002000 	.word	0x40002000

08005eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e040      	b.n	8005f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc f9c4 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8b0 	bl	8006094 <UART_SetConfig>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e022      	b.n	8005f84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb08 	bl	800655c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fb8f 	bl	80066a0 <UART_CheckIdleState>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d171      	bne.n	8006088 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Transmit+0x24>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e06a      	b.n	800608a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2221      	movs	r2, #33	; 0x21
 8005fc0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fc2:	f7fc fc33 	bl	800282c <HAL_GetTick>
 8005fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe0:	d108      	bne.n	8005ff4 <HAL_UART_Transmit+0x68>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e003      	b.n	8005ffc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ffc:	e02c      	b.n	8006058 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2200      	movs	r2, #0
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fb80 	bl	800670e <UART_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e038      	b.n	800608a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3302      	adds	r3, #2
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e007      	b.n	8006046 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1cc      	bne.n	8005ffe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fb4d 	bl	800670e <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e005      	b.n	800608a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4ba6      	ldr	r3, [pc, #664]	; (8006358 <UART_SetConfig+0x2c4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a94      	ldr	r2, [pc, #592]	; (800635c <UART_SetConfig+0x2c8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d120      	bne.n	8006152 <UART_SetConfig+0xbe>
 8006110:	4b93      	ldr	r3, [pc, #588]	; (8006360 <UART_SetConfig+0x2cc>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d816      	bhi.n	800614c <UART_SetConfig+0xb8>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x90>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006135 	.word	0x08006135
 8006128:	08006141 	.word	0x08006141
 800612c:	0800613b 	.word	0x0800613b
 8006130:	08006147 	.word	0x08006147
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e150      	b.n	80063dc <UART_SetConfig+0x348>
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e14d      	b.n	80063dc <UART_SetConfig+0x348>
 8006140:	2304      	movs	r3, #4
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e14a      	b.n	80063dc <UART_SetConfig+0x348>
 8006146:	2308      	movs	r3, #8
 8006148:	77fb      	strb	r3, [r7, #31]
 800614a:	e147      	b.n	80063dc <UART_SetConfig+0x348>
 800614c:	2310      	movs	r3, #16
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e144      	b.n	80063dc <UART_SetConfig+0x348>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a83      	ldr	r2, [pc, #524]	; (8006364 <UART_SetConfig+0x2d0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d132      	bne.n	80061c2 <UART_SetConfig+0x12e>
 800615c:	4b80      	ldr	r3, [pc, #512]	; (8006360 <UART_SetConfig+0x2cc>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d828      	bhi.n	80061bc <UART_SetConfig+0x128>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0xdc>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061b1 	.word	0x080061b1
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061ab 	.word	0x080061ab
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	2300      	movs	r3, #0
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e118      	b.n	80063dc <UART_SetConfig+0x348>
 80061aa:	2302      	movs	r3, #2
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e115      	b.n	80063dc <UART_SetConfig+0x348>
 80061b0:	2304      	movs	r3, #4
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e112      	b.n	80063dc <UART_SetConfig+0x348>
 80061b6:	2308      	movs	r3, #8
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e10f      	b.n	80063dc <UART_SetConfig+0x348>
 80061bc:	2310      	movs	r3, #16
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e10c      	b.n	80063dc <UART_SetConfig+0x348>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a68      	ldr	r2, [pc, #416]	; (8006368 <UART_SetConfig+0x2d4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d120      	bne.n	800620e <UART_SetConfig+0x17a>
 80061cc:	4b64      	ldr	r3, [pc, #400]	; (8006360 <UART_SetConfig+0x2cc>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d013      	beq.n	8006202 <UART_SetConfig+0x16e>
 80061da:	2b30      	cmp	r3, #48	; 0x30
 80061dc:	d814      	bhi.n	8006208 <UART_SetConfig+0x174>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d009      	beq.n	80061f6 <UART_SetConfig+0x162>
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d810      	bhi.n	8006208 <UART_SetConfig+0x174>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <UART_SetConfig+0x15c>
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d006      	beq.n	80061fc <UART_SetConfig+0x168>
 80061ee:	e00b      	b.n	8006208 <UART_SetConfig+0x174>
 80061f0:	2300      	movs	r3, #0
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e0f2      	b.n	80063dc <UART_SetConfig+0x348>
 80061f6:	2302      	movs	r3, #2
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e0ef      	b.n	80063dc <UART_SetConfig+0x348>
 80061fc:	2304      	movs	r3, #4
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e0ec      	b.n	80063dc <UART_SetConfig+0x348>
 8006202:	2308      	movs	r3, #8
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e0e9      	b.n	80063dc <UART_SetConfig+0x348>
 8006208:	2310      	movs	r3, #16
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e0e6      	b.n	80063dc <UART_SetConfig+0x348>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a56      	ldr	r2, [pc, #344]	; (800636c <UART_SetConfig+0x2d8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d120      	bne.n	800625a <UART_SetConfig+0x1c6>
 8006218:	4b51      	ldr	r3, [pc, #324]	; (8006360 <UART_SetConfig+0x2cc>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006222:	2bc0      	cmp	r3, #192	; 0xc0
 8006224:	d013      	beq.n	800624e <UART_SetConfig+0x1ba>
 8006226:	2bc0      	cmp	r3, #192	; 0xc0
 8006228:	d814      	bhi.n	8006254 <UART_SetConfig+0x1c0>
 800622a:	2b80      	cmp	r3, #128	; 0x80
 800622c:	d009      	beq.n	8006242 <UART_SetConfig+0x1ae>
 800622e:	2b80      	cmp	r3, #128	; 0x80
 8006230:	d810      	bhi.n	8006254 <UART_SetConfig+0x1c0>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <UART_SetConfig+0x1a8>
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d006      	beq.n	8006248 <UART_SetConfig+0x1b4>
 800623a:	e00b      	b.n	8006254 <UART_SetConfig+0x1c0>
 800623c:	2300      	movs	r3, #0
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e0cc      	b.n	80063dc <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e0c9      	b.n	80063dc <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e0c6      	b.n	80063dc <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e0c3      	b.n	80063dc <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e0c0      	b.n	80063dc <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a44      	ldr	r2, [pc, #272]	; (8006370 <UART_SetConfig+0x2dc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x21c>
 8006264:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006272:	d017      	beq.n	80062a4 <UART_SetConfig+0x210>
 8006274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006278:	d817      	bhi.n	80062aa <UART_SetConfig+0x216>
 800627a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627e:	d00b      	beq.n	8006298 <UART_SetConfig+0x204>
 8006280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006284:	d811      	bhi.n	80062aa <UART_SetConfig+0x216>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <UART_SetConfig+0x1fe>
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d006      	beq.n	800629e <UART_SetConfig+0x20a>
 8006290:	e00b      	b.n	80062aa <UART_SetConfig+0x216>
 8006292:	2300      	movs	r3, #0
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0a1      	b.n	80063dc <UART_SetConfig+0x348>
 8006298:	2302      	movs	r3, #2
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e09e      	b.n	80063dc <UART_SetConfig+0x348>
 800629e:	2304      	movs	r3, #4
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e09b      	b.n	80063dc <UART_SetConfig+0x348>
 80062a4:	2308      	movs	r3, #8
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e098      	b.n	80063dc <UART_SetConfig+0x348>
 80062aa:	2310      	movs	r3, #16
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e095      	b.n	80063dc <UART_SetConfig+0x348>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2f      	ldr	r2, [pc, #188]	; (8006374 <UART_SetConfig+0x2e0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d125      	bne.n	8006306 <UART_SetConfig+0x272>
 80062ba:	4b29      	ldr	r3, [pc, #164]	; (8006360 <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c8:	d017      	beq.n	80062fa <UART_SetConfig+0x266>
 80062ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ce:	d817      	bhi.n	8006300 <UART_SetConfig+0x26c>
 80062d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d4:	d00b      	beq.n	80062ee <UART_SetConfig+0x25a>
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062da:	d811      	bhi.n	8006300 <UART_SetConfig+0x26c>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x254>
 80062e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e4:	d006      	beq.n	80062f4 <UART_SetConfig+0x260>
 80062e6:	e00b      	b.n	8006300 <UART_SetConfig+0x26c>
 80062e8:	2301      	movs	r3, #1
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e076      	b.n	80063dc <UART_SetConfig+0x348>
 80062ee:	2302      	movs	r3, #2
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e073      	b.n	80063dc <UART_SetConfig+0x348>
 80062f4:	2304      	movs	r3, #4
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e070      	b.n	80063dc <UART_SetConfig+0x348>
 80062fa:	2308      	movs	r3, #8
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e06d      	b.n	80063dc <UART_SetConfig+0x348>
 8006300:	2310      	movs	r3, #16
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e06a      	b.n	80063dc <UART_SetConfig+0x348>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <UART_SetConfig+0x2e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d138      	bne.n	8006382 <UART_SetConfig+0x2ee>
 8006310:	4b13      	ldr	r3, [pc, #76]	; (8006360 <UART_SetConfig+0x2cc>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800631a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800631e:	d017      	beq.n	8006350 <UART_SetConfig+0x2bc>
 8006320:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006324:	d82a      	bhi.n	800637c <UART_SetConfig+0x2e8>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632a:	d00b      	beq.n	8006344 <UART_SetConfig+0x2b0>
 800632c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006330:	d824      	bhi.n	800637c <UART_SetConfig+0x2e8>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <UART_SetConfig+0x2aa>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d006      	beq.n	800634a <UART_SetConfig+0x2b6>
 800633c:	e01e      	b.n	800637c <UART_SetConfig+0x2e8>
 800633e:	2300      	movs	r3, #0
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e04b      	b.n	80063dc <UART_SetConfig+0x348>
 8006344:	2302      	movs	r3, #2
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e048      	b.n	80063dc <UART_SetConfig+0x348>
 800634a:	2304      	movs	r3, #4
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e045      	b.n	80063dc <UART_SetConfig+0x348>
 8006350:	2308      	movs	r3, #8
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e042      	b.n	80063dc <UART_SetConfig+0x348>
 8006356:	bf00      	nop
 8006358:	efff69f3 	.word	0xefff69f3
 800635c:	40011000 	.word	0x40011000
 8006360:	40023800 	.word	0x40023800
 8006364:	40004400 	.word	0x40004400
 8006368:	40004800 	.word	0x40004800
 800636c:	40004c00 	.word	0x40004c00
 8006370:	40005000 	.word	0x40005000
 8006374:	40011400 	.word	0x40011400
 8006378:	40007800 	.word	0x40007800
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e02c      	b.n	80063dc <UART_SetConfig+0x348>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a72      	ldr	r2, [pc, #456]	; (8006550 <UART_SetConfig+0x4bc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d125      	bne.n	80063d8 <UART_SetConfig+0x344>
 800638c:	4b71      	ldr	r3, [pc, #452]	; (8006554 <UART_SetConfig+0x4c0>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006396:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800639a:	d017      	beq.n	80063cc <UART_SetConfig+0x338>
 800639c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063a0:	d817      	bhi.n	80063d2 <UART_SetConfig+0x33e>
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d00b      	beq.n	80063c0 <UART_SetConfig+0x32c>
 80063a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ac:	d811      	bhi.n	80063d2 <UART_SetConfig+0x33e>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <UART_SetConfig+0x326>
 80063b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b6:	d006      	beq.n	80063c6 <UART_SetConfig+0x332>
 80063b8:	e00b      	b.n	80063d2 <UART_SetConfig+0x33e>
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e00d      	b.n	80063dc <UART_SetConfig+0x348>
 80063c0:	2302      	movs	r3, #2
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e00a      	b.n	80063dc <UART_SetConfig+0x348>
 80063c6:	2304      	movs	r3, #4
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e007      	b.n	80063dc <UART_SetConfig+0x348>
 80063cc:	2308      	movs	r3, #8
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e004      	b.n	80063dc <UART_SetConfig+0x348>
 80063d2:	2310      	movs	r3, #16
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e001      	b.n	80063dc <UART_SetConfig+0x348>
 80063d8:	2310      	movs	r3, #16
 80063da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e4:	d15b      	bne.n	800649e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d828      	bhi.n	800643e <UART_SetConfig+0x3aa>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x360>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	0800643f 	.word	0x0800643f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800643f 	.word	0x0800643f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fd fd18 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800641c:	61b8      	str	r0, [r7, #24]
        break;
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006420:	f7fd fd28 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8006424:	61b8      	str	r0, [r7, #24]
        break;
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b4b      	ldr	r3, [pc, #300]	; (8006558 <UART_SetConfig+0x4c4>)
 800642a:	61bb      	str	r3, [r7, #24]
        break;
 800642c:	e00c      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fd fc3b 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8006432:	61b8      	str	r0, [r7, #24]
        break;
 8006434:	e008      	b.n	8006448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643a:	61bb      	str	r3, [r7, #24]
        break;
 800643c:	e004      	b.n	8006448 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	77bb      	strb	r3, [r7, #30]
        break;
 8006446:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d074      	beq.n	8006538 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	005a      	lsls	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	441a      	add	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d916      	bls.n	8006498 <UART_SetConfig+0x404>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d212      	bcs.n	8006498 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f023 030f 	bic.w	r3, r3, #15
 800647a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	b29a      	uxth	r2, r3
 8006488:	89fb      	ldrh	r3, [r7, #14]
 800648a:	4313      	orrs	r3, r2
 800648c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	89fa      	ldrh	r2, [r7, #14]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e04f      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	77bb      	strb	r3, [r7, #30]
 800649c:	e04c      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800649e:	7ffb      	ldrb	r3, [r7, #31]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d828      	bhi.n	80064f6 <UART_SetConfig+0x462>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <UART_SetConfig+0x418>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064f7 	.word	0x080064f7
 80064bc:	080064e7 	.word	0x080064e7
 80064c0:	080064f7 	.word	0x080064f7
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	080064f7 	.word	0x080064f7
 80064cc:	080064ef 	.word	0x080064ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7fd fcbc 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80064d4:	61b8      	str	r0, [r7, #24]
        break;
 80064d6:	e013      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d8:	f7fd fccc 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 80064dc:	61b8      	str	r0, [r7, #24]
        break;
 80064de:	e00f      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e0:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <UART_SetConfig+0x4c4>)
 80064e2:	61bb      	str	r3, [r7, #24]
        break;
 80064e4:	e00c      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e6:	f7fd fbdf 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80064ea:	61b8      	str	r0, [r7, #24]
        break;
 80064ec:	e008      	b.n	8006500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f2:	61bb      	str	r3, [r7, #24]
        break;
 80064f4:	e004      	b.n	8006500 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	77bb      	strb	r3, [r7, #30]
        break;
 80064fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d018      	beq.n	8006538 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	085a      	lsrs	r2, r3, #1
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d909      	bls.n	8006534 <UART_SetConfig+0x4a0>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006526:	d205      	bcs.n	8006534 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e001      	b.n	8006538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006544:	7fbb      	ldrb	r3, [r7, #30]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40007c00 	.word	0x40007c00
 8006554:	40023800 	.word	0x40023800
 8006558:	00f42400 	.word	0x00f42400

0800655c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01a      	beq.n	8006672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800665a:	d10a      	bne.n	8006672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b0:	f7fc f8bc 	bl	800282c <HAL_GetTick>
 80066b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d10e      	bne.n	80066e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f81b 	bl	800670e <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e011      	b.n	8006706 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b09c      	sub	sp, #112	; 0x70
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671e:	e0a7      	b.n	8006870 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	f000 80a3 	beq.w	8006870 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fc f87f 	bl	800282c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <UART_WaitOnFlagUntilTimeout+0x32>
 800673a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673c:	2b00      	cmp	r3, #0
 800673e:	d13f      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800674e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006754:	667b      	str	r3, [r7, #100]	; 0x64
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006760:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006764:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800676c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e6      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	663b      	str	r3, [r7, #96]	; 0x60
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006792:	64ba      	str	r2, [r7, #72]	; 0x48
 8006794:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e5      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e068      	b.n	8006892 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d050      	beq.n	8006870 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067dc:	d148      	bne.n	8006870 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
 8006808:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800680c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	66bb      	str	r3, [r7, #104]	; 0x68
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800683a:	623a      	str	r2, [r7, #32]
 800683c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69f9      	ldr	r1, [r7, #28]
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	61bb      	str	r3, [r7, #24]
   return(result);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e010      	b.n	8006892 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4013      	ands	r3, r2
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	429a      	cmp	r2, r3
 800688c:	f43f af48 	beq.w	8006720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3770      	adds	r7, #112	; 0x70
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800689c:	b084      	sub	sp, #16
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	f107 001c 	add.w	r0, r7, #28
 80068aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80068b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80068b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80068b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80068ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80068be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80068c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80068c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <SDMMC_Init+0x54>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	b004      	add	sp, #16
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	ffff8100 	.word	0xffff8100

080068f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2203      	movs	r2, #3
 800693c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0303 	and.w	r3, r3, #3
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006986:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800698c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <SDMMC_SendCommand+0x50>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	fffff000 	.word	0xfffff000

080069bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	b2db      	uxtb	r3, r3
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3314      	adds	r3, #20
 80069e4:	461a      	mov	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
}  
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0

}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a62:	2310      	movs	r3, #16
 8006a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a74:	f107 0308 	add.w	r3, r7, #8
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ff74 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a84:	2110      	movs	r1, #16
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9d6 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006aa6:	2311      	movs	r3, #17
 8006aa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ab8:	f107 0308 	add.w	r3, r7, #8
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff ff52 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac8:	2111      	movs	r1, #17
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9b4 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006ad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006aea:	2312      	movs	r3, #18
 8006aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006afc:	f107 0308 	add.w	r3, r7, #8
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff30 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0c:	2112      	movs	r1, #18
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f992 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b16:	69fb      	ldr	r3, [r7, #28]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006b2e:	2318      	movs	r3, #24
 8006b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff0e 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	2118      	movs	r1, #24
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f970 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006b58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006b72:	2319      	movs	r3, #25
 8006b74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff feec 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b94:	2119      	movs	r1, #25
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f94e 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bb8:	2340      	movs	r3, #64	; 0x40
 8006bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fecb 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006bd2:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <SDMMC_CmdStopTransfer+0x40>)
 8006bd4:	210c      	movs	r1, #12
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f92e 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bde:	69fb      	ldr	r3, [r7, #28]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	05f5e100 	.word	0x05f5e100

08006bec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006bfc:	2307      	movs	r3, #7
 8006bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c0c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c0e:	f107 0310 	add.w	r3, r7, #16
 8006c12:	4619      	mov	r1, r3
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fea7 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1e:	2107      	movs	r1, #7
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f909 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006c26:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b088      	sub	sp, #32
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff fe86 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb23 	bl	80072a8 <SDMMC_GetCmdError>
 8006c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b088      	sub	sp, #32
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fe67 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fab6 	bl	800720c <SDMMC_GetCmdResp7>
 8006ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006cba:	2337      	movs	r3, #55	; 0x37
 8006cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ccc:	f107 0308 	add.w	r3, r7, #8
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fe48 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cdc:	2137      	movs	r1, #55	; 0x37
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8aa 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <SDMMC_CmdAppOperCommand+0x44>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d02:	2329      	movs	r3, #41	; 0x29
 8006d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fe24 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9bf 	bl	80070a4 <SDMMC_GetCmdResp3>
 8006d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d28:	69fb      	ldr	r3, [r7, #28]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	80100000 	.word	0x80100000

08006d38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d44:	2302      	movs	r3, #2
 8006d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006d48:	23c0      	movs	r3, #192	; 0xc0
 8006d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe03 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f956 	bl	8007014 <SDMMC_GetCmdResp2>
 8006d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d82:	2309      	movs	r3, #9
 8006d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006d86:	23c0      	movs	r3, #192	; 0xc0
 8006d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d94:	f107 0308 	add.w	r3, r7, #8
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fde4 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f937 	bl	8007014 <SDMMC_GetCmdResp2>
 8006da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b088      	sub	sp, #32
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fdc5 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	2103      	movs	r1, #3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f99c 	bl	8007120 <SDMMC_GetCmdResp6>
 8006de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dea:	69fb      	ldr	r3, [r7, #28]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3720      	adds	r7, #32
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e02:	230d      	movs	r3, #13
 8006e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e06:	2340      	movs	r3, #64	; 0x40
 8006e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fda4 	bl	8006968 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e24:	210d      	movs	r1, #13
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f806 	bl	8006e38 <SDMMC_GetCmdResp1>
 8006e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	460b      	mov	r3, r1
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e46:	4b70      	ldr	r3, [pc, #448]	; (8007008 <SDMMC_GetCmdResp1+0x1d0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a70      	ldr	r2, [pc, #448]	; (800700c <SDMMC_GetCmdResp1+0x1d4>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	0a5a      	lsrs	r2, r3, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	61fa      	str	r2, [r7, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e68:	e0c9      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0ef      	beq.n	8006e5a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ea      	bne.n	8006e5a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2204      	movs	r2, #4
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e96:	2304      	movs	r3, #4
 8006e98:	e0b1      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0a6      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	22c5      	movs	r2, #197	; 0xc5
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fd80 	bl	80069bc <SDMMC_GetCommandResponse>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d001      	beq.n	8006eca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e099      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006eca:	2100      	movs	r1, #0
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff fd82 	bl	80069d6 <SDMMC_GetResponse>
 8006ed2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4b4e      	ldr	r3, [pc, #312]	; (8007010 <SDMMC_GetCmdResp1+0x1d8>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e08d      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da02      	bge.n	8006eee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eec:	e087      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006ef8:	2340      	movs	r3, #64	; 0x40
 8006efa:	e080      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	e079      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f18:	e071      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f28:	e069      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f38:	e061      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f48:	e059      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f58:	e051      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f68:	e049      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f78:	e041      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f88:	e039      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f98:	e031      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fa8:	e029      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fb8:	e021      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fc8:	e019      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fd8:	e011      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fe8:	e009      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ff4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ff8:	e001      	b.n	8006ffe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000000 	.word	0x20000000
 800700c:	10624dd3 	.word	0x10624dd3
 8007010:	fdffe008 	.word	0xfdffe008

08007014 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800701c:	4b1f      	ldr	r3, [pc, #124]	; (800709c <SDMMC_GetCmdResp2+0x88>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <SDMMC_GetCmdResp2+0x8c>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	0a5b      	lsrs	r3, r3, #9
 8007028:	f241 3288 	movw	r2, #5000	; 0x1388
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1e5a      	subs	r2, r3, #1
 8007036:	60fa      	str	r2, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800703c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007040:	e026      	b.n	8007090 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0ef      	beq.n	8007032 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1ea      	bne.n	8007032 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2204      	movs	r2, #4
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800706e:	2304      	movs	r3, #4
 8007070:	e00e      	b.n	8007090 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007084:	2301      	movs	r3, #1
 8007086:	e003      	b.n	8007090 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	22c5      	movs	r2, #197	; 0xc5
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000000 	.word	0x20000000
 80070a0:	10624dd3 	.word	0x10624dd3

080070a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <SDMMC_GetCmdResp3+0x74>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1a      	ldr	r2, [pc, #104]	; (800711c <SDMMC_GetCmdResp3+0x78>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	0a5b      	lsrs	r3, r3, #9
 80070b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070bc:	fb02 f303 	mul.w	r3, r2, r3
 80070c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	60fa      	str	r2, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070d0:	e01b      	b.n	800710a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0ef      	beq.n	80070c2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1ea      	bne.n	80070c2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2204      	movs	r2, #4
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070fe:	2304      	movs	r3, #4
 8007100:	e003      	b.n	800710a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	22c5      	movs	r2, #197	; 0xc5
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000000 	.word	0x20000000
 800711c:	10624dd3 	.word	0x10624dd3

08007120 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	460b      	mov	r3, r1
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800712e:	4b35      	ldr	r3, [pc, #212]	; (8007204 <SDMMC_GetCmdResp6+0xe4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a35      	ldr	r2, [pc, #212]	; (8007208 <SDMMC_GetCmdResp6+0xe8>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	0a5b      	lsrs	r3, r3, #9
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	1e5a      	subs	r2, r3, #1
 8007148:	61fa      	str	r2, [r7, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800714e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007152:	e052      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007158:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0ef      	beq.n	8007144 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1ea      	bne.n	8007144 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2204      	movs	r2, #4
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007180:	2304      	movs	r3, #4
 8007182:	e03a      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007196:	2301      	movs	r3, #1
 8007198:	e02f      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fc0e 	bl	80069bc <SDMMC_GetCommandResponse>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d001      	beq.n	80071ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e025      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	22c5      	movs	r2, #197	; 0xc5
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80071b4:	2100      	movs	r1, #0
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fc0d 	bl	80069d6 <SDMMC_GetResponse>
 80071bc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e011      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071e4:	e009      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80071f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071f4:	e001      	b.n	80071fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000000 	.word	0x20000000
 8007208:	10624dd3 	.word	0x10624dd3

0800720c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007214:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <SDMMC_GetCmdResp7+0x94>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a22      	ldr	r2, [pc, #136]	; (80072a4 <SDMMC_GetCmdResp7+0x98>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	0a5b      	lsrs	r3, r3, #9
 8007220:	f241 3288 	movw	r2, #5000	; 0x1388
 8007224:	fb02 f303 	mul.w	r3, r2, r3
 8007228:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1e5a      	subs	r2, r3, #1
 800722e:	60fa      	str	r2, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007234:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007238:	e02c      	b.n	8007294 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0ef      	beq.n	800722a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ea      	bne.n	800722a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2204      	movs	r2, #4
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007266:	2304      	movs	r3, #4
 8007268:	e014      	b.n	8007294 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800727c:	2301      	movs	r3, #1
 800727e:	e009      	b.n	8007294 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007292:	2300      	movs	r3, #0
  
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	20000000 	.word	0x20000000
 80072a4:	10624dd3 	.word	0x10624dd3

080072a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <SDMMC_GetCmdError+0x50>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a11      	ldr	r2, [pc, #68]	; (80072fc <SDMMC_GetCmdError+0x54>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	0a5b      	lsrs	r3, r3, #9
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	60fa      	str	r2, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072d4:	e009      	b.n	80072ea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f1      	beq.n	80072c6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	22c5      	movs	r2, #197	; 0xc5
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20000000 	.word	0x20000000
 80072fc:	10624dd3 	.word	0x10624dd3

08007300 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007304:	4904      	ldr	r1, [pc, #16]	; (8007318 <MX_FATFS_Init+0x18>)
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <MX_FATFS_Init+0x1c>)
 8007308:	f002 fbfe 	bl	8009b08 <FATFS_LinkDriver>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <MX_FATFS_Init+0x20>)
 8007312:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}
 8007318:	200003e8 	.word	0x200003e8
 800731c:	0800bc9c 	.word	0x0800bc9c
 8007320:	200003e4 	.word	0x200003e4

08007324 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007328:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800732a:	4618      	mov	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800733e:	f000 f888 	bl	8007452 <BSP_SD_IsDetected>
 8007342:	4603      	mov	r3, r0
 8007344:	2b01      	cmp	r3, #1
 8007346:	d001      	beq.n	800734c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007348:	2302      	movs	r3, #2
 800734a:	e005      	b.n	8007358 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800734c:	4804      	ldr	r0, [pc, #16]	; (8007360 <BSP_SD_Init+0x2c>)
 800734e:	f7fd f9c7 	bl	80046e0 <HAL_SD_Init>
 8007352:	4603      	mov	r3, r0
 8007354:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007356:	79fb      	ldrb	r3, [r7, #7]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000094 	.word	0x20000094

08007364 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	4806      	ldr	r0, [pc, #24]	; (8007394 <BSP_SD_ReadBlocks_DMA+0x30>)
 800737c:	f7fd fa68 	bl	8004850 <HAL_SD_ReadBlocks_DMA>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000094 	.word	0x20000094

08007398 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	68f9      	ldr	r1, [r7, #12]
 80073ae:	4806      	ldr	r0, [pc, #24]	; (80073c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80073b0:	f7fd fb30 	bl	8004a14 <HAL_SD_WriteBlocks_DMA>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000094 	.word	0x20000094

080073cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <BSP_SD_GetCardState+0x1c>)
 80073d2:	f7fd ff55 	bl	8005280 <HAL_SD_GetCardState>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b04      	cmp	r3, #4
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000094 	.word	0x20000094

080073ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4803      	ldr	r0, [pc, #12]	; (8007404 <BSP_SD_GetCardInfo+0x18>)
 80073f8:	f7fd ff16 	bl	8005228 <HAL_SD_GetCardInfo>
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000094 	.word	0x20000094

08007408 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007410:	f000 f818 	bl	8007444 <BSP_SD_AbortCallback>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007424:	f000 f9a8 	bl	8007778 <BSP_SD_WriteCpltCallback>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007438:	f000 f9aa 	bl	8007790 <BSP_SD_ReadCpltCallback>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0

}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007458:	2301      	movs	r3, #1
 800745a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800745c:	f000 f80c 	bl	8007478 <BSP_PlatformIsDetected>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007466:	2300      	movs	r3, #0
 8007468:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	b2db      	uxtb	r3, r3
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800747e:	2301      	movs	r3, #1
 8007480:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007486:	4806      	ldr	r0, [pc, #24]	; (80074a0 <BSP_PlatformIsDetected+0x28>)
 8007488:	f7fc f834 	bl	80034f4 <HAL_GPIO_ReadPin>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007492:	2300      	movs	r3, #0
 8007494:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007496:	79fb      	ldrb	r3, [r7, #7]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40020800 	.word	0x40020800

080074a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80074ac:	f7fb f9be 	bl	800282c <HAL_GetTick>
 80074b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80074b2:	e006      	b.n	80074c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074b4:	f7ff ff8a 	bl	80073cc <BSP_SD_GetCardState>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	e009      	b.n	80074d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80074c2:	f7fb f9b3 	bl	800282c <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d8f0      	bhi.n	80074b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <SD_CheckStatus+0x38>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80074f0:	f7ff ff6c 	bl	80073cc <BSP_SD_GetCardState>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <SD_CheckStatus+0x38>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <SD_CheckStatus+0x38>)
 8007508:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800750a:	4b03      	ldr	r3, [pc, #12]	; (8007518 <SD_CheckStatus+0x38>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000009 	.word	0x20000009

0800751c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007526:	f7ff ff05 	bl	8007334 <BSP_SD_Init>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d107      	bne.n	8007540 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff ffd4 	bl	80074e0 <SD_CheckStatus>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <SD_initialize+0x34>)
 800753e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <SD_initialize+0x34>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000009 	.word	0x20000009

08007554 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ffbd 	bl	80074e0 <SD_CheckStatus>
 8007566:	4603      	mov	r3, r0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007584:	f247 5030 	movw	r0, #30000	; 0x7530
 8007588:	f7ff ff8c 	bl	80074a4 <SD_CheckStatusWithTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	da01      	bge.n	8007596 <SD_read+0x26>
  {
    return res;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	e03b      	b.n	800760e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	f7ff fee2 	bl	8007364 <BSP_SD_ReadBlocks_DMA>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d132      	bne.n	800760c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80075a6:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <SD_read+0xa8>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80075ac:	f7fb f93e 	bl	800282c <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80075b2:	bf00      	nop
 80075b4:	4b18      	ldr	r3, [pc, #96]	; (8007618 <SD_read+0xa8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <SD_read+0x5e>
 80075bc:	f7fb f936 	bl	800282c <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d9f2      	bls.n	80075b4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <SD_read+0xa8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
 80075da:	e017      	b.n	800760c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <SD_read+0xa8>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80075e2:	f7fb f923 	bl	800282c <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075e8:	e007      	b.n	80075fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075ea:	f7ff feef 	bl	80073cc <BSP_SD_GetCardState>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <SD_read+0x8a>
          {
            res = RES_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80075f8:	e008      	b.n	800760c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075fa:	f7fb f917 	bl	800282c <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f247 522f 	movw	r2, #29999	; 0x752f
 8007608:	4293      	cmp	r3, r2
 800760a:	d9ee      	bls.n	80075ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000850 	.word	0x20000850

0800761c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007630:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <SD_write+0xa8>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007636:	f247 5030 	movw	r0, #30000	; 0x7530
 800763a:	f7ff ff33 	bl	80074a4 <SD_CheckStatusWithTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	da01      	bge.n	8007648 <SD_write+0x2c>
  {
    return res;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	e038      	b.n	80076ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	68b8      	ldr	r0, [r7, #8]
 800764e:	f7ff fea3 	bl	8007398 <BSP_SD_WriteBlocks_DMA>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d12f      	bne.n	80076b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007658:	f7fb f8e8 	bl	800282c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800765e:	bf00      	nop
 8007660:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <SD_write+0xa8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <SD_write+0x5e>
 8007668:	f7fb f8e0 	bl	800282c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	f247 522f 	movw	r2, #29999	; 0x752f
 8007676:	4293      	cmp	r3, r2
 8007678:	d9f2      	bls.n	8007660 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <SD_write+0xa8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	e017      	b.n	80076b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <SD_write+0xa8>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800768e:	f7fb f8cd 	bl	800282c <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007694:	e007      	b.n	80076a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007696:	f7ff fe99 	bl	80073cc <BSP_SD_GetCardState>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <SD_write+0x8a>
          {
            res = RES_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	75fb      	strb	r3, [r7, #23]
            break;
 80076a4:	e008      	b.n	80076b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80076a6:	f7fb f8c1 	bl	800282c <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d9ee      	bls.n	8007696 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	2000084c 	.word	0x2000084c

080076c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08c      	sub	sp, #48	; 0x30
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	603a      	str	r2, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
 80076d4:	460b      	mov	r3, r1
 80076d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076de:	4b25      	ldr	r3, [pc, #148]	; (8007774 <SD_ioctl+0xac>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <SD_ioctl+0x28>
 80076ec:	2303      	movs	r3, #3
 80076ee:	e03c      	b.n	800776a <SD_ioctl+0xa2>

  switch (cmd)
 80076f0:	79bb      	ldrb	r3, [r7, #6]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d834      	bhi.n	8007760 <SD_ioctl+0x98>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <SD_ioctl+0x34>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007715 	.word	0x08007715
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007747 	.word	0x08007747
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007712:	e028      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fe67 	bl	80073ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800771e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800772a:	e01c      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fe5b 	bl	80073ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	b29a      	uxth	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007744:	e00f      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fe4e 	bl	80073ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	0a5a      	lsrs	r2, r3, #9
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800775e:	e002      	b.n	8007766 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007760:	2304      	movs	r3, #4
 8007762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800776a:	4618      	mov	r0, r3
 800776c:	3730      	adds	r7, #48	; 0x30
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000009 	.word	0x20000009

08007778 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <BSP_SD_WriteCpltCallback+0x14>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	2000084c 	.word	0x2000084c

08007790 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <BSP_SD_ReadCpltCallback+0x14>)
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	20000850 	.word	0x20000850

080077a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <disk_status+0x30>)
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	79fa      	ldrb	r2, [r7, #7]
 80077c0:	4905      	ldr	r1, [pc, #20]	; (80077d8 <disk_status+0x30>)
 80077c2:	440a      	add	r2, r1
 80077c4:	7a12      	ldrb	r2, [r2, #8]
 80077c6:	4610      	mov	r0, r2
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	2000087c 	.word	0x2000087c

080077dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4a0d      	ldr	r2, [pc, #52]	; (8007824 <disk_initialize+0x48>)
 80077ee:	5cd3      	ldrb	r3, [r2, r3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d111      	bne.n	8007818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	4a0b      	ldr	r2, [pc, #44]	; (8007824 <disk_initialize+0x48>)
 80077f8:	2101      	movs	r1, #1
 80077fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <disk_initialize+0x48>)
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	79fa      	ldrb	r2, [r7, #7]
 800780a:	4906      	ldr	r1, [pc, #24]	; (8007824 <disk_initialize+0x48>)
 800780c:	440a      	add	r2, r1
 800780e:	7a12      	ldrb	r2, [r2, #8]
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000087c 	.word	0x2000087c

08007828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	4a0a      	ldr	r2, [pc, #40]	; (8007864 <disk_read+0x3c>)
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	689c      	ldr	r4, [r3, #8]
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4a07      	ldr	r2, [pc, #28]	; (8007864 <disk_read+0x3c>)
 8007848:	4413      	add	r3, r2
 800784a:	7a18      	ldrb	r0, [r3, #8]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	47a0      	blx	r4
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
  return res;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
 8007862:	bf00      	nop
 8007864:	2000087c 	.word	0x2000087c

08007868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <disk_write+0x3c>)
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68dc      	ldr	r4, [r3, #12]
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4a07      	ldr	r2, [pc, #28]	; (80078a4 <disk_write+0x3c>)
 8007888:	4413      	add	r3, r2
 800788a:	7a18      	ldrb	r0, [r3, #8]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	47a0      	blx	r4
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
  return res;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
}
 800789a:	4618      	mov	r0, r3
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd90      	pop	{r4, r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000087c 	.word	0x2000087c

080078a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	603a      	str	r2, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
 80078b4:	460b      	mov	r3, r1
 80078b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	4a09      	ldr	r2, [pc, #36]	; (80078e0 <disk_ioctl+0x38>)
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	79fa      	ldrb	r2, [r7, #7]
 80078c6:	4906      	ldr	r1, [pc, #24]	; (80078e0 <disk_ioctl+0x38>)
 80078c8:	440a      	add	r2, r1
 80078ca:	7a10      	ldrb	r0, [r2, #8]
 80078cc:	79b9      	ldrb	r1, [r7, #6]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	2000087c 	.word	0x2000087c

080078e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3301      	adds	r3, #1
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	b21a      	sxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b21b      	sxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b21b      	sxth	r3, r3
 8007904:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007906:	89fb      	ldrh	r3, [r7, #14]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3303      	adds	r3, #3
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	3202      	adds	r2, #2
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	3201      	adds	r2, #1
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
	return rv;
 800794c:	68fb      	ldr	r3, [r7, #12]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	887a      	ldrh	r2, [r7, #2]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	887b      	ldrh	r3, [r7, #2]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	887a      	ldrh	r2, [r7, #2]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	1c53      	adds	r3, r2, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	6179      	str	r1, [r7, #20]
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f1      	bne.n	8007a02 <mem_cpy+0x1a>
	}
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	617a      	str	r2, [r7, #20]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f3      	bne.n	8007a3a <mem_set+0x10>
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	61fa      	str	r2, [r7, #28]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	61ba      	str	r2, [r7, #24]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	607b      	str	r3, [r7, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <mem_cmp+0x40>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0eb      	beq.n	8007a78 <mem_cmp+0x18>

	return r;
 8007aa0:	697b      	ldr	r3, [r7, #20]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3724      	adds	r7, #36	; 0x24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ab8:	e002      	b.n	8007ac0 <chk_chr+0x12>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3301      	adds	r3, #1
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <chk_chr+0x26>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d1f2      	bne.n	8007aba <chk_chr+0xc>
	return *str;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	e029      	b.n	8007b4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <chk_lock+0xb4>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	4413      	add	r3, r2
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01d      	beq.n	8007b42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b06:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <chk_lock+0xb4>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	4413      	add	r3, r2
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d116      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <chk_lock+0xb4>)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	4413      	add	r3, r2
 8007b20:	3304      	adds	r3, #4
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d10c      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <chk_lock+0xb4>)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4413      	add	r3, r2
 8007b34:	3308      	adds	r3, #8
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d102      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b40:	e007      	b.n	8007b52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d9d2      	bls.n	8007af8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d109      	bne.n	8007b6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <chk_lock+0x80>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d101      	bne.n	8007b68 <chk_lock+0x84>
 8007b64:	2300      	movs	r3, #0
 8007b66:	e010      	b.n	8007b8a <chk_lock+0xa6>
 8007b68:	2312      	movs	r3, #18
 8007b6a:	e00e      	b.n	8007b8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d108      	bne.n	8007b84 <chk_lock+0xa0>
 8007b72:	4a09      	ldr	r2, [pc, #36]	; (8007b98 <chk_lock+0xb4>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	4413      	add	r3, r2
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b82:	d101      	bne.n	8007b88 <chk_lock+0xa4>
 8007b84:	2310      	movs	r3, #16
 8007b86:	e000      	b.n	8007b8a <chk_lock+0xa6>
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	2000085c 	.word	0x2000085c

08007b9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	607b      	str	r3, [r7, #4]
 8007ba6:	e002      	b.n	8007bae <enq_lock+0x12>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3301      	adds	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d806      	bhi.n	8007bc2 <enq_lock+0x26>
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <enq_lock+0x40>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4413      	add	r3, r2
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f2      	bne.n	8007ba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	bf14      	ite	ne
 8007bc8:	2301      	movne	r3, #1
 8007bca:	2300      	moveq	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	2000085c 	.word	0x2000085c

08007be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e01f      	b.n	8007c30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bf0:	4a41      	ldr	r2, [pc, #260]	; (8007cf8 <inc_lock+0x118>)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d113      	bne.n	8007c2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007c02:	4a3d      	ldr	r2, [pc, #244]	; (8007cf8 <inc_lock+0x118>)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	4413      	add	r3, r2
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d109      	bne.n	8007c2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c16:	4a38      	ldr	r2, [pc, #224]	; (8007cf8 <inc_lock+0x118>)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3308      	adds	r3, #8
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d006      	beq.n	8007c38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d9dc      	bls.n	8007bf0 <inc_lock+0x10>
 8007c36:	e000      	b.n	8007c3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d132      	bne.n	8007ca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e002      	b.n	8007c4c <inc_lock+0x6c>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d806      	bhi.n	8007c60 <inc_lock+0x80>
 8007c52:	4a29      	ldr	r2, [pc, #164]	; (8007cf8 <inc_lock+0x118>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f2      	bne.n	8007c46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d101      	bne.n	8007c6a <inc_lock+0x8a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e040      	b.n	8007cec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4922      	ldr	r1, [pc, #136]	; (8007cf8 <inc_lock+0x118>)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	440b      	add	r3, r1
 8007c76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	491e      	ldr	r1, [pc, #120]	; (8007cf8 <inc_lock+0x118>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	440b      	add	r3, r1
 8007c84:	3304      	adds	r3, #4
 8007c86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	491a      	ldr	r1, [pc, #104]	; (8007cf8 <inc_lock+0x118>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	440b      	add	r3, r1
 8007c94:	3308      	adds	r3, #8
 8007c96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <inc_lock+0x118>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	4413      	add	r3, r2
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <inc_lock+0xe0>
 8007cac:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <inc_lock+0x118>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	4413      	add	r3, r2
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <inc_lock+0xe0>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e015      	b.n	8007cec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <inc_lock+0xf8>
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <inc_lock+0x118>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	4413      	add	r3, r2
 8007cce:	330c      	adds	r3, #12
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	e001      	b.n	8007cdc <inc_lock+0xfc>
 8007cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cdc:	4906      	ldr	r1, [pc, #24]	; (8007cf8 <inc_lock+0x118>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	440b      	add	r3, r1
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3301      	adds	r3, #1
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	2000085c 	.word	0x2000085c

08007cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d825      	bhi.n	8007d5c <dec_lock+0x60>
		n = Files[i].ctr;
 8007d10:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <dec_lock+0x74>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	4413      	add	r3, r2
 8007d18:	330c      	adds	r3, #12
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d1e:	89fb      	ldrh	r3, [r7, #14]
 8007d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d24:	d101      	bne.n	8007d2a <dec_lock+0x2e>
 8007d26:	2300      	movs	r3, #0
 8007d28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <dec_lock+0x3a>
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d36:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <dec_lock+0x74>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4413      	add	r3, r2
 8007d3e:	330c      	adds	r3, #12
 8007d40:	89fa      	ldrh	r2, [r7, #14]
 8007d42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <dec_lock+0x5a>
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <dec_lock+0x74>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	4413      	add	r3, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	737b      	strb	r3, [r7, #13]
 8007d5a:	e001      	b.n	8007d60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d60:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000085c 	.word	0x2000085c

08007d74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e010      	b.n	8007da4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d82:	4a0d      	ldr	r2, [pc, #52]	; (8007db8 <clear_lock+0x44>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	4413      	add	r3, r2
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d105      	bne.n	8007d9e <clear_lock+0x2a>
 8007d92:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <clear_lock+0x44>)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	4413      	add	r3, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d9eb      	bls.n	8007d82 <clear_lock+0xe>
	}
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	2000085c 	.word	0x2000085c

08007dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	78db      	ldrb	r3, [r3, #3]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d034      	beq.n	8007e3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7858      	ldrb	r0, [r3, #1]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007de0:	2301      	movs	r3, #1
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	f7ff fd40 	bl	8007868 <disk_write>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	e022      	b.n	8007e3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d217      	bcs.n	8007e3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e010      	b.n	8007e34 <sync_window+0x78>
					wsect += fs->fsize;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7858      	ldrb	r0, [r3, #1]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e26:	2301      	movs	r3, #1
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	f7ff fd1d 	bl	8007868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d8eb      	bhi.n	8007e12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d01b      	beq.n	8007e94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffad 	bl	8007dbc <sync_window>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d113      	bne.n	8007e94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7858      	ldrb	r0, [r3, #1]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e76:	2301      	movs	r3, #1
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	f7ff fcd5 	bl	8007828 <disk_read>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295
 8007e88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff87 	bl	8007dbc <sync_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d158      	bne.n	8007f6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d148      	bne.n	8007f52 <sync_fs+0xb2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d144      	bne.n	8007f52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3330      	adds	r3, #48	; 0x30
 8007ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fda9 	bl	8007a2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3330      	adds	r3, #48	; 0x30
 8007edc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ee0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fd38 	bl	800795a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3330      	adds	r3, #48	; 0x30
 8007eee:	4921      	ldr	r1, [pc, #132]	; (8007f74 <sync_fs+0xd4>)
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fd4d 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3330      	adds	r3, #48	; 0x30
 8007efa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007efe:	491e      	ldr	r1, [pc, #120]	; (8007f78 <sync_fs+0xd8>)
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff fd45 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3330      	adds	r3, #48	; 0x30
 8007f0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff fd3b 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3330      	adds	r3, #48	; 0x30
 8007f1e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7ff fd31 	bl	8007990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7858      	ldrb	r0, [r3, #1]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f46:	2301      	movs	r3, #1
 8007f48:	f7ff fc8e 	bl	8007868 <disk_write>
			fs->fsi_flag = 0;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fca4 	bl	80078a8 <disk_ioctl>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <sync_fs+0xca>
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	41615252 	.word	0x41615252
 8007f78:	61417272 	.word	0x61417272

08007f7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	3b02      	subs	r3, #2
 8007f8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	3b02      	subs	r3, #2
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d301      	bcc.n	8007f9c <clust2sect+0x20>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e008      	b.n	8007fae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	895b      	ldrh	r3, [r3, #10]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	fb03 f202 	mul.w	r2, r3, r2
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	4413      	add	r3, r2
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d904      	bls.n	8007fda <get_fat+0x20>
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fda:	2301      	movs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	e08f      	b.n	8008100 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d062      	beq.n	80080b4 <get_fat+0xfa>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	dc7c      	bgt.n	80080ec <get_fat+0x132>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d002      	beq.n	8007ffc <get_fat+0x42>
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d042      	beq.n	8008080 <get_fat+0xc6>
 8007ffa:	e077      	b.n	80080ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6a1a      	ldr	r2, [r3, #32]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	0a5b      	lsrs	r3, r3, #9
 8008012:	4413      	add	r3, r2
 8008014:	4619      	mov	r1, r3
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f7ff ff14 	bl	8007e44 <move_window>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d167      	bne.n	80080f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	60fa      	str	r2, [r7, #12]
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008034:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	6a1a      	ldr	r2, [r3, #32]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	0a5b      	lsrs	r3, r3, #9
 800803e:	4413      	add	r3, r2
 8008040:	4619      	mov	r1, r3
 8008042:	6938      	ldr	r0, [r7, #16]
 8008044:	f7ff fefe 	bl	8007e44 <move_window>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d153      	bne.n	80080f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	461a      	mov	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4313      	orrs	r3, r2
 8008064:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <get_fat+0xbc>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	e002      	b.n	800807c <get_fat+0xc2>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800807c:	617b      	str	r3, [r7, #20]
			break;
 800807e:	e03f      	b.n	8008100 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	4413      	add	r3, r2
 800808a:	4619      	mov	r1, r3
 800808c:	6938      	ldr	r0, [r7, #16]
 800808e:	f7ff fed9 	bl	8007e44 <move_window>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d130      	bne.n	80080fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80080a6:	4413      	add	r3, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fc1b 	bl	80078e4 <ld_word>
 80080ae:	4603      	mov	r3, r0
 80080b0:	617b      	str	r3, [r7, #20]
			break;
 80080b2:	e025      	b.n	8008100 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	09db      	lsrs	r3, r3, #7
 80080bc:	4413      	add	r3, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	6938      	ldr	r0, [r7, #16]
 80080c2:	f7ff febf 	bl	8007e44 <move_window>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d118      	bne.n	80080fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080da:	4413      	add	r3, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff fc19 	bl	8007914 <ld_dword>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80080e8:	617b      	str	r3, [r7, #20]
			break;
 80080ea:	e009      	b.n	8008100 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80080ec:	2301      	movs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e006      	b.n	8008100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080f2:	bf00      	nop
 80080f4:	e004      	b.n	8008100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080f6:	bf00      	nop
 80080f8:	e002      	b.n	8008100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080fa:	bf00      	nop
 80080fc:	e000      	b.n	8008100 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080fe:	bf00      	nop
		}
	}

	return val;
 8008100:	697b      	ldr	r3, [r7, #20]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800810a:	b590      	push	{r4, r7, lr}
 800810c:	b089      	sub	sp, #36	; 0x24
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008116:	2302      	movs	r3, #2
 8008118:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b01      	cmp	r3, #1
 800811e:	f240 80d9 	bls.w	80082d4 <put_fat+0x1ca>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	f080 80d3 	bcs.w	80082d4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b03      	cmp	r3, #3
 8008134:	f000 8096 	beq.w	8008264 <put_fat+0x15a>
 8008138:	2b03      	cmp	r3, #3
 800813a:	f300 80cb 	bgt.w	80082d4 <put_fat+0x1ca>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d002      	beq.n	8008148 <put_fat+0x3e>
 8008142:	2b02      	cmp	r3, #2
 8008144:	d06e      	beq.n	8008224 <put_fat+0x11a>
 8008146:	e0c5      	b.n	80082d4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4413      	add	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1a      	ldr	r2, [r3, #32]
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	0a5b      	lsrs	r3, r3, #9
 800815e:	4413      	add	r3, r2
 8008160:	4619      	mov	r1, r3
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fe6e 	bl	8007e44 <move_window>
 8008168:	4603      	mov	r3, r0
 800816a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800816c:	7ffb      	ldrb	r3, [r7, #31]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 80a9 	bne.w	80082c6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	1c59      	adds	r1, r3, #1
 800817e:	61b9      	str	r1, [r7, #24]
 8008180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008184:	4413      	add	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <put_fat+0xa4>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	b25a      	sxtb	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	b25b      	sxtb	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b25b      	sxtb	r3, r3
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	e001      	b.n	80081b2 <put_fat+0xa8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	0a5b      	lsrs	r3, r3, #9
 80081c4:	4413      	add	r3, r2
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fe3b 	bl	8007e44 <move_window>
 80081ce:	4603      	mov	r3, r0
 80081d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081d2:	7ffb      	ldrb	r3, [r7, #31]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d178      	bne.n	80082ca <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e4:	4413      	add	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <put_fat+0xf0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	091b      	lsrs	r3, r3, #4
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	e00e      	b.n	8008218 <put_fat+0x10e>
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	f023 030f 	bic.w	r3, r3, #15
 8008204:	b25a      	sxtb	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	b25b      	sxtb	r3, r3
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	b25b      	sxtb	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b25b      	sxtb	r3, r3
 8008216:	b2db      	uxtb	r3, r3
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	70da      	strb	r2, [r3, #3]
			break;
 8008222:	e057      	b.n	80082d4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1a      	ldr	r2, [r3, #32]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	4413      	add	r3, r2
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fe07 	bl	8007e44 <move_window>
 8008236:	4603      	mov	r3, r0
 8008238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800823a:	7ffb      	ldrb	r3, [r7, #31]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d146      	bne.n	80082ce <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800824e:	4413      	add	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	b292      	uxth	r2, r2
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fb7f 	bl	800795a <st_word>
			fs->wflag = 1;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	70da      	strb	r2, [r3, #3]
			break;
 8008262:	e037      	b.n	80082d4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	09db      	lsrs	r3, r3, #7
 800826c:	4413      	add	r3, r2
 800826e:	4619      	mov	r1, r3
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fde7 	bl	8007e44 <move_window>
 8008276:	4603      	mov	r3, r0
 8008278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800827a:	7ffb      	ldrb	r3, [r7, #31]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d128      	bne.n	80082d2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008294:	4413      	add	r3, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fb3c 	bl	8007914 <ld_dword>
 800829c:	4603      	mov	r3, r0
 800829e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082a2:	4323      	orrs	r3, r4
 80082a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80082b4:	4413      	add	r3, r2
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff fb69 	bl	8007990 <st_dword>
			fs->wflag = 1;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	70da      	strb	r2, [r3, #3]
			break;
 80082c4:	e006      	b.n	80082d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80082c6:	bf00      	nop
 80082c8:	e004      	b.n	80082d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80082d2:	bf00      	nop
		}
	}
	return res;
 80082d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3724      	adds	r7, #36	; 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd90      	pop	{r4, r7, pc}

080082de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b088      	sub	sp, #32
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d904      	bls.n	8008304 <remove_chain+0x26>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d301      	bcc.n	8008308 <remove_chain+0x2a>
 8008304:	2302      	movs	r3, #2
 8008306:	e04b      	b.n	80083a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	69b8      	ldr	r0, [r7, #24]
 8008316:	f7ff fef8 	bl	800810a <put_fat>
 800831a:	4603      	mov	r3, r0
 800831c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800831e:	7ffb      	ldrb	r3, [r7, #31]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <remove_chain+0x4a>
 8008324:	7ffb      	ldrb	r3, [r7, #31]
 8008326:	e03b      	b.n	80083a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7ff fe45 	bl	8007fba <get_fat>
 8008330:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d031      	beq.n	800839c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <remove_chain+0x64>
 800833e:	2302      	movs	r3, #2
 8008340:	e02e      	b.n	80083a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d101      	bne.n	800834e <remove_chain+0x70>
 800834a:	2301      	movs	r3, #1
 800834c:	e028      	b.n	80083a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800834e:	2200      	movs	r2, #0
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	69b8      	ldr	r0, [r7, #24]
 8008354:	f7ff fed9 	bl	800810a <put_fat>
 8008358:	4603      	mov	r3, r0
 800835a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800835c:	7ffb      	ldrb	r3, [r7, #31]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <remove_chain+0x88>
 8008362:	7ffb      	ldrb	r3, [r7, #31]
 8008364:	e01c      	b.n	80083a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	3b02      	subs	r3, #2
 8008370:	429a      	cmp	r2, r3
 8008372:	d20b      	bcs.n	800838c <remove_chain+0xae>
			fs->free_clst++;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d3c6      	bcc.n	8008328 <remove_chain+0x4a>
 800839a:	e000      	b.n	800839e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800839c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10d      	bne.n	80083da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <create_chain+0x2c>
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d31b      	bcc.n	800840c <create_chain+0x64>
 80083d4:	2301      	movs	r3, #1
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e018      	b.n	800840c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fdec 	bl	8007fba <get_fat>
 80083e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d801      	bhi.n	80083ee <create_chain+0x46>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e070      	b.n	80084d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d101      	bne.n	80083fa <create_chain+0x52>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	e06a      	b.n	80084d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d201      	bcs.n	8008408 <create_chain+0x60>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	e063      	b.n	80084d0 <create_chain+0x128>
		scl = clst;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	3301      	adds	r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	429a      	cmp	r2, r3
 800841e:	d307      	bcc.n	8008430 <create_chain+0x88>
				ncl = 2;
 8008420:	2302      	movs	r3, #2
 8008422:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	429a      	cmp	r2, r3
 800842a:	d901      	bls.n	8008430 <create_chain+0x88>
 800842c:	2300      	movs	r3, #0
 800842e:	e04f      	b.n	80084d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008430:	69f9      	ldr	r1, [r7, #28]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fdc1 	bl	8007fba <get_fat>
 8008438:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d003      	beq.n	800844e <create_chain+0xa6>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844c:	d101      	bne.n	8008452 <create_chain+0xaa>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e03e      	b.n	80084d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	429a      	cmp	r2, r3
 8008458:	d1da      	bne.n	8008410 <create_chain+0x68>
 800845a:	2300      	movs	r3, #0
 800845c:	e038      	b.n	80084d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800845e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008460:	f04f 32ff 	mov.w	r2, #4294967295
 8008464:	69f9      	ldr	r1, [r7, #28]
 8008466:	6938      	ldr	r0, [r7, #16]
 8008468:	f7ff fe4f 	bl	800810a <put_fat>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <create_chain+0xe2>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6938      	ldr	r0, [r7, #16]
 8008482:	f7ff fe42 	bl	800810a <put_fat>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d116      	bne.n	80084be <create_chain+0x116>
		fs->last_clst = ncl;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	3b02      	subs	r3, #2
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d804      	bhi.n	80084ae <create_chain+0x106>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	1e5a      	subs	r2, r3, #1
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	791b      	ldrb	r3, [r3, #4]
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	711a      	strb	r2, [r3, #4]
 80084bc:	e007      	b.n	80084ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d102      	bne.n	80084ca <create_chain+0x122>
 80084c4:	f04f 33ff 	mov.w	r3, #4294967295
 80084c8:	e000      	b.n	80084cc <create_chain+0x124>
 80084ca:	2301      	movs	r3, #1
 80084cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80084ce:	69fb      	ldr	r3, [r7, #28]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3720      	adds	r7, #32
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	3304      	adds	r3, #4
 80084ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	0a5b      	lsrs	r3, r3, #9
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	8952      	ldrh	r2, [r2, #10]
 80084f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	613a      	str	r2, [r7, #16]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <clmt_clust+0x3a>
 800850e:	2300      	movs	r3, #0
 8008510:	e010      	b.n	8008534 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	d307      	bcc.n	800852a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	3304      	adds	r3, #4
 8008526:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008528:	e7e9      	b.n	80084fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800852a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	4413      	add	r3, r2
}
 8008534:	4618      	mov	r0, r3
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008556:	d204      	bcs.n	8008562 <dir_sdi+0x22>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008562:	2302      	movs	r3, #2
 8008564:	e063      	b.n	800862e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <dir_sdi+0x46>
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d902      	bls.n	8008586 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10c      	bne.n	80085a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	8912      	ldrh	r2, [r2, #8]
 8008594:	4293      	cmp	r3, r2
 8008596:	d301      	bcc.n	800859c <dir_sdi+0x5c>
 8008598:	2302      	movs	r3, #2
 800859a:	e048      	b.n	800862e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	61da      	str	r2, [r3, #28]
 80085a4:	e029      	b.n	80085fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	895b      	ldrh	r3, [r3, #10]
 80085aa:	025b      	lsls	r3, r3, #9
 80085ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085ae:	e019      	b.n	80085e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6979      	ldr	r1, [r7, #20]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fd00 	bl	8007fba <get_fat>
 80085ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d101      	bne.n	80085c8 <dir_sdi+0x88>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e032      	b.n	800862e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d904      	bls.n	80085d8 <dir_sdi+0x98>
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d301      	bcc.n	80085dc <dir_sdi+0x9c>
 80085d8:	2302      	movs	r3, #2
 80085da:	e028      	b.n	800862e <dir_sdi+0xee>
			ofs -= csz;
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d2e1      	bcs.n	80085b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80085ec:	6979      	ldr	r1, [r7, #20]
 80085ee:	6938      	ldr	r0, [r7, #16]
 80085f0:	f7ff fcc4 	bl	8007f7c <clust2sect>
 80085f4:	4602      	mov	r2, r0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <dir_sdi+0xcc>
 8008608:	2302      	movs	r3, #2
 800860a:	e010      	b.n	800862e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	0a5b      	lsrs	r3, r3, #9
 8008614:	441a      	add	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	441a      	add	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b086      	sub	sp, #24
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	3320      	adds	r3, #32
 800864c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <dir_next+0x28>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800865c:	d301      	bcc.n	8008662 <dir_next+0x2c>
 800865e:	2304      	movs	r3, #4
 8008660:	e0aa      	b.n	80087b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	2b00      	cmp	r3, #0
 800866a:	f040 8098 	bne.w	800879e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	8912      	ldrh	r2, [r2, #8]
 8008688:	4293      	cmp	r3, r2
 800868a:	f0c0 8088 	bcc.w	800879e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	61da      	str	r2, [r3, #28]
 8008694:	2304      	movs	r3, #4
 8008696:	e08f      	b.n	80087b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	0a5b      	lsrs	r3, r3, #9
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	8952      	ldrh	r2, [r2, #10]
 80086a0:	3a01      	subs	r2, #1
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d17a      	bne.n	800879e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f7ff fc82 	bl	8007fba <get_fat>
 80086b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d801      	bhi.n	80086c2 <dir_next+0x8c>
 80086be:	2302      	movs	r3, #2
 80086c0:	e07a      	b.n	80087b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d101      	bne.n	80086ce <dir_next+0x98>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e074      	b.n	80087b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d358      	bcc.n	800878a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	61da      	str	r2, [r3, #28]
 80086e4:	2304      	movs	r3, #4
 80086e6:	e067      	b.n	80087b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7ff fe59 	bl	80083a8 <create_chain>
 80086f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <dir_next+0xcc>
 80086fe:	2307      	movs	r3, #7
 8008700:	e05a      	b.n	80087b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <dir_next+0xd6>
 8008708:	2302      	movs	r3, #2
 800870a:	e055      	b.n	80087b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d101      	bne.n	8008718 <dir_next+0xe2>
 8008714:	2301      	movs	r3, #1
 8008716:	e04f      	b.n	80087b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff fb4f 	bl	8007dbc <sync_window>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <dir_next+0xf2>
 8008724:	2301      	movs	r3, #1
 8008726:	e047      	b.n	80087b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3330      	adds	r3, #48	; 0x30
 800872c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff f979 	bl	8007a2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	6979      	ldr	r1, [r7, #20]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff fc1c 	bl	8007f7c <clust2sect>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
 800874a:	e012      	b.n	8008772 <dir_next+0x13c>
						fs->wflag = 1;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff fb32 	bl	8007dbc <sync_window>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <dir_next+0x12c>
 800875e:	2301      	movs	r3, #1
 8008760:	e02a      	b.n	80087b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3301      	adds	r3, #1
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	62da      	str	r2, [r3, #44]	; 0x2c
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	895b      	ldrh	r3, [r3, #10]
 8008776:	461a      	mov	r2, r3
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	4293      	cmp	r3, r2
 800877c:	d3e6      	bcc.n	800874c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad2      	subs	r2, r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008790:	6979      	ldr	r1, [r7, #20]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fbf2 	bl	8007f7c <clust2sect>
 8008798:	4602      	mov	r2, r0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff feb4 	bl	8008540 <dir_sdi>
 80087d8:	4603      	mov	r3, r0
 80087da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d12b      	bne.n	800883a <dir_alloc+0x7a>
		n = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	4619      	mov	r1, r3
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff fb29 	bl	8007e44 <move_window>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d11d      	bne.n	8008838 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2be5      	cmp	r3, #229	; 0xe5
 8008804:	d004      	beq.n	8008810 <dir_alloc+0x50>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d107      	bne.n	8008820 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3301      	adds	r3, #1
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d102      	bne.n	8008824 <dir_alloc+0x64>
 800881e:	e00c      	b.n	800883a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008820:	2300      	movs	r3, #0
 8008822:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008824:	2101      	movs	r1, #1
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ff05 	bl	8008636 <dir_next>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0d7      	beq.n	80087e6 <dir_alloc+0x26>
 8008836:	e000      	b.n	800883a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008838:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	2b04      	cmp	r3, #4
 800883e:	d101      	bne.n	8008844 <dir_alloc+0x84>
 8008840:	2307      	movs	r3, #7
 8008842:	75fb      	strb	r3, [r7, #23]
	return res;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	331a      	adds	r3, #26
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff f841 	bl	80078e4 <ld_word>
 8008862:	4603      	mov	r3, r0
 8008864:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b03      	cmp	r3, #3
 800886c:	d109      	bne.n	8008882 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3314      	adds	r3, #20
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff f836 	bl	80078e4 <ld_word>
 8008878:	4603      	mov	r3, r0
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	331a      	adds	r3, #26
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	b292      	uxth	r2, r2
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff f859 	bl	800795a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d109      	bne.n	80088c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f103 0214 	add.w	r2, r3, #20
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	0c1b      	lsrs	r3, r3, #16
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f7ff f84b 	bl	800795a <st_word>
	}
}
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80088da:	2100      	movs	r1, #0
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff fe2f 	bl	8008540 <dir_sdi>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <dir_find+0x24>
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	e03e      	b.n	800896e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f7ff faa4 	bl	8007e44 <move_window>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12f      	bne.n	8008966 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <dir_find+0x4e>
 8008914:	2304      	movs	r3, #4
 8008916:	75fb      	strb	r3, [r7, #23]
 8008918:	e028      	b.n	800896c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	330b      	adds	r3, #11
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008926:	b2da      	uxtb	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	330b      	adds	r3, #11
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <dir_find+0x86>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a18      	ldr	r0, [r3, #32]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	220b      	movs	r2, #11
 8008946:	4619      	mov	r1, r3
 8008948:	f7ff f88a 	bl	8007a60 <mem_cmp>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008952:	2100      	movs	r1, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff fe6e 	bl	8008636 <dir_next>
 800895a:	4603      	mov	r3, r0
 800895c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0c5      	beq.n	80088f0 <dir_find+0x24>
 8008964:	e002      	b.n	800896c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800896a:	bf00      	nop

	return res;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008984:	2101      	movs	r1, #1
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff ff1a 	bl	80087c0 <dir_alloc>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d11c      	bne.n	80089d0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	4619      	mov	r1, r3
 800899c:	68b8      	ldr	r0, [r7, #8]
 800899e:	f7ff fa51 	bl	8007e44 <move_window>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d111      	bne.n	80089d0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	2220      	movs	r2, #32
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff f838 	bl	8007a2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a18      	ldr	r0, [r3, #32]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3324      	adds	r3, #36	; 0x24
 80089c2:	220b      	movs	r2, #11
 80089c4:	4619      	mov	r1, r3
 80089c6:	f7ff f80f 	bl	80079e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2201      	movs	r2, #1
 80089ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3324      	adds	r3, #36	; 0x24
 80089f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80089f2:	220b      	movs	r2, #11
 80089f4:	2120      	movs	r1, #32
 80089f6:	68b8      	ldr	r0, [r7, #8]
 80089f8:	f7ff f817 	bl	8007a2a <mem_set>
	si = i = 0; ni = 8;
 80089fc:	2300      	movs	r3, #0
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	61fb      	str	r3, [r7, #28]
 8008a04:	2308      	movs	r3, #8
 8008a06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	61fa      	str	r2, [r7, #28]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a16:	7efb      	ldrb	r3, [r7, #27]
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d94e      	bls.n	8008aba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008a1c:	7efb      	ldrb	r3, [r7, #27]
 8008a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8008a20:	d006      	beq.n	8008a30 <create_name+0x54>
 8008a22:	7efb      	ldrb	r3, [r7, #27]
 8008a24:	2b5c      	cmp	r3, #92	; 0x5c
 8008a26:	d110      	bne.n	8008a4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a28:	e002      	b.n	8008a30 <create_name+0x54>
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	61fb      	str	r3, [r7, #28]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b2f      	cmp	r3, #47	; 0x2f
 8008a3a:	d0f6      	beq.n	8008a2a <create_name+0x4e>
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b5c      	cmp	r3, #92	; 0x5c
 8008a46:	d0f0      	beq.n	8008a2a <create_name+0x4e>
			break;
 8008a48:	e038      	b.n	8008abc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008a4a:	7efb      	ldrb	r3, [r7, #27]
 8008a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a4e:	d003      	beq.n	8008a58 <create_name+0x7c>
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d30c      	bcc.n	8008a72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b0b      	cmp	r3, #11
 8008a5c:	d002      	beq.n	8008a64 <create_name+0x88>
 8008a5e:	7efb      	ldrb	r3, [r7, #27]
 8008a60:	2b2e      	cmp	r3, #46	; 0x2e
 8008a62:	d001      	beq.n	8008a68 <create_name+0x8c>
 8008a64:	2306      	movs	r3, #6
 8008a66:	e044      	b.n	8008af2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008a68:	2308      	movs	r3, #8
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	230b      	movs	r3, #11
 8008a6e:	617b      	str	r3, [r7, #20]
			continue;
 8008a70:	e022      	b.n	8008ab8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008a72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	da04      	bge.n	8008a84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008a7a:	7efb      	ldrb	r3, [r7, #27]
 8008a7c:	3b80      	subs	r3, #128	; 0x80
 8008a7e:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <create_name+0x120>)
 8008a80:	5cd3      	ldrb	r3, [r2, r3]
 8008a82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008a84:	7efb      	ldrb	r3, [r7, #27]
 8008a86:	4619      	mov	r1, r3
 8008a88:	481d      	ldr	r0, [pc, #116]	; (8008b00 <create_name+0x124>)
 8008a8a:	f7ff f810 	bl	8007aae <chk_chr>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <create_name+0xbc>
 8008a94:	2306      	movs	r3, #6
 8008a96:	e02c      	b.n	8008af2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008a98:	7efb      	ldrb	r3, [r7, #27]
 8008a9a:	2b60      	cmp	r3, #96	; 0x60
 8008a9c:	d905      	bls.n	8008aaa <create_name+0xce>
 8008a9e:	7efb      	ldrb	r3, [r7, #27]
 8008aa0:	2b7a      	cmp	r3, #122	; 0x7a
 8008aa2:	d802      	bhi.n	8008aaa <create_name+0xce>
 8008aa4:	7efb      	ldrb	r3, [r7, #27]
 8008aa6:	3b20      	subs	r3, #32
 8008aa8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	613a      	str	r2, [r7, #16]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	7efa      	ldrb	r2, [r7, #27]
 8008ab6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ab8:	e7a6      	b.n	8008a08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008aba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	441a      	add	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <create_name+0xf4>
 8008acc:	2306      	movs	r3, #6
 8008ace:	e010      	b.n	8008af2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2be5      	cmp	r3, #229	; 0xe5
 8008ad6:	d102      	bne.n	8008ade <create_name+0x102>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2205      	movs	r2, #5
 8008adc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008ade:	7efb      	ldrb	r3, [r7, #27]
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d801      	bhi.n	8008ae8 <create_name+0x10c>
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	e000      	b.n	8008aea <create_name+0x10e>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	330b      	adds	r3, #11
 8008aee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008af0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3720      	adds	r7, #32
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	0800bcb0 	.word	0x0800bcb0
 8008b00:	0800bc1c 	.word	0x0800bc1c

08008b04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b18:	e002      	b.n	8008b20 <follow_path+0x1c>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b2f      	cmp	r3, #47	; 0x2f
 8008b26:	d0f8      	beq.n	8008b1a <follow_path+0x16>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b5c      	cmp	r3, #92	; 0x5c
 8008b2e:	d0f4      	beq.n	8008b1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b1f      	cmp	r3, #31
 8008b3c:	d80a      	bhi.n	8008b54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2280      	movs	r2, #128	; 0x80
 8008b42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008b46:	2100      	movs	r1, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fcf9 	bl	8008540 <dir_sdi>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
 8008b52:	e043      	b.n	8008bdc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b54:	463b      	mov	r3, r7
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff3f 	bl	80089dc <create_name>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d134      	bne.n	8008bd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff feaf 	bl	80088cc <dir_find>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d127      	bne.n	8008bd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d122      	bne.n	8008bd6 <follow_path+0xd2>
 8008b90:	2305      	movs	r3, #5
 8008b92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008b94:	e01f      	b.n	8008bd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11c      	bne.n	8008bda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	799b      	ldrb	r3, [r3, #6]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008bac:	2305      	movs	r3, #5
 8008bae:	75fb      	strb	r3, [r7, #23]
 8008bb0:	e014      	b.n	8008bdc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc0:	4413      	add	r3, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff fe42 	bl	800884e <ld_clust>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bd0:	e7c0      	b.n	8008b54 <follow_path+0x50>
			if (res != FR_OK) break;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <follow_path+0xd8>
				break;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bda:	bf00      	nop
			}
		}
	}

	return res;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008bee:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d031      	beq.n	8008c60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e002      	b.n	8008c0a <get_ldnumber+0x24>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	3301      	adds	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d903      	bls.n	8008c1a <get_ldnumber+0x34>
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b3a      	cmp	r3, #58	; 0x3a
 8008c18:	d1f4      	bne.n	8008c04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b3a      	cmp	r3, #58	; 0x3a
 8008c20:	d11c      	bne.n	8008c5c <get_ldnumber+0x76>
			tp = *path;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	60fa      	str	r2, [r7, #12]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	3b30      	subs	r3, #48	; 0x30
 8008c32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d80e      	bhi.n	8008c58 <get_ldnumber+0x72>
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d10a      	bne.n	8008c58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <get_ldnumber+0x72>
					vol = (int)i;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	e002      	b.n	8008c62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008c60:	693b      	ldr	r3, [r7, #16]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	70da      	strb	r2, [r3, #3]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff f8da 	bl	8007e44 <move_window>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <check_fs+0x2a>
 8008c96:	2304      	movs	r3, #4
 8008c98:	e038      	b.n	8008d0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3330      	adds	r3, #48	; 0x30
 8008c9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fe1e 	bl	80078e4 <ld_word>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	461a      	mov	r2, r3
 8008cac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d001      	beq.n	8008cb8 <check_fs+0x48>
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e029      	b.n	8008d0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cbe:	2be9      	cmp	r3, #233	; 0xe9
 8008cc0:	d009      	beq.n	8008cd6 <check_fs+0x66>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cc8:	2beb      	cmp	r3, #235	; 0xeb
 8008cca:	d11e      	bne.n	8008d0a <check_fs+0x9a>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008cd2:	2b90      	cmp	r3, #144	; 0x90
 8008cd4:	d119      	bne.n	8008d0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3330      	adds	r3, #48	; 0x30
 8008cda:	3336      	adds	r3, #54	; 0x36
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fe19 	bl	8007914 <ld_dword>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ce8:	4a0a      	ldr	r2, [pc, #40]	; (8008d14 <check_fs+0xa4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d101      	bne.n	8008cf2 <check_fs+0x82>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e00c      	b.n	8008d0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3330      	adds	r3, #48	; 0x30
 8008cf6:	3352      	adds	r3, #82	; 0x52
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fe0b 	bl	8007914 <ld_dword>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4a05      	ldr	r2, [pc, #20]	; (8008d18 <check_fs+0xa8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d101      	bne.n	8008d0a <check_fs+0x9a>
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008d0a:	2302      	movs	r3, #2
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	00544146 	.word	0x00544146
 8008d18:	33544146 	.word	0x33544146

08008d1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b096      	sub	sp, #88	; 0x58
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	4613      	mov	r3, r2
 8008d28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff ff58 	bl	8008be6 <get_ldnumber>
 8008d36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da01      	bge.n	8008d42 <find_volume+0x26>
 8008d3e:	230b      	movs	r3, #11
 8008d40:	e22d      	b.n	800919e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d42:	4aa1      	ldr	r2, [pc, #644]	; (8008fc8 <find_volume+0x2ac>)
 8008d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <find_volume+0x3a>
 8008d52:	230c      	movs	r3, #12
 8008d54:	e223      	b.n	800919e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01a      	beq.n	8008da2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fd19 	bl	80077a8 <disk_status>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10c      	bne.n	8008da2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <find_volume+0x82>
 8008d8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	e1ff      	b.n	800919e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e1fd      	b.n	800919e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	2200      	movs	r2, #0
 8008da6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fd11 	bl	80077dc <disk_initialize>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e1e6      	b.n	800919e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d007      	beq.n	8008de6 <find_volume+0xca>
 8008dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008de2:	230a      	movs	r3, #10
 8008de4:	e1db      	b.n	800919e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dee:	f7ff ff3f 	bl	8008c70 <check_fs>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d149      	bne.n	8008e94 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e00:	2300      	movs	r3, #0
 8008e02:	643b      	str	r3, [r7, #64]	; 0x40
 8008e04:	e01e      	b.n	8008e44 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008e14:	4413      	add	r3, r2
 8008e16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d006      	beq.n	8008e30 <find_volume+0x114>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	3308      	adds	r3, #8
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fd74 	bl	8007914 <ld_dword>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	e000      	b.n	8008e32 <find_volume+0x116>
 8008e30:	2200      	movs	r2, #0
 8008e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	3358      	adds	r3, #88	; 0x58
 8008e38:	443b      	add	r3, r7
 8008e3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e40:	3301      	adds	r3, #1
 8008e42:	643b      	str	r3, [r7, #64]	; 0x40
 8008e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d9dd      	bls.n	8008e06 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <find_volume+0x13e>
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	3b01      	subs	r3, #1
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	3358      	adds	r3, #88	; 0x58
 8008e60:	443b      	add	r3, r7
 8008e62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <find_volume+0x15e>
 8008e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e72:	f7ff fefd 	bl	8008c70 <check_fs>
 8008e76:	4603      	mov	r3, r0
 8008e78:	e000      	b.n	8008e7c <find_volume+0x160>
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d905      	bls.n	8008e94 <find_volume+0x178>
 8008e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d9e2      	bls.n	8008e5a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d101      	bne.n	8008ea0 <find_volume+0x184>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e17e      	b.n	800919e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d901      	bls.n	8008eac <find_volume+0x190>
 8008ea8:	230d      	movs	r3, #13
 8008eaa:	e178      	b.n	800919e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	3330      	adds	r3, #48	; 0x30
 8008eb0:	330b      	adds	r3, #11
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fd16 	bl	80078e4 <ld_word>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebe:	d001      	beq.n	8008ec4 <find_volume+0x1a8>
 8008ec0:	230d      	movs	r3, #13
 8008ec2:	e16c      	b.n	800919e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	3330      	adds	r3, #48	; 0x30
 8008ec8:	3316      	adds	r3, #22
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fd0a 	bl	80078e4 <ld_word>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <find_volume+0x1cc>
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	3330      	adds	r3, #48	; 0x30
 8008ede:	3324      	adds	r3, #36	; 0x24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fd17 	bl	8007914 <ld_dword>
 8008ee6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	789b      	ldrb	r3, [r3, #2]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d005      	beq.n	8008f0c <find_volume+0x1f0>
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	789b      	ldrb	r3, [r3, #2]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d001      	beq.n	8008f0c <find_volume+0x1f0>
 8008f08:	230d      	movs	r3, #13
 8008f0a:	e148      	b.n	800919e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	789b      	ldrb	r3, [r3, #2]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f14:	fb02 f303 	mul.w	r3, r2, r3
 8008f18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	895b      	ldrh	r3, [r3, #10]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d008      	beq.n	8008f40 <find_volume+0x224>
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	895b      	ldrh	r3, [r3, #10]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	895b      	ldrh	r3, [r3, #10]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <find_volume+0x228>
 8008f40:	230d      	movs	r3, #13
 8008f42:	e12c      	b.n	800919e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	3330      	adds	r3, #48	; 0x30
 8008f48:	3311      	adds	r3, #17
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fcca 	bl	80078e4 <ld_word>
 8008f50:	4603      	mov	r3, r0
 8008f52:	461a      	mov	r2, r3
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	891b      	ldrh	r3, [r3, #8]
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <find_volume+0x24e>
 8008f66:	230d      	movs	r3, #13
 8008f68:	e119      	b.n	800919e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	3330      	adds	r3, #48	; 0x30
 8008f6e:	3313      	adds	r3, #19
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fcb7 	bl	80078e4 <ld_word>
 8008f76:	4603      	mov	r3, r0
 8008f78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <find_volume+0x272>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	3330      	adds	r3, #48	; 0x30
 8008f84:	3320      	adds	r3, #32
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fcc4 	bl	8007914 <ld_dword>
 8008f8c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	3330      	adds	r3, #48	; 0x30
 8008f92:	330e      	adds	r3, #14
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe fca5 	bl	80078e4 <ld_word>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008f9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <find_volume+0x28c>
 8008fa4:	230d      	movs	r3, #13
 8008fa6:	e0fa      	b.n	800919e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008fa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fac:	4413      	add	r3, r2
 8008fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb0:	8912      	ldrh	r2, [r2, #8]
 8008fb2:	0912      	lsrs	r2, r2, #4
 8008fb4:	b292      	uxth	r2, r2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d204      	bcs.n	8008fcc <find_volume+0x2b0>
 8008fc2:	230d      	movs	r3, #13
 8008fc4:	e0eb      	b.n	800919e <find_volume+0x482>
 8008fc6:	bf00      	nop
 8008fc8:	20000854 	.word	0x20000854
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fd4:	8952      	ldrh	r2, [r2, #10]
 8008fd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <find_volume+0x2ca>
 8008fe2:	230d      	movs	r3, #13
 8008fe4:	e0db      	b.n	800919e <find_volume+0x482>
		fmt = FS_FAT32;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d802      	bhi.n	8008ffc <find_volume+0x2e0>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009002:	4293      	cmp	r3, r2
 8009004:	d802      	bhi.n	800900c <find_volume+0x2f0>
 8009006:	2301      	movs	r3, #1
 8009008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	1c9a      	adds	r2, r3, #2
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009018:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800901a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800901c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901e:	441a      	add	r2, r3
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	441a      	add	r2, r3
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800902e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009032:	2b03      	cmp	r3, #3
 8009034:	d11e      	bne.n	8009074 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	3330      	adds	r3, #48	; 0x30
 800903a:	332a      	adds	r3, #42	; 0x2a
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fc51 	bl	80078e4 <ld_word>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <find_volume+0x330>
 8009048:	230d      	movs	r3, #13
 800904a:	e0a8      	b.n	800919e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	891b      	ldrh	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <find_volume+0x33c>
 8009054:	230d      	movs	r3, #13
 8009056:	e0a2      	b.n	800919e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	3330      	adds	r3, #48	; 0x30
 800905c:	332c      	adds	r3, #44	; 0x2c
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe fc58 	bl	8007914 <ld_dword>
 8009064:	4602      	mov	r2, r0
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	647b      	str	r3, [r7, #68]	; 0x44
 8009072:	e01f      	b.n	80090b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	891b      	ldrh	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <find_volume+0x364>
 800907c:	230d      	movs	r3, #13
 800907e:	e08e      	b.n	800919e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	6a1a      	ldr	r2, [r3, #32]
 8009084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009086:	441a      	add	r2, r3
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800908c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009090:	2b02      	cmp	r3, #2
 8009092:	d103      	bne.n	800909c <find_volume+0x380>
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	e00a      	b.n	80090b2 <find_volume+0x396>
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	695a      	ldr	r2, [r3, #20]
 80090a0:	4613      	mov	r3, r2
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	4413      	add	r3, r2
 80090a6:	085a      	lsrs	r2, r3, #1
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80090be:	0a5b      	lsrs	r3, r3, #9
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d201      	bcs.n	80090c8 <find_volume+0x3ac>
 80090c4:	230d      	movs	r3, #13
 80090c6:	e06a      	b.n	800919e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295
 80090ce:	611a      	str	r2, [r3, #16]
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	2280      	movs	r2, #128	; 0x80
 80090dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80090de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d149      	bne.n	800917a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	3330      	adds	r3, #48	; 0x30
 80090ea:	3330      	adds	r3, #48	; 0x30
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fbf9 	bl	80078e4 <ld_word>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d140      	bne.n	800917a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80090f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090fa:	3301      	adds	r3, #1
 80090fc:	4619      	mov	r1, r3
 80090fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009100:	f7fe fea0 	bl	8007e44 <move_window>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d137      	bne.n	800917a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	2200      	movs	r2, #0
 800910e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	3330      	adds	r3, #48	; 0x30
 8009114:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe fbe3 	bl	80078e4 <ld_word>
 800911e:	4603      	mov	r3, r0
 8009120:	461a      	mov	r2, r3
 8009122:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009126:	429a      	cmp	r2, r3
 8009128:	d127      	bne.n	800917a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	3330      	adds	r3, #48	; 0x30
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fbf0 	bl	8007914 <ld_dword>
 8009134:	4603      	mov	r3, r0
 8009136:	4a1c      	ldr	r2, [pc, #112]	; (80091a8 <find_volume+0x48c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d11e      	bne.n	800917a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	3330      	adds	r3, #48	; 0x30
 8009140:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fbe5 	bl	8007914 <ld_dword>
 800914a:	4603      	mov	r3, r0
 800914c:	4a17      	ldr	r2, [pc, #92]	; (80091ac <find_volume+0x490>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d113      	bne.n	800917a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	3330      	adds	r3, #48	; 0x30
 8009156:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fbda 	bl	8007914 <ld_dword>
 8009160:	4602      	mov	r2, r0
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	3330      	adds	r3, #48	; 0x30
 800916a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fbd0 	bl	8007914 <ld_dword>
 8009174:	4602      	mov	r2, r0
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009180:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009182:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <find_volume+0x494>)
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	3301      	adds	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <find_volume+0x494>)
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <find_volume+0x494>)
 8009190:	881a      	ldrh	r2, [r3, #0]
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009196:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009198:	f7fe fdec 	bl	8007d74 <clear_lock>
#endif
	return FR_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3758      	adds	r7, #88	; 0x58
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	41615252 	.word	0x41615252
 80091ac:	61417272 	.word	0x61417272
 80091b0:	20000858 	.word	0x20000858

080091b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80091be:	2309      	movs	r3, #9
 80091c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01c      	beq.n	8009202 <validate+0x4e>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d018      	beq.n	8009202 <validate+0x4e>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d013      	beq.n	8009202 <validate+0x4e>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	889a      	ldrh	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	88db      	ldrh	r3, [r3, #6]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d10c      	bne.n	8009202 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fada 	bl	80077a8 <disk_status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <validate+0x4e>
			res = FR_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <validate+0x5a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	e000      	b.n	8009210 <validate+0x5c>
 800920e:	2300      	movs	r3, #0
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	6013      	str	r3, [r2, #0]
	return res;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff fcd5 	bl	8008be6 <get_ldnumber>
 800923c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	da01      	bge.n	8009248 <f_mount+0x28>
 8009244:	230b      	movs	r3, #11
 8009246:	e02b      	b.n	80092a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009248:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <f_mount+0x88>)
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009250:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009258:	69b8      	ldr	r0, [r7, #24]
 800925a:	f7fe fd8b 	bl	8007d74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	490d      	ldr	r1, [pc, #52]	; (80092a8 <f_mount+0x88>)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <f_mount+0x66>
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d001      	beq.n	800928a <f_mount+0x6a>
 8009286:	2300      	movs	r3, #0
 8009288:	e00a      	b.n	80092a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800928a:	f107 010c 	add.w	r1, r7, #12
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	2200      	movs	r2, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff fd41 	bl	8008d1c <find_volume>
 800929a:	4603      	mov	r3, r0
 800929c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800929e:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20000854 	.word	0x20000854

080092ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b098      	sub	sp, #96	; 0x60
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <f_open+0x18>
 80092c0:	2309      	movs	r3, #9
 80092c2:	e1ad      	b.n	8009620 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80092cc:	79fa      	ldrb	r2, [r7, #7]
 80092ce:	f107 0110 	add.w	r1, r7, #16
 80092d2:	f107 0308 	add.w	r3, r7, #8
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fd20 	bl	8008d1c <find_volume>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80092e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f040 8191 	bne.w	800960e <f_open+0x362>
		dj.obj.fs = fs;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	f107 0314 	add.w	r3, r7, #20
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff fc03 	bl	8008b04 <follow_path>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11a      	bne.n	8009342 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800930c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009310:	b25b      	sxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	da03      	bge.n	800931e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009316:	2306      	movs	r3, #6
 8009318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800931c:	e011      	b.n	8009342 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	f023 0301 	bic.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	bf14      	ite	ne
 8009328:	2301      	movne	r3, #1
 800932a:	2300      	moveq	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	f107 0314 	add.w	r3, r7, #20
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fbd4 	bl	8007ae4 <chk_lock>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	f003 031c 	and.w	r3, r3, #28
 8009348:	2b00      	cmp	r3, #0
 800934a:	d07f      	beq.n	800944c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800934c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009350:	2b00      	cmp	r3, #0
 8009352:	d017      	beq.n	8009384 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009358:	2b04      	cmp	r3, #4
 800935a:	d10e      	bne.n	800937a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800935c:	f7fe fc1e 	bl	8007b9c <enq_lock>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d006      	beq.n	8009374 <f_open+0xc8>
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff fb03 	bl	8008976 <dir_register>
 8009370:	4603      	mov	r3, r0
 8009372:	e000      	b.n	8009376 <f_open+0xca>
 8009374:	2312      	movs	r3, #18
 8009376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	f043 0308 	orr.w	r3, r3, #8
 8009380:	71fb      	strb	r3, [r7, #7]
 8009382:	e010      	b.n	80093a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009384:	7ebb      	ldrb	r3, [r7, #26]
 8009386:	f003 0311 	and.w	r3, r3, #17
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <f_open+0xea>
					res = FR_DENIED;
 800938e:	2307      	movs	r3, #7
 8009390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009394:	e007      	b.n	80093a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <f_open+0xfa>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80093a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d168      	bne.n	8009480 <f_open+0x1d4>
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d063      	beq.n	8009480 <f_open+0x1d4>
				dw = GET_FATTIME();
 80093b8:	f7fd ffb4 	bl	8007324 <get_fattime>
 80093bc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	330e      	adds	r3, #14
 80093c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fae3 	bl	8007990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	3316      	adds	r3, #22
 80093ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe fadd 	bl	8007990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	330b      	adds	r3, #11
 80093da:	2220      	movs	r2, #32
 80093dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fa32 	bl	800884e <ld_clust>
 80093ea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093f0:	2200      	movs	r2, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fa4a 	bl	800888c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	331c      	adds	r3, #28
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fac6 	bl	8007990 <st_dword>
					fs->wflag = 1;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2201      	movs	r2, #1
 8009408:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800940a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d037      	beq.n	8009480 <f_open+0x1d4>
						dw = fs->winsect;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	2200      	movs	r2, #0
 800941c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe ff5d 	bl	80082de <remove_chain>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800942a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d126      	bne.n	8009480 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fd04 	bl	8007e44 <move_window>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009446:	3a01      	subs	r2, #1
 8009448:	60da      	str	r2, [r3, #12]
 800944a:	e019      	b.n	8009480 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800944c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009450:	2b00      	cmp	r3, #0
 8009452:	d115      	bne.n	8009480 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009454:	7ebb      	ldrb	r3, [r7, #26]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <f_open+0x1ba>
					res = FR_NO_FILE;
 800945e:	2304      	movs	r3, #4
 8009460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009464:	e00c      	b.n	8009480 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d007      	beq.n	8009480 <f_open+0x1d4>
 8009470:	7ebb      	ldrb	r3, [r7, #26]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <f_open+0x1d4>
						res = FR_DENIED;
 800947a:	2307      	movs	r3, #7
 800947c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009484:	2b00      	cmp	r3, #0
 8009486:	d128      	bne.n	80094da <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	f003 0308 	and.w	r3, r3, #8
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009498:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80094a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	f023 0301 	bic.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	bf14      	ite	ne
 80094b2:	2301      	movne	r3, #1
 80094b4:	2300      	moveq	r3, #0
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fb8d 	bl	8007be0 <inc_lock>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <f_open+0x22e>
 80094d4:	2302      	movs	r3, #2
 80094d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80094da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f040 8095 	bne.w	800960e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff f9af 	bl	800884e <ld_clust>
 80094f0:	4602      	mov	r2, r0
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	331c      	adds	r3, #28
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fa0a 	bl	8007914 <ld_dword>
 8009500:	4602      	mov	r2, r0
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	88da      	ldrh	r2, [r3, #6]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	79fa      	ldrb	r2, [r7, #7]
 800951e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3330      	adds	r3, #48	; 0x30
 8009536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953a:	2100      	movs	r1, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f7fe fa74 	bl	8007a2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d060      	beq.n	800960e <f_open+0x362>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d05c      	beq.n	800960e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	895b      	ldrh	r3, [r3, #10]
 8009560:	025b      	lsls	r3, r3, #9
 8009562:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	657b      	str	r3, [r7, #84]	; 0x54
 8009570:	e016      	b.n	80095a0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fd1f 	bl	8007fba <get_fat>
 800957c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800957e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009580:	2b01      	cmp	r3, #1
 8009582:	d802      	bhi.n	800958a <f_open+0x2de>
 8009584:	2302      	movs	r3, #2
 8009586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800958a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009590:	d102      	bne.n	8009598 <f_open+0x2ec>
 8009592:	2301      	movs	r3, #1
 8009594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800959a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	657b      	str	r3, [r7, #84]	; 0x54
 80095a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <f_open+0x304>
 80095a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d8e0      	bhi.n	8009572 <f_open+0x2c6>
				}
				fp->clust = clst;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80095b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d127      	bne.n	800960e <f_open+0x362>
 80095be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d022      	beq.n	800960e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe fcd5 	bl	8007f7c <clust2sect>
 80095d2:	6478      	str	r0, [r7, #68]	; 0x44
 80095d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d103      	bne.n	80095e2 <f_open+0x336>
						res = FR_INT_ERR;
 80095da:	2302      	movs	r3, #2
 80095dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095e0:	e015      	b.n	800960e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80095e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e4:	0a5a      	lsrs	r2, r3, #9
 80095e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e8:	441a      	add	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	7858      	ldrb	r0, [r3, #1]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1a      	ldr	r2, [r3, #32]
 80095fc:	2301      	movs	r3, #1
 80095fe:	f7fe f913 	bl	8007828 <disk_read>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <f_open+0x362>
 8009608:	2301      	movs	r3, #1
 800960a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800960e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <f_open+0x370>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800961c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009620:	4618      	mov	r0, r3
 8009622:	3760      	adds	r7, #96	; 0x60
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	; 0x38
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f107 0214 	add.w	r2, r7, #20
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fdb3 	bl	80091b4 <validate>
 800964e:	4603      	mov	r3, r0
 8009650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009658:	2b00      	cmp	r3, #0
 800965a:	d107      	bne.n	800966c <f_read+0x44>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	7d5b      	ldrb	r3, [r3, #21]
 8009660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <f_read+0x4a>
 800966c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009670:	e115      	b.n	800989e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	7d1b      	ldrb	r3, [r3, #20]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <f_read+0x5a>
 800967e:	2307      	movs	r3, #7
 8009680:	e10d      	b.n	800989e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	429a      	cmp	r2, r3
 8009694:	f240 80fe 	bls.w	8009894 <f_read+0x26c>
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800969c:	e0fa      	b.n	8009894 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f040 80c6 	bne.w	8009838 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	0a5b      	lsrs	r3, r3, #9
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	8952      	ldrh	r2, [r2, #10]
 80096b6:	3a01      	subs	r2, #1
 80096b8:	4013      	ands	r3, r2
 80096ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d12f      	bne.n	8009722 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	633b      	str	r3, [r7, #48]	; 0x30
 80096d0:	e013      	b.n	80096fa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	4619      	mov	r1, r3
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7fe fef9 	bl	80084d8 <clmt_clust>
 80096e6:	6338      	str	r0, [r7, #48]	; 0x30
 80096e8:	e007      	b.n	80096fa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7fe fc61 	bl	8007fba <get_fat>
 80096f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d804      	bhi.n	800970a <f_read+0xe2>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2202      	movs	r2, #2
 8009704:	755a      	strb	r2, [r3, #21]
 8009706:	2302      	movs	r3, #2
 8009708:	e0c9      	b.n	800989e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d104      	bne.n	800971c <f_read+0xf4>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	755a      	strb	r2, [r3, #21]
 8009718:	2301      	movs	r3, #1
 800971a:	e0c0      	b.n	800989e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009720:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7fe fc26 	bl	8007f7c <clust2sect>
 8009730:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <f_read+0x11a>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2202      	movs	r2, #2
 800973c:	755a      	strb	r2, [r3, #21]
 800973e:	2302      	movs	r3, #2
 8009740:	e0ad      	b.n	800989e <f_read+0x276>
			sect += csect;
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	4413      	add	r3, r2
 8009748:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	0a5b      	lsrs	r3, r3, #9
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d039      	beq.n	80097ca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	4413      	add	r3, r2
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	8952      	ldrh	r2, [r2, #10]
 8009760:	4293      	cmp	r3, r2
 8009762:	d905      	bls.n	8009770 <f_read+0x148>
					cc = fs->csize - csect;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	895b      	ldrh	r3, [r3, #10]
 8009768:	461a      	mov	r2, r3
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	7858      	ldrb	r0, [r3, #1]
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800977a:	f7fe f855 	bl	8007828 <disk_read>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <f_read+0x166>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	755a      	strb	r2, [r3, #21]
 800978a:	2301      	movs	r3, #1
 800978c:	e087      	b.n	800989e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	7d1b      	ldrb	r3, [r3, #20]
 8009792:	b25b      	sxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	da14      	bge.n	80097c2 <f_read+0x19a>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d90d      	bls.n	80097c2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1a      	ldr	r2, [r3, #32]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	025b      	lsls	r3, r3, #9
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	18d0      	adds	r0, r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3330      	adds	r3, #48	; 0x30
 80097b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097bc:	4619      	mov	r1, r3
 80097be:	f7fe f913 	bl	80079e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	025b      	lsls	r3, r3, #9
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80097c8:	e050      	b.n	800986c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d02e      	beq.n	8009832 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	7d1b      	ldrb	r3, [r3, #20]
 80097d8:	b25b      	sxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da18      	bge.n	8009810 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	7858      	ldrb	r0, [r3, #1]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	2301      	movs	r3, #1
 80097ee:	f7fe f83b 	bl	8007868 <disk_write>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <f_read+0x1da>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	755a      	strb	r2, [r3, #21]
 80097fe:	2301      	movs	r3, #1
 8009800:	e04d      	b.n	800989e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	b2da      	uxtb	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	7858      	ldrb	r0, [r3, #1]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800981a:	2301      	movs	r3, #1
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	f7fe f803 	bl	8007828 <disk_read>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <f_read+0x20a>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	755a      	strb	r2, [r3, #21]
 800982e:	2301      	movs	r3, #1
 8009830:	e035      	b.n	800989e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009840:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d901      	bls.n	8009852 <f_read+0x22a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009860:	4413      	add	r3, r2
 8009862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009864:	4619      	mov	r1, r3
 8009866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009868:	f7fe f8be 	bl	80079e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	4413      	add	r3, r2
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	441a      	add	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	619a      	str	r2, [r3, #24]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	441a      	add	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f47f af01 	bne.w	800969e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3738      	adds	r7, #56	; 0x38
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f107 0208 	add.w	r2, r7, #8
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff fc7c 	bl	80091b4 <validate>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d168      	bne.n	8009998 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d062      	beq.n	8009998 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7d1b      	ldrb	r3, [r3, #20]
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da15      	bge.n	8009908 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	7858      	ldrb	r0, [r3, #1]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	2301      	movs	r3, #1
 80098ec:	f7fd ffbc 	bl	8007868 <disk_write>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <f_sync+0x54>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e04f      	b.n	800999a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7d1b      	ldrb	r3, [r3, #20]
 80098fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009902:	b2da      	uxtb	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009908:	f7fd fd0c 	bl	8007324 <get_fattime>
 800990c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7fe fa94 	bl	8007e44 <move_window>
 800991c:	4603      	mov	r3, r0
 800991e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d138      	bne.n	8009998 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	330b      	adds	r3, #11
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	330b      	adds	r3, #11
 8009936:	f042 0220 	orr.w	r2, r2, #32
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	461a      	mov	r2, r3
 8009948:	68f9      	ldr	r1, [r7, #12]
 800994a:	f7fe ff9f 	bl	800888c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f103 021c 	add.w	r2, r3, #28
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7fe f818 	bl	8007990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3316      	adds	r3, #22
 8009964:	6939      	ldr	r1, [r7, #16]
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe f812 	bl	8007990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3312      	adds	r3, #18
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd fff1 	bl	800795a <st_word>
					fs->wflag = 1;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2201      	movs	r2, #1
 800997c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fa8d 	bl	8007ea0 <sync_fs>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	7d1b      	ldrb	r3, [r3, #20]
 800998e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009992:	b2da      	uxtb	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009998:	7dfb      	ldrb	r3, [r7, #23]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff ff7b 	bl	80098a6 <f_sync>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d118      	bne.n	80099ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f107 0208 	add.w	r2, r7, #8
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fbf6 	bl	80091b4 <validate>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe f990 	bl	8007cfc <dec_lock>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b088      	sub	sp, #32
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a0a:	e01b      	b.n	8009a44 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009a0c:	f107 0310 	add.w	r3, r7, #16
 8009a10:	f107 0114 	add.w	r1, r7, #20
 8009a14:	2201      	movs	r2, #1
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff fe06 	bl	8009628 <f_read>
		if (rc != 1) break;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d116      	bne.n	8009a50 <f_gets+0x5a>
		c = s[0];
 8009a22:	7d3b      	ldrb	r3, [r7, #20]
 8009a24:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	2b0d      	cmp	r3, #13
 8009a2a:	d100      	bne.n	8009a2e <f_gets+0x38>
 8009a2c:	e00a      	b.n	8009a44 <f_gets+0x4e>
		*p++ = c;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	61ba      	str	r2, [r7, #24]
 8009a34:	7dfa      	ldrb	r2, [r7, #23]
 8009a36:	701a      	strb	r2, [r3, #0]
		n++;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	2b0a      	cmp	r3, #10
 8009a42:	d007      	beq.n	8009a54 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	dbde      	blt.n	8009a0c <f_gets+0x16>
 8009a4e:	e002      	b.n	8009a56 <f_gets+0x60>
		if (rc != 1) break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009a54:	bf00      	nop
	}
	*p = 0;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <f_gets+0x70>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	e000      	b.n	8009a68 <f_gets+0x72>
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a86:	4b1f      	ldr	r3, [pc, #124]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a88:	7a5b      	ldrb	r3, [r3, #9]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d131      	bne.n	8009af4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a90:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a92:	7a5b      	ldrb	r3, [r3, #9]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a9e:	4b19      	ldr	r3, [pc, #100]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aa0:	7a5b      	ldrb	r3, [r3, #9]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4a17      	ldr	r2, [pc, #92]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aae:	4b15      	ldr	r3, [pc, #84]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ab0:	7a5b      	ldrb	r3, [r3, #9]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ab8:	4413      	add	r3, r2
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009ac0:	7a5b      	ldrb	r3, [r3, #9]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	b2d1      	uxtb	r1, r2
 8009ac8:	4a0e      	ldr	r2, [pc, #56]	; (8009b04 <FATFS_LinkDriverEx+0x94>)
 8009aca:	7251      	strb	r1, [r2, #9]
 8009acc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ace:	7dbb      	ldrb	r3, [r7, #22]
 8009ad0:	3330      	adds	r3, #48	; 0x30
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3301      	adds	r3, #1
 8009adc:	223a      	movs	r2, #58	; 0x3a
 8009ade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	222f      	movs	r2, #47	; 0x2f
 8009ae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3303      	adds	r3, #3
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	2000087c 	.word	0x2000087c

08009b08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b12:	2200      	movs	r2, #0
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff ffaa 	bl	8009a70 <FATFS_LinkDriverEx>
 8009b1c:	4603      	mov	r3, r0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <atoi>:
 8009b26:	220a      	movs	r2, #10
 8009b28:	2100      	movs	r1, #0
 8009b2a:	f000 b883 	b.w	8009c34 <strtol>
	...

08009b30 <_strtol_l.constprop.0>:
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b36:	d001      	beq.n	8009b3c <_strtol_l.constprop.0+0xc>
 8009b38:	2b24      	cmp	r3, #36	; 0x24
 8009b3a:	d906      	bls.n	8009b4a <_strtol_l.constprop.0+0x1a>
 8009b3c:	f000 fa34 	bl	8009fa8 <__errno>
 8009b40:	2316      	movs	r3, #22
 8009b42:	6003      	str	r3, [r0, #0]
 8009b44:	2000      	movs	r0, #0
 8009b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c30 <_strtol_l.constprop.0+0x100>
 8009b4e:	460d      	mov	r5, r1
 8009b50:	462e      	mov	r6, r5
 8009b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009b5a:	f017 0708 	ands.w	r7, r7, #8
 8009b5e:	d1f7      	bne.n	8009b50 <_strtol_l.constprop.0+0x20>
 8009b60:	2c2d      	cmp	r4, #45	; 0x2d
 8009b62:	d132      	bne.n	8009bca <_strtol_l.constprop.0+0x9a>
 8009b64:	782c      	ldrb	r4, [r5, #0]
 8009b66:	2701      	movs	r7, #1
 8009b68:	1cb5      	adds	r5, r6, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d05b      	beq.n	8009c26 <_strtol_l.constprop.0+0xf6>
 8009b6e:	2b10      	cmp	r3, #16
 8009b70:	d109      	bne.n	8009b86 <_strtol_l.constprop.0+0x56>
 8009b72:	2c30      	cmp	r4, #48	; 0x30
 8009b74:	d107      	bne.n	8009b86 <_strtol_l.constprop.0+0x56>
 8009b76:	782c      	ldrb	r4, [r5, #0]
 8009b78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b7c:	2c58      	cmp	r4, #88	; 0x58
 8009b7e:	d14d      	bne.n	8009c1c <_strtol_l.constprop.0+0xec>
 8009b80:	786c      	ldrb	r4, [r5, #1]
 8009b82:	2310      	movs	r3, #16
 8009b84:	3502      	adds	r5, #2
 8009b86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b8e:	f04f 0e00 	mov.w	lr, #0
 8009b92:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b96:	4676      	mov	r6, lr
 8009b98:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ba0:	f1bc 0f09 	cmp.w	ip, #9
 8009ba4:	d816      	bhi.n	8009bd4 <_strtol_l.constprop.0+0xa4>
 8009ba6:	4664      	mov	r4, ip
 8009ba8:	42a3      	cmp	r3, r4
 8009baa:	dd24      	ble.n	8009bf6 <_strtol_l.constprop.0+0xc6>
 8009bac:	f1be 3fff 	cmp.w	lr, #4294967295
 8009bb0:	d008      	beq.n	8009bc4 <_strtol_l.constprop.0+0x94>
 8009bb2:	45b1      	cmp	r9, r6
 8009bb4:	d31c      	bcc.n	8009bf0 <_strtol_l.constprop.0+0xc0>
 8009bb6:	d101      	bne.n	8009bbc <_strtol_l.constprop.0+0x8c>
 8009bb8:	45a2      	cmp	sl, r4
 8009bba:	db19      	blt.n	8009bf0 <_strtol_l.constprop.0+0xc0>
 8009bbc:	fb06 4603 	mla	r6, r6, r3, r4
 8009bc0:	f04f 0e01 	mov.w	lr, #1
 8009bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bc8:	e7e8      	b.n	8009b9c <_strtol_l.constprop.0+0x6c>
 8009bca:	2c2b      	cmp	r4, #43	; 0x2b
 8009bcc:	bf04      	itt	eq
 8009bce:	782c      	ldrbeq	r4, [r5, #0]
 8009bd0:	1cb5      	addeq	r5, r6, #2
 8009bd2:	e7ca      	b.n	8009b6a <_strtol_l.constprop.0+0x3a>
 8009bd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009bd8:	f1bc 0f19 	cmp.w	ip, #25
 8009bdc:	d801      	bhi.n	8009be2 <_strtol_l.constprop.0+0xb2>
 8009bde:	3c37      	subs	r4, #55	; 0x37
 8009be0:	e7e2      	b.n	8009ba8 <_strtol_l.constprop.0+0x78>
 8009be2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009be6:	f1bc 0f19 	cmp.w	ip, #25
 8009bea:	d804      	bhi.n	8009bf6 <_strtol_l.constprop.0+0xc6>
 8009bec:	3c57      	subs	r4, #87	; 0x57
 8009bee:	e7db      	b.n	8009ba8 <_strtol_l.constprop.0+0x78>
 8009bf0:	f04f 3eff 	mov.w	lr, #4294967295
 8009bf4:	e7e6      	b.n	8009bc4 <_strtol_l.constprop.0+0x94>
 8009bf6:	f1be 3fff 	cmp.w	lr, #4294967295
 8009bfa:	d105      	bne.n	8009c08 <_strtol_l.constprop.0+0xd8>
 8009bfc:	2322      	movs	r3, #34	; 0x22
 8009bfe:	6003      	str	r3, [r0, #0]
 8009c00:	4646      	mov	r6, r8
 8009c02:	b942      	cbnz	r2, 8009c16 <_strtol_l.constprop.0+0xe6>
 8009c04:	4630      	mov	r0, r6
 8009c06:	e79e      	b.n	8009b46 <_strtol_l.constprop.0+0x16>
 8009c08:	b107      	cbz	r7, 8009c0c <_strtol_l.constprop.0+0xdc>
 8009c0a:	4276      	negs	r6, r6
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	d0f9      	beq.n	8009c04 <_strtol_l.constprop.0+0xd4>
 8009c10:	f1be 0f00 	cmp.w	lr, #0
 8009c14:	d000      	beq.n	8009c18 <_strtol_l.constprop.0+0xe8>
 8009c16:	1e69      	subs	r1, r5, #1
 8009c18:	6011      	str	r1, [r2, #0]
 8009c1a:	e7f3      	b.n	8009c04 <_strtol_l.constprop.0+0xd4>
 8009c1c:	2430      	movs	r4, #48	; 0x30
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1b1      	bne.n	8009b86 <_strtol_l.constprop.0+0x56>
 8009c22:	2308      	movs	r3, #8
 8009c24:	e7af      	b.n	8009b86 <_strtol_l.constprop.0+0x56>
 8009c26:	2c30      	cmp	r4, #48	; 0x30
 8009c28:	d0a5      	beq.n	8009b76 <_strtol_l.constprop.0+0x46>
 8009c2a:	230a      	movs	r3, #10
 8009c2c:	e7ab      	b.n	8009b86 <_strtol_l.constprop.0+0x56>
 8009c2e:	bf00      	nop
 8009c30:	0800bd31 	.word	0x0800bd31

08009c34 <strtol>:
 8009c34:	4613      	mov	r3, r2
 8009c36:	460a      	mov	r2, r1
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4802      	ldr	r0, [pc, #8]	; (8009c44 <strtol+0x10>)
 8009c3c:	6800      	ldr	r0, [r0, #0]
 8009c3e:	f7ff bf77 	b.w	8009b30 <_strtol_l.constprop.0>
 8009c42:	bf00      	nop
 8009c44:	20000064 	.word	0x20000064

08009c48 <std>:
 8009c48:	2300      	movs	r3, #0
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c56:	6083      	str	r3, [r0, #8]
 8009c58:	8181      	strh	r1, [r0, #12]
 8009c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c5c:	81c2      	strh	r2, [r0, #14]
 8009c5e:	6183      	str	r3, [r0, #24]
 8009c60:	4619      	mov	r1, r3
 8009c62:	2208      	movs	r2, #8
 8009c64:	305c      	adds	r0, #92	; 0x5c
 8009c66:	f000 f8f4 	bl	8009e52 <memset>
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <std+0x58>)
 8009c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <std+0x5c>)
 8009c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c72:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <std+0x60>)
 8009c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c76:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <std+0x64>)
 8009c78:	6323      	str	r3, [r4, #48]	; 0x30
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <std+0x68>)
 8009c7c:	6224      	str	r4, [r4, #32]
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d006      	beq.n	8009c90 <std+0x48>
 8009c82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c86:	4294      	cmp	r4, r2
 8009c88:	d002      	beq.n	8009c90 <std+0x48>
 8009c8a:	33d0      	adds	r3, #208	; 0xd0
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d105      	bne.n	8009c9c <std+0x54>
 8009c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c98:	f000 b9b0 	b.w	8009ffc <__retarget_lock_init_recursive>
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08009dcd 	.word	0x08009dcd
 8009ca4:	08009def 	.word	0x08009def
 8009ca8:	08009e27 	.word	0x08009e27
 8009cac:	08009e4b 	.word	0x08009e4b
 8009cb0:	20000888 	.word	0x20000888

08009cb4 <stdio_exit_handler>:
 8009cb4:	4a02      	ldr	r2, [pc, #8]	; (8009cc0 <stdio_exit_handler+0xc>)
 8009cb6:	4903      	ldr	r1, [pc, #12]	; (8009cc4 <stdio_exit_handler+0x10>)
 8009cb8:	4803      	ldr	r0, [pc, #12]	; (8009cc8 <stdio_exit_handler+0x14>)
 8009cba:	f000 b869 	b.w	8009d90 <_fwalk_sglue>
 8009cbe:	bf00      	nop
 8009cc0:	2000000c 	.word	0x2000000c
 8009cc4:	0800a34d 	.word	0x0800a34d
 8009cc8:	20000018 	.word	0x20000018

08009ccc <cleanup_stdio>:
 8009ccc:	6841      	ldr	r1, [r0, #4]
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <cleanup_stdio+0x34>)
 8009cd0:	4299      	cmp	r1, r3
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	d001      	beq.n	8009cdc <cleanup_stdio+0x10>
 8009cd8:	f000 fb38 	bl	800a34c <_fflush_r>
 8009cdc:	68a1      	ldr	r1, [r4, #8]
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <cleanup_stdio+0x38>)
 8009ce0:	4299      	cmp	r1, r3
 8009ce2:	d002      	beq.n	8009cea <cleanup_stdio+0x1e>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 fb31 	bl	800a34c <_fflush_r>
 8009cea:	68e1      	ldr	r1, [r4, #12]
 8009cec:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <cleanup_stdio+0x3c>)
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	d004      	beq.n	8009cfc <cleanup_stdio+0x30>
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf8:	f000 bb28 	b.w	800a34c <_fflush_r>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000888 	.word	0x20000888
 8009d04:	200008f0 	.word	0x200008f0
 8009d08:	20000958 	.word	0x20000958

08009d0c <global_stdio_init.part.0>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <global_stdio_init.part.0+0x30>)
 8009d10:	4c0b      	ldr	r4, [pc, #44]	; (8009d40 <global_stdio_init.part.0+0x34>)
 8009d12:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <global_stdio_init.part.0+0x38>)
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	4620      	mov	r0, r4
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	f7ff ff94 	bl	8009c48 <std>
 8009d20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d24:	2201      	movs	r2, #1
 8009d26:	2109      	movs	r1, #9
 8009d28:	f7ff ff8e 	bl	8009c48 <std>
 8009d2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d30:	2202      	movs	r2, #2
 8009d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d36:	2112      	movs	r1, #18
 8009d38:	f7ff bf86 	b.w	8009c48 <std>
 8009d3c:	200009c0 	.word	0x200009c0
 8009d40:	20000888 	.word	0x20000888
 8009d44:	08009cb5 	.word	0x08009cb5

08009d48 <__sfp_lock_acquire>:
 8009d48:	4801      	ldr	r0, [pc, #4]	; (8009d50 <__sfp_lock_acquire+0x8>)
 8009d4a:	f000 b958 	b.w	8009ffe <__retarget_lock_acquire_recursive>
 8009d4e:	bf00      	nop
 8009d50:	200009c9 	.word	0x200009c9

08009d54 <__sfp_lock_release>:
 8009d54:	4801      	ldr	r0, [pc, #4]	; (8009d5c <__sfp_lock_release+0x8>)
 8009d56:	f000 b953 	b.w	800a000 <__retarget_lock_release_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	200009c9 	.word	0x200009c9

08009d60 <__sinit>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	4604      	mov	r4, r0
 8009d64:	f7ff fff0 	bl	8009d48 <__sfp_lock_acquire>
 8009d68:	6a23      	ldr	r3, [r4, #32]
 8009d6a:	b11b      	cbz	r3, 8009d74 <__sinit+0x14>
 8009d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d70:	f7ff bff0 	b.w	8009d54 <__sfp_lock_release>
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <__sinit+0x28>)
 8009d76:	6223      	str	r3, [r4, #32]
 8009d78:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <__sinit+0x2c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1f5      	bne.n	8009d6c <__sinit+0xc>
 8009d80:	f7ff ffc4 	bl	8009d0c <global_stdio_init.part.0>
 8009d84:	e7f2      	b.n	8009d6c <__sinit+0xc>
 8009d86:	bf00      	nop
 8009d88:	08009ccd 	.word	0x08009ccd
 8009d8c:	200009c0 	.word	0x200009c0

08009d90 <_fwalk_sglue>:
 8009d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d94:	4607      	mov	r7, r0
 8009d96:	4688      	mov	r8, r1
 8009d98:	4614      	mov	r4, r2
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009da0:	f1b9 0901 	subs.w	r9, r9, #1
 8009da4:	d505      	bpl.n	8009db2 <_fwalk_sglue+0x22>
 8009da6:	6824      	ldr	r4, [r4, #0]
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	d1f7      	bne.n	8009d9c <_fwalk_sglue+0xc>
 8009dac:	4630      	mov	r0, r6
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d907      	bls.n	8009dc8 <_fwalk_sglue+0x38>
 8009db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	d003      	beq.n	8009dc8 <_fwalk_sglue+0x38>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	47c0      	blx	r8
 8009dc6:	4306      	orrs	r6, r0
 8009dc8:	3568      	adds	r5, #104	; 0x68
 8009dca:	e7e9      	b.n	8009da0 <_fwalk_sglue+0x10>

08009dcc <__sread>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	f000 f8c4 	bl	8009f60 <_read_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	bfab      	itete	ge
 8009ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dde:	89a3      	ldrhlt	r3, [r4, #12]
 8009de0:	181b      	addge	r3, r3, r0
 8009de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009de6:	bfac      	ite	ge
 8009de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dea:	81a3      	strhlt	r3, [r4, #12]
 8009dec:	bd10      	pop	{r4, pc}

08009dee <__swrite>:
 8009dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df2:	461f      	mov	r7, r3
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	d505      	bpl.n	8009e0c <__swrite+0x1e>
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	2302      	movs	r3, #2
 8009e06:	2200      	movs	r2, #0
 8009e08:	f000 f898 	bl	8009f3c <_lseek_r>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e16:	81a3      	strh	r3, [r4, #12]
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	f000 b8af 	b.w	8009f84 <_write_r>

08009e26 <__sseek>:
 8009e26:	b510      	push	{r4, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 f885 	bl	8009f3c <_lseek_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	bf15      	itete	ne
 8009e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e42:	81a3      	strheq	r3, [r4, #12]
 8009e44:	bf18      	it	ne
 8009e46:	81a3      	strhne	r3, [r4, #12]
 8009e48:	bd10      	pop	{r4, pc}

08009e4a <__sclose>:
 8009e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4e:	f000 b865 	b.w	8009f1c <_close_r>

08009e52 <memset>:
 8009e52:	4402      	add	r2, r0
 8009e54:	4603      	mov	r3, r0
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d100      	bne.n	8009e5c <memset+0xa>
 8009e5a:	4770      	bx	lr
 8009e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e60:	e7f9      	b.n	8009e56 <memset+0x4>
	...

08009e64 <strtok>:
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <strtok+0x5c>)
 8009e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e68:	681e      	ldr	r6, [r3, #0]
 8009e6a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	b9fc      	cbnz	r4, 8009eb0 <strtok+0x4c>
 8009e70:	2050      	movs	r0, #80	; 0x50
 8009e72:	9101      	str	r1, [sp, #4]
 8009e74:	f000 f930 	bl	800a0d8 <malloc>
 8009e78:	9901      	ldr	r1, [sp, #4]
 8009e7a:	6470      	str	r0, [r6, #68]	; 0x44
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	b920      	cbnz	r0, 8009e8a <strtok+0x26>
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <strtok+0x60>)
 8009e82:	4811      	ldr	r0, [pc, #68]	; (8009ec8 <strtok+0x64>)
 8009e84:	215b      	movs	r1, #91	; 0x5b
 8009e86:	f000 f8bd 	bl	800a004 <__assert_func>
 8009e8a:	e9c0 4400 	strd	r4, r4, [r0]
 8009e8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009e9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009e9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009ea2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009ea6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009eaa:	6184      	str	r4, [r0, #24]
 8009eac:	7704      	strb	r4, [r0, #28]
 8009eae:	6244      	str	r4, [r0, #36]	; 0x24
 8009eb0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	b002      	add	sp, #8
 8009eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ebc:	f000 b806 	b.w	8009ecc <__strtok_r>
 8009ec0:	20000064 	.word	0x20000064
 8009ec4:	0800be31 	.word	0x0800be31
 8009ec8:	0800be48 	.word	0x0800be48

08009ecc <__strtok_r>:
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ece:	b908      	cbnz	r0, 8009ed4 <__strtok_r+0x8>
 8009ed0:	6810      	ldr	r0, [r2, #0]
 8009ed2:	b188      	cbz	r0, 8009ef8 <__strtok_r+0x2c>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009edc:	460f      	mov	r7, r1
 8009ede:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ee2:	b91e      	cbnz	r6, 8009eec <__strtok_r+0x20>
 8009ee4:	b965      	cbnz	r5, 8009f00 <__strtok_r+0x34>
 8009ee6:	6015      	str	r5, [r2, #0]
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e005      	b.n	8009ef8 <__strtok_r+0x2c>
 8009eec:	42b5      	cmp	r5, r6
 8009eee:	d1f6      	bne.n	8009ede <__strtok_r+0x12>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <__strtok_r+0xa>
 8009ef4:	6014      	str	r4, [r2, #0]
 8009ef6:	7003      	strb	r3, [r0, #0]
 8009ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efa:	461c      	mov	r4, r3
 8009efc:	e00c      	b.n	8009f18 <__strtok_r+0x4c>
 8009efe:	b915      	cbnz	r5, 8009f06 <__strtok_r+0x3a>
 8009f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f04:	460e      	mov	r6, r1
 8009f06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f0a:	42ab      	cmp	r3, r5
 8009f0c:	d1f7      	bne.n	8009efe <__strtok_r+0x32>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f3      	beq.n	8009efa <__strtok_r+0x2e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	e7ed      	b.n	8009ef8 <__strtok_r+0x2c>

08009f1c <_close_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d06      	ldr	r5, [pc, #24]	; (8009f38 <_close_r+0x1c>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	f7f8 fbb9 	bl	800269e <_close>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_close_r+0x1a>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_close_r+0x1a>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	200009c4 	.word	0x200009c4

08009f3c <_lseek_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	; (8009f5c <_lseek_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f8 fbce 	bl	80026ec <_lseek>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_lseek_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_lseek_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	200009c4 	.word	0x200009c4

08009f60 <_read_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_read_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f8 fb5c 	bl	800262c <_read>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_read_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_read_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	200009c4 	.word	0x200009c4

08009f84 <_write_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d07      	ldr	r5, [pc, #28]	; (8009fa4 <_write_r+0x20>)
 8009f88:	4604      	mov	r4, r0
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	602a      	str	r2, [r5, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f7f8 fb67 	bl	8002666 <_write>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_write_r+0x1e>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_write_r+0x1e>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	200009c4 	.word	0x200009c4

08009fa8 <__errno>:
 8009fa8:	4b01      	ldr	r3, [pc, #4]	; (8009fb0 <__errno+0x8>)
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	20000064 	.word	0x20000064

08009fb4 <__libc_init_array>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4d0d      	ldr	r5, [pc, #52]	; (8009fec <__libc_init_array+0x38>)
 8009fb8:	4c0d      	ldr	r4, [pc, #52]	; (8009ff0 <__libc_init_array+0x3c>)
 8009fba:	1b64      	subs	r4, r4, r5
 8009fbc:	10a4      	asrs	r4, r4, #2
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	42a6      	cmp	r6, r4
 8009fc2:	d109      	bne.n	8009fd8 <__libc_init_array+0x24>
 8009fc4:	4d0b      	ldr	r5, [pc, #44]	; (8009ff4 <__libc_init_array+0x40>)
 8009fc6:	4c0c      	ldr	r4, [pc, #48]	; (8009ff8 <__libc_init_array+0x44>)
 8009fc8:	f001 fe12 	bl	800bbf0 <_init>
 8009fcc:	1b64      	subs	r4, r4, r5
 8009fce:	10a4      	asrs	r4, r4, #2
 8009fd0:	2600      	movs	r6, #0
 8009fd2:	42a6      	cmp	r6, r4
 8009fd4:	d105      	bne.n	8009fe2 <__libc_init_array+0x2e>
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fdc:	4798      	blx	r3
 8009fde:	3601      	adds	r6, #1
 8009fe0:	e7ee      	b.n	8009fc0 <__libc_init_array+0xc>
 8009fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe6:	4798      	blx	r3
 8009fe8:	3601      	adds	r6, #1
 8009fea:	e7f2      	b.n	8009fd2 <__libc_init_array+0x1e>
 8009fec:	0800bf50 	.word	0x0800bf50
 8009ff0:	0800bf50 	.word	0x0800bf50
 8009ff4:	0800bf50 	.word	0x0800bf50
 8009ff8:	0800bf54 	.word	0x0800bf54

08009ffc <__retarget_lock_init_recursive>:
 8009ffc:	4770      	bx	lr

08009ffe <__retarget_lock_acquire_recursive>:
 8009ffe:	4770      	bx	lr

0800a000 <__retarget_lock_release_recursive>:
 800a000:	4770      	bx	lr
	...

0800a004 <__assert_func>:
 800a004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a006:	4614      	mov	r4, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <__assert_func+0x2c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4605      	mov	r5, r0
 800a010:	68d8      	ldr	r0, [r3, #12]
 800a012:	b14c      	cbz	r4, 800a028 <__assert_func+0x24>
 800a014:	4b07      	ldr	r3, [pc, #28]	; (800a034 <__assert_func+0x30>)
 800a016:	9100      	str	r1, [sp, #0]
 800a018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a01c:	4906      	ldr	r1, [pc, #24]	; (800a038 <__assert_func+0x34>)
 800a01e:	462b      	mov	r3, r5
 800a020:	f000 f9bc 	bl	800a39c <fiprintf>
 800a024:	f000 f9dc 	bl	800a3e0 <abort>
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <__assert_func+0x38>)
 800a02a:	461c      	mov	r4, r3
 800a02c:	e7f3      	b.n	800a016 <__assert_func+0x12>
 800a02e:	bf00      	nop
 800a030:	20000064 	.word	0x20000064
 800a034:	0800bea2 	.word	0x0800bea2
 800a038:	0800beaf 	.word	0x0800beaf
 800a03c:	0800bedd 	.word	0x0800bedd

0800a040 <_free_r>:
 800a040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a042:	2900      	cmp	r1, #0
 800a044:	d044      	beq.n	800a0d0 <_free_r+0x90>
 800a046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a04a:	9001      	str	r0, [sp, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f1a1 0404 	sub.w	r4, r1, #4
 800a052:	bfb8      	it	lt
 800a054:	18e4      	addlt	r4, r4, r3
 800a056:	f000 f8e7 	bl	800a228 <__malloc_lock>
 800a05a:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <_free_r+0x94>)
 800a05c:	9801      	ldr	r0, [sp, #4]
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	b933      	cbnz	r3, 800a070 <_free_r+0x30>
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	6014      	str	r4, [r2, #0]
 800a066:	b003      	add	sp, #12
 800a068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a06c:	f000 b8e2 	b.w	800a234 <__malloc_unlock>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d908      	bls.n	800a086 <_free_r+0x46>
 800a074:	6825      	ldr	r5, [r4, #0]
 800a076:	1961      	adds	r1, r4, r5
 800a078:	428b      	cmp	r3, r1
 800a07a:	bf01      	itttt	eq
 800a07c:	6819      	ldreq	r1, [r3, #0]
 800a07e:	685b      	ldreq	r3, [r3, #4]
 800a080:	1949      	addeq	r1, r1, r5
 800a082:	6021      	streq	r1, [r4, #0]
 800a084:	e7ed      	b.n	800a062 <_free_r+0x22>
 800a086:	461a      	mov	r2, r3
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	b10b      	cbz	r3, 800a090 <_free_r+0x50>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d9fa      	bls.n	800a086 <_free_r+0x46>
 800a090:	6811      	ldr	r1, [r2, #0]
 800a092:	1855      	adds	r5, r2, r1
 800a094:	42a5      	cmp	r5, r4
 800a096:	d10b      	bne.n	800a0b0 <_free_r+0x70>
 800a098:	6824      	ldr	r4, [r4, #0]
 800a09a:	4421      	add	r1, r4
 800a09c:	1854      	adds	r4, r2, r1
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	d1e0      	bne.n	800a066 <_free_r+0x26>
 800a0a4:	681c      	ldr	r4, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	6053      	str	r3, [r2, #4]
 800a0aa:	440c      	add	r4, r1
 800a0ac:	6014      	str	r4, [r2, #0]
 800a0ae:	e7da      	b.n	800a066 <_free_r+0x26>
 800a0b0:	d902      	bls.n	800a0b8 <_free_r+0x78>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	6003      	str	r3, [r0, #0]
 800a0b6:	e7d6      	b.n	800a066 <_free_r+0x26>
 800a0b8:	6825      	ldr	r5, [r4, #0]
 800a0ba:	1961      	adds	r1, r4, r5
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	bf04      	itt	eq
 800a0c0:	6819      	ldreq	r1, [r3, #0]
 800a0c2:	685b      	ldreq	r3, [r3, #4]
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	bf04      	itt	eq
 800a0c8:	1949      	addeq	r1, r1, r5
 800a0ca:	6021      	streq	r1, [r4, #0]
 800a0cc:	6054      	str	r4, [r2, #4]
 800a0ce:	e7ca      	b.n	800a066 <_free_r+0x26>
 800a0d0:	b003      	add	sp, #12
 800a0d2:	bd30      	pop	{r4, r5, pc}
 800a0d4:	200009cc 	.word	0x200009cc

0800a0d8 <malloc>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <malloc+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f000 b823 	b.w	800a128 <_malloc_r>
 800a0e2:	bf00      	nop
 800a0e4:	20000064 	.word	0x20000064

0800a0e8 <sbrk_aligned>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	4e0e      	ldr	r6, [pc, #56]	; (800a124 <sbrk_aligned+0x3c>)
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6831      	ldr	r1, [r6, #0]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	b911      	cbnz	r1, 800a0fa <sbrk_aligned+0x12>
 800a0f4:	f000 f964 	bl	800a3c0 <_sbrk_r>
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 f95f 	bl	800a3c0 <_sbrk_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d00a      	beq.n	800a11c <sbrk_aligned+0x34>
 800a106:	1cc4      	adds	r4, r0, #3
 800a108:	f024 0403 	bic.w	r4, r4, #3
 800a10c:	42a0      	cmp	r0, r4
 800a10e:	d007      	beq.n	800a120 <sbrk_aligned+0x38>
 800a110:	1a21      	subs	r1, r4, r0
 800a112:	4628      	mov	r0, r5
 800a114:	f000 f954 	bl	800a3c0 <_sbrk_r>
 800a118:	3001      	adds	r0, #1
 800a11a:	d101      	bne.n	800a120 <sbrk_aligned+0x38>
 800a11c:	f04f 34ff 	mov.w	r4, #4294967295
 800a120:	4620      	mov	r0, r4
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	200009d0 	.word	0x200009d0

0800a128 <_malloc_r>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	1ccd      	adds	r5, r1, #3
 800a12e:	f025 0503 	bic.w	r5, r5, #3
 800a132:	3508      	adds	r5, #8
 800a134:	2d0c      	cmp	r5, #12
 800a136:	bf38      	it	cc
 800a138:	250c      	movcc	r5, #12
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	4607      	mov	r7, r0
 800a13e:	db01      	blt.n	800a144 <_malloc_r+0x1c>
 800a140:	42a9      	cmp	r1, r5
 800a142:	d905      	bls.n	800a150 <_malloc_r+0x28>
 800a144:	230c      	movs	r3, #12
 800a146:	603b      	str	r3, [r7, #0]
 800a148:	2600      	movs	r6, #0
 800a14a:	4630      	mov	r0, r6
 800a14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a224 <_malloc_r+0xfc>
 800a154:	f000 f868 	bl	800a228 <__malloc_lock>
 800a158:	f8d8 3000 	ldr.w	r3, [r8]
 800a15c:	461c      	mov	r4, r3
 800a15e:	bb5c      	cbnz	r4, 800a1b8 <_malloc_r+0x90>
 800a160:	4629      	mov	r1, r5
 800a162:	4638      	mov	r0, r7
 800a164:	f7ff ffc0 	bl	800a0e8 <sbrk_aligned>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	4604      	mov	r4, r0
 800a16c:	d155      	bne.n	800a21a <_malloc_r+0xf2>
 800a16e:	f8d8 4000 	ldr.w	r4, [r8]
 800a172:	4626      	mov	r6, r4
 800a174:	2e00      	cmp	r6, #0
 800a176:	d145      	bne.n	800a204 <_malloc_r+0xdc>
 800a178:	2c00      	cmp	r4, #0
 800a17a:	d048      	beq.n	800a20e <_malloc_r+0xe6>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	4631      	mov	r1, r6
 800a180:	4638      	mov	r0, r7
 800a182:	eb04 0903 	add.w	r9, r4, r3
 800a186:	f000 f91b 	bl	800a3c0 <_sbrk_r>
 800a18a:	4581      	cmp	r9, r0
 800a18c:	d13f      	bne.n	800a20e <_malloc_r+0xe6>
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	1a6d      	subs	r5, r5, r1
 800a192:	4629      	mov	r1, r5
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff ffa7 	bl	800a0e8 <sbrk_aligned>
 800a19a:	3001      	adds	r0, #1
 800a19c:	d037      	beq.n	800a20e <_malloc_r+0xe6>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	442b      	add	r3, r5
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d038      	beq.n	800a21e <_malloc_r+0xf6>
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	42a2      	cmp	r2, r4
 800a1b0:	d12b      	bne.n	800a20a <_malloc_r+0xe2>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	605a      	str	r2, [r3, #4]
 800a1b6:	e00f      	b.n	800a1d8 <_malloc_r+0xb0>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	1b52      	subs	r2, r2, r5
 800a1bc:	d41f      	bmi.n	800a1fe <_malloc_r+0xd6>
 800a1be:	2a0b      	cmp	r2, #11
 800a1c0:	d917      	bls.n	800a1f2 <_malloc_r+0xca>
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	6025      	str	r5, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	6059      	strne	r1, [r3, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	bf08      	it	eq
 800a1d0:	f8c8 1000 	streq.w	r1, [r8]
 800a1d4:	5162      	str	r2, [r4, r5]
 800a1d6:	604b      	str	r3, [r1, #4]
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f104 060b 	add.w	r6, r4, #11
 800a1de:	f000 f829 	bl	800a234 <__malloc_unlock>
 800a1e2:	f026 0607 	bic.w	r6, r6, #7
 800a1e6:	1d23      	adds	r3, r4, #4
 800a1e8:	1af2      	subs	r2, r6, r3
 800a1ea:	d0ae      	beq.n	800a14a <_malloc_r+0x22>
 800a1ec:	1b9b      	subs	r3, r3, r6
 800a1ee:	50a3      	str	r3, [r4, r2]
 800a1f0:	e7ab      	b.n	800a14a <_malloc_r+0x22>
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	6862      	ldr	r2, [r4, #4]
 800a1f6:	d1dd      	bne.n	800a1b4 <_malloc_r+0x8c>
 800a1f8:	f8c8 2000 	str.w	r2, [r8]
 800a1fc:	e7ec      	b.n	800a1d8 <_malloc_r+0xb0>
 800a1fe:	4623      	mov	r3, r4
 800a200:	6864      	ldr	r4, [r4, #4]
 800a202:	e7ac      	b.n	800a15e <_malloc_r+0x36>
 800a204:	4634      	mov	r4, r6
 800a206:	6876      	ldr	r6, [r6, #4]
 800a208:	e7b4      	b.n	800a174 <_malloc_r+0x4c>
 800a20a:	4613      	mov	r3, r2
 800a20c:	e7cc      	b.n	800a1a8 <_malloc_r+0x80>
 800a20e:	230c      	movs	r3, #12
 800a210:	603b      	str	r3, [r7, #0]
 800a212:	4638      	mov	r0, r7
 800a214:	f000 f80e 	bl	800a234 <__malloc_unlock>
 800a218:	e797      	b.n	800a14a <_malloc_r+0x22>
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	e7dc      	b.n	800a1d8 <_malloc_r+0xb0>
 800a21e:	605b      	str	r3, [r3, #4]
 800a220:	deff      	udf	#255	; 0xff
 800a222:	bf00      	nop
 800a224:	200009cc 	.word	0x200009cc

0800a228 <__malloc_lock>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__malloc_lock+0x8>)
 800a22a:	f7ff bee8 	b.w	8009ffe <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	200009c8 	.word	0x200009c8

0800a234 <__malloc_unlock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_unlock+0x8>)
 800a236:	f7ff bee3 	b.w	800a000 <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	200009c8 	.word	0x200009c8

0800a240 <__sflush_r>:
 800a240:	898a      	ldrh	r2, [r1, #12]
 800a242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	4605      	mov	r5, r0
 800a248:	0710      	lsls	r0, r2, #28
 800a24a:	460c      	mov	r4, r1
 800a24c:	d458      	bmi.n	800a300 <__sflush_r+0xc0>
 800a24e:	684b      	ldr	r3, [r1, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	dc05      	bgt.n	800a260 <__sflush_r+0x20>
 800a254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	dc02      	bgt.n	800a260 <__sflush_r+0x20>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a262:	2e00      	cmp	r6, #0
 800a264:	d0f9      	beq.n	800a25a <__sflush_r+0x1a>
 800a266:	2300      	movs	r3, #0
 800a268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a26c:	682f      	ldr	r7, [r5, #0]
 800a26e:	6a21      	ldr	r1, [r4, #32]
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	d032      	beq.n	800a2da <__sflush_r+0x9a>
 800a274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	075a      	lsls	r2, r3, #29
 800a27a:	d505      	bpl.n	800a288 <__sflush_r+0x48>
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	1ac0      	subs	r0, r0, r3
 800a280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a282:	b10b      	cbz	r3, 800a288 <__sflush_r+0x48>
 800a284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a286:	1ac0      	subs	r0, r0, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	4602      	mov	r2, r0
 800a28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a28e:	6a21      	ldr	r1, [r4, #32]
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	d106      	bne.n	800a2a8 <__sflush_r+0x68>
 800a29a:	6829      	ldr	r1, [r5, #0]
 800a29c:	291d      	cmp	r1, #29
 800a29e:	d82b      	bhi.n	800a2f8 <__sflush_r+0xb8>
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <__sflush_r+0x108>)
 800a2a2:	410a      	asrs	r2, r1
 800a2a4:	07d6      	lsls	r6, r2, #31
 800a2a6:	d427      	bmi.n	800a2f8 <__sflush_r+0xb8>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	6062      	str	r2, [r4, #4]
 800a2ac:	04d9      	lsls	r1, r3, #19
 800a2ae:	6922      	ldr	r2, [r4, #16]
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	d504      	bpl.n	800a2be <__sflush_r+0x7e>
 800a2b4:	1c42      	adds	r2, r0, #1
 800a2b6:	d101      	bne.n	800a2bc <__sflush_r+0x7c>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b903      	cbnz	r3, 800a2be <__sflush_r+0x7e>
 800a2bc:	6560      	str	r0, [r4, #84]	; 0x54
 800a2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c0:	602f      	str	r7, [r5, #0]
 800a2c2:	2900      	cmp	r1, #0
 800a2c4:	d0c9      	beq.n	800a25a <__sflush_r+0x1a>
 800a2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d002      	beq.n	800a2d4 <__sflush_r+0x94>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7ff feb6 	bl	800a040 <_free_r>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	6360      	str	r0, [r4, #52]	; 0x34
 800a2d8:	e7c0      	b.n	800a25c <__sflush_r+0x1c>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b0      	blx	r6
 800a2e0:	1c41      	adds	r1, r0, #1
 800a2e2:	d1c8      	bne.n	800a276 <__sflush_r+0x36>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0c5      	beq.n	800a276 <__sflush_r+0x36>
 800a2ea:	2b1d      	cmp	r3, #29
 800a2ec:	d001      	beq.n	800a2f2 <__sflush_r+0xb2>
 800a2ee:	2b16      	cmp	r3, #22
 800a2f0:	d101      	bne.n	800a2f6 <__sflush_r+0xb6>
 800a2f2:	602f      	str	r7, [r5, #0]
 800a2f4:	e7b1      	b.n	800a25a <__sflush_r+0x1a>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e7ad      	b.n	800a25c <__sflush_r+0x1c>
 800a300:	690f      	ldr	r7, [r1, #16]
 800a302:	2f00      	cmp	r7, #0
 800a304:	d0a9      	beq.n	800a25a <__sflush_r+0x1a>
 800a306:	0793      	lsls	r3, r2, #30
 800a308:	680e      	ldr	r6, [r1, #0]
 800a30a:	bf08      	it	eq
 800a30c:	694b      	ldreq	r3, [r1, #20]
 800a30e:	600f      	str	r7, [r1, #0]
 800a310:	bf18      	it	ne
 800a312:	2300      	movne	r3, #0
 800a314:	eba6 0807 	sub.w	r8, r6, r7
 800a318:	608b      	str	r3, [r1, #8]
 800a31a:	f1b8 0f00 	cmp.w	r8, #0
 800a31e:	dd9c      	ble.n	800a25a <__sflush_r+0x1a>
 800a320:	6a21      	ldr	r1, [r4, #32]
 800a322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a324:	4643      	mov	r3, r8
 800a326:	463a      	mov	r2, r7
 800a328:	4628      	mov	r0, r5
 800a32a:	47b0      	blx	r6
 800a32c:	2800      	cmp	r0, #0
 800a32e:	dc06      	bgt.n	800a33e <__sflush_r+0xfe>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	f04f 30ff 	mov.w	r0, #4294967295
 800a33c:	e78e      	b.n	800a25c <__sflush_r+0x1c>
 800a33e:	4407      	add	r7, r0
 800a340:	eba8 0800 	sub.w	r8, r8, r0
 800a344:	e7e9      	b.n	800a31a <__sflush_r+0xda>
 800a346:	bf00      	nop
 800a348:	dfbffffe 	.word	0xdfbffffe

0800a34c <_fflush_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	4605      	mov	r5, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b913      	cbnz	r3, 800a35c <_fflush_r+0x10>
 800a356:	2500      	movs	r5, #0
 800a358:	4628      	mov	r0, r5
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	b118      	cbz	r0, 800a366 <_fflush_r+0x1a>
 800a35e:	6a03      	ldr	r3, [r0, #32]
 800a360:	b90b      	cbnz	r3, 800a366 <_fflush_r+0x1a>
 800a362:	f7ff fcfd 	bl	8009d60 <__sinit>
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f3      	beq.n	800a356 <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x32>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x32>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f7ff fe40 	bl	8009ffe <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff5d 	bl	800a240 <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d4e4      	bmi.n	800a358 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4e1      	bmi.n	800a358 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f7ff fe33 	bl	800a000 <__retarget_lock_release_recursive>
 800a39a:	e7dd      	b.n	800a358 <_fflush_r+0xc>

0800a39c <fiprintf>:
 800a39c:	b40e      	push	{r1, r2, r3}
 800a39e:	b503      	push	{r0, r1, lr}
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	ab03      	add	r3, sp, #12
 800a3a4:	4805      	ldr	r0, [pc, #20]	; (800a3bc <fiprintf+0x20>)
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	f000 f847 	bl	800a440 <_vfiprintf_r>
 800a3b2:	b002      	add	sp, #8
 800a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b8:	b003      	add	sp, #12
 800a3ba:	4770      	bx	lr
 800a3bc:	20000064 	.word	0x20000064

0800a3c0 <_sbrk_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d06      	ldr	r5, [pc, #24]	; (800a3dc <_sbrk_r+0x1c>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	f7f8 f99c 	bl	8002708 <_sbrk>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_sbrk_r+0x1a>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_sbrk_r+0x1a>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	200009c4 	.word	0x200009c4

0800a3e0 <abort>:
 800a3e0:	b508      	push	{r3, lr}
 800a3e2:	2006      	movs	r0, #6
 800a3e4:	f000 fb94 	bl	800ab10 <raise>
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	f7f8 f915 	bl	8002618 <_exit>

0800a3ee <__sfputc_r>:
 800a3ee:	6893      	ldr	r3, [r2, #8]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	b410      	push	{r4}
 800a3f6:	6093      	str	r3, [r2, #8]
 800a3f8:	da08      	bge.n	800a40c <__sfputc_r+0x1e>
 800a3fa:	6994      	ldr	r4, [r2, #24]
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	db01      	blt.n	800a404 <__sfputc_r+0x16>
 800a400:	290a      	cmp	r1, #10
 800a402:	d103      	bne.n	800a40c <__sfputc_r+0x1e>
 800a404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a408:	f000 bac4 	b.w	800a994 <__swbuf_r>
 800a40c:	6813      	ldr	r3, [r2, #0]
 800a40e:	1c58      	adds	r0, r3, #1
 800a410:	6010      	str	r0, [r2, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	4608      	mov	r0, r1
 800a416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <__sfputs_r>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	4614      	mov	r4, r2
 800a424:	18d5      	adds	r5, r2, r3
 800a426:	42ac      	cmp	r4, r5
 800a428:	d101      	bne.n	800a42e <__sfputs_r+0x12>
 800a42a:	2000      	movs	r0, #0
 800a42c:	e007      	b.n	800a43e <__sfputs_r+0x22>
 800a42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a432:	463a      	mov	r2, r7
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffda 	bl	800a3ee <__sfputc_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d1f3      	bne.n	800a426 <__sfputs_r+0xa>
 800a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a440 <_vfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	460d      	mov	r5, r1
 800a446:	b09d      	sub	sp, #116	; 0x74
 800a448:	4614      	mov	r4, r2
 800a44a:	4698      	mov	r8, r3
 800a44c:	4606      	mov	r6, r0
 800a44e:	b118      	cbz	r0, 800a458 <_vfiprintf_r+0x18>
 800a450:	6a03      	ldr	r3, [r0, #32]
 800a452:	b90b      	cbnz	r3, 800a458 <_vfiprintf_r+0x18>
 800a454:	f7ff fc84 	bl	8009d60 <__sinit>
 800a458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	d405      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	059a      	lsls	r2, r3, #22
 800a462:	d402      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a466:	f7ff fdca 	bl	8009ffe <__retarget_lock_acquire_recursive>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	071b      	lsls	r3, r3, #28
 800a46e:	d501      	bpl.n	800a474 <_vfiprintf_r+0x34>
 800a470:	692b      	ldr	r3, [r5, #16]
 800a472:	b99b      	cbnz	r3, 800a49c <_vfiprintf_r+0x5c>
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f000 faca 	bl	800aa10 <__swsetup_r>
 800a47c:	b170      	cbz	r0, 800a49c <_vfiprintf_r+0x5c>
 800a47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a480:	07dc      	lsls	r4, r3, #31
 800a482:	d504      	bpl.n	800a48e <_vfiprintf_r+0x4e>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b01d      	add	sp, #116	; 0x74
 800a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	0598      	lsls	r0, r3, #22
 800a492:	d4f7      	bmi.n	800a484 <_vfiprintf_r+0x44>
 800a494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a496:	f7ff fdb3 	bl	800a000 <__retarget_lock_release_recursive>
 800a49a:	e7f3      	b.n	800a484 <_vfiprintf_r+0x44>
 800a49c:	2300      	movs	r3, #0
 800a49e:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4aa:	2330      	movs	r3, #48	; 0x30
 800a4ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a660 <_vfiprintf_r+0x220>
 800a4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b4:	f04f 0901 	mov.w	r9, #1
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	469a      	mov	sl, r3
 800a4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c0:	b10a      	cbz	r2, 800a4c6 <_vfiprintf_r+0x86>
 800a4c2:	2a25      	cmp	r2, #37	; 0x25
 800a4c4:	d1f9      	bne.n	800a4ba <_vfiprintf_r+0x7a>
 800a4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ca:	d00b      	beq.n	800a4e4 <_vfiprintf_r+0xa4>
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ffa2 	bl	800a41c <__sfputs_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f000 80a9 	beq.w	800a630 <_vfiprintf_r+0x1f0>
 800a4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e0:	445a      	add	r2, fp
 800a4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80a1 	beq.w	800a630 <_vfiprintf_r+0x1f0>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f8:	f10a 0a01 	add.w	sl, sl, #1
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a504:	931a      	str	r3, [sp, #104]	; 0x68
 800a506:	4654      	mov	r4, sl
 800a508:	2205      	movs	r2, #5
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	4854      	ldr	r0, [pc, #336]	; (800a660 <_vfiprintf_r+0x220>)
 800a510:	f7f5 fe7e 	bl	8000210 <memchr>
 800a514:	9a04      	ldr	r2, [sp, #16]
 800a516:	b9d8      	cbnz	r0, 800a550 <_vfiprintf_r+0x110>
 800a518:	06d1      	lsls	r1, r2, #27
 800a51a:	bf44      	itt	mi
 800a51c:	2320      	movmi	r3, #32
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a522:	0713      	lsls	r3, r2, #28
 800a524:	bf44      	itt	mi
 800a526:	232b      	movmi	r3, #43	; 0x2b
 800a528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a52c:	f89a 3000 	ldrb.w	r3, [sl]
 800a530:	2b2a      	cmp	r3, #42	; 0x2a
 800a532:	d015      	beq.n	800a560 <_vfiprintf_r+0x120>
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	4654      	mov	r4, sl
 800a538:	2000      	movs	r0, #0
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4621      	mov	r1, r4
 800a540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a544:	3b30      	subs	r3, #48	; 0x30
 800a546:	2b09      	cmp	r3, #9
 800a548:	d94d      	bls.n	800a5e6 <_vfiprintf_r+0x1a6>
 800a54a:	b1b0      	cbz	r0, 800a57a <_vfiprintf_r+0x13a>
 800a54c:	9207      	str	r2, [sp, #28]
 800a54e:	e014      	b.n	800a57a <_vfiprintf_r+0x13a>
 800a550:	eba0 0308 	sub.w	r3, r0, r8
 800a554:	fa09 f303 	lsl.w	r3, r9, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	9304      	str	r3, [sp, #16]
 800a55c:	46a2      	mov	sl, r4
 800a55e:	e7d2      	b.n	800a506 <_vfiprintf_r+0xc6>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d19      	adds	r1, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfbb      	ittet	lt
 800a56c:	425b      	neglt	r3, r3
 800a56e:	f042 0202 	orrlt.w	r2, r2, #2
 800a572:	9307      	strge	r3, [sp, #28]
 800a574:	9307      	strlt	r3, [sp, #28]
 800a576:	bfb8      	it	lt
 800a578:	9204      	strlt	r2, [sp, #16]
 800a57a:	7823      	ldrb	r3, [r4, #0]
 800a57c:	2b2e      	cmp	r3, #46	; 0x2e
 800a57e:	d10c      	bne.n	800a59a <_vfiprintf_r+0x15a>
 800a580:	7863      	ldrb	r3, [r4, #1]
 800a582:	2b2a      	cmp	r3, #42	; 0x2a
 800a584:	d134      	bne.n	800a5f0 <_vfiprintf_r+0x1b0>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	1d1a      	adds	r2, r3, #4
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	9203      	str	r2, [sp, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bfb8      	it	lt
 800a592:	f04f 33ff 	movlt.w	r3, #4294967295
 800a596:	3402      	adds	r4, #2
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a670 <_vfiprintf_r+0x230>
 800a59e:	7821      	ldrb	r1, [r4, #0]
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	4650      	mov	r0, sl
 800a5a4:	f7f5 fe34 	bl	8000210 <memchr>
 800a5a8:	b138      	cbz	r0, 800a5ba <_vfiprintf_r+0x17a>
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	eba0 000a 	sub.w	r0, r0, sl
 800a5b0:	2240      	movs	r2, #64	; 0x40
 800a5b2:	4082      	lsls	r2, r0
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	3401      	adds	r4, #1
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5be:	4829      	ldr	r0, [pc, #164]	; (800a664 <_vfiprintf_r+0x224>)
 800a5c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5c4:	2206      	movs	r2, #6
 800a5c6:	f7f5 fe23 	bl	8000210 <memchr>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d03f      	beq.n	800a64e <_vfiprintf_r+0x20e>
 800a5ce:	4b26      	ldr	r3, [pc, #152]	; (800a668 <_vfiprintf_r+0x228>)
 800a5d0:	bb1b      	cbnz	r3, 800a61a <_vfiprintf_r+0x1da>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	3307      	adds	r3, #7
 800a5d6:	f023 0307 	bic.w	r3, r3, #7
 800a5da:	3308      	adds	r3, #8
 800a5dc:	9303      	str	r3, [sp, #12]
 800a5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e0:	443b      	add	r3, r7
 800a5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e4:	e768      	b.n	800a4b8 <_vfiprintf_r+0x78>
 800a5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	e7a6      	b.n	800a53e <_vfiprintf_r+0xfe>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	3401      	adds	r4, #1
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	f04f 0c0a 	mov.w	ip, #10
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a602:	3a30      	subs	r2, #48	; 0x30
 800a604:	2a09      	cmp	r2, #9
 800a606:	d903      	bls.n	800a610 <_vfiprintf_r+0x1d0>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0c6      	beq.n	800a59a <_vfiprintf_r+0x15a>
 800a60c:	9105      	str	r1, [sp, #20]
 800a60e:	e7c4      	b.n	800a59a <_vfiprintf_r+0x15a>
 800a610:	fb0c 2101 	mla	r1, ip, r1, r2
 800a614:	4604      	mov	r4, r0
 800a616:	2301      	movs	r3, #1
 800a618:	e7f0      	b.n	800a5fc <_vfiprintf_r+0x1bc>
 800a61a:	ab03      	add	r3, sp, #12
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	462a      	mov	r2, r5
 800a620:	4b12      	ldr	r3, [pc, #72]	; (800a66c <_vfiprintf_r+0x22c>)
 800a622:	a904      	add	r1, sp, #16
 800a624:	4630      	mov	r0, r6
 800a626:	f3af 8000 	nop.w
 800a62a:	4607      	mov	r7, r0
 800a62c:	1c78      	adds	r0, r7, #1
 800a62e:	d1d6      	bne.n	800a5de <_vfiprintf_r+0x19e>
 800a630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a632:	07d9      	lsls	r1, r3, #31
 800a634:	d405      	bmi.n	800a642 <_vfiprintf_r+0x202>
 800a636:	89ab      	ldrh	r3, [r5, #12]
 800a638:	059a      	lsls	r2, r3, #22
 800a63a:	d402      	bmi.n	800a642 <_vfiprintf_r+0x202>
 800a63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a63e:	f7ff fcdf 	bl	800a000 <__retarget_lock_release_recursive>
 800a642:	89ab      	ldrh	r3, [r5, #12]
 800a644:	065b      	lsls	r3, r3, #25
 800a646:	f53f af1d 	bmi.w	800a484 <_vfiprintf_r+0x44>
 800a64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a64c:	e71c      	b.n	800a488 <_vfiprintf_r+0x48>
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	462a      	mov	r2, r5
 800a654:	4b05      	ldr	r3, [pc, #20]	; (800a66c <_vfiprintf_r+0x22c>)
 800a656:	a904      	add	r1, sp, #16
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f879 	bl	800a750 <_printf_i>
 800a65e:	e7e4      	b.n	800a62a <_vfiprintf_r+0x1ea>
 800a660:	0800bede 	.word	0x0800bede
 800a664:	0800bee8 	.word	0x0800bee8
 800a668:	00000000 	.word	0x00000000
 800a66c:	0800a41d 	.word	0x0800a41d
 800a670:	0800bee4 	.word	0x0800bee4

0800a674 <_printf_common>:
 800a674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a678:	4616      	mov	r6, r2
 800a67a:	4699      	mov	r9, r3
 800a67c:	688a      	ldr	r2, [r1, #8]
 800a67e:	690b      	ldr	r3, [r1, #16]
 800a680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a684:	4293      	cmp	r3, r2
 800a686:	bfb8      	it	lt
 800a688:	4613      	movlt	r3, r2
 800a68a:	6033      	str	r3, [r6, #0]
 800a68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a690:	4607      	mov	r7, r0
 800a692:	460c      	mov	r4, r1
 800a694:	b10a      	cbz	r2, 800a69a <_printf_common+0x26>
 800a696:	3301      	adds	r3, #1
 800a698:	6033      	str	r3, [r6, #0]
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	0699      	lsls	r1, r3, #26
 800a69e:	bf42      	ittt	mi
 800a6a0:	6833      	ldrmi	r3, [r6, #0]
 800a6a2:	3302      	addmi	r3, #2
 800a6a4:	6033      	strmi	r3, [r6, #0]
 800a6a6:	6825      	ldr	r5, [r4, #0]
 800a6a8:	f015 0506 	ands.w	r5, r5, #6
 800a6ac:	d106      	bne.n	800a6bc <_printf_common+0x48>
 800a6ae:	f104 0a19 	add.w	sl, r4, #25
 800a6b2:	68e3      	ldr	r3, [r4, #12]
 800a6b4:	6832      	ldr	r2, [r6, #0]
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	dc26      	bgt.n	800a70a <_printf_common+0x96>
 800a6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6c0:	1e13      	subs	r3, r2, #0
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	bf18      	it	ne
 800a6c6:	2301      	movne	r3, #1
 800a6c8:	0692      	lsls	r2, r2, #26
 800a6ca:	d42b      	bmi.n	800a724 <_printf_common+0xb0>
 800a6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	47c0      	blx	r8
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d01e      	beq.n	800a718 <_printf_common+0xa4>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	6922      	ldr	r2, [r4, #16]
 800a6de:	f003 0306 	and.w	r3, r3, #6
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	bf02      	ittt	eq
 800a6e6:	68e5      	ldreq	r5, [r4, #12]
 800a6e8:	6833      	ldreq	r3, [r6, #0]
 800a6ea:	1aed      	subeq	r5, r5, r3
 800a6ec:	68a3      	ldr	r3, [r4, #8]
 800a6ee:	bf0c      	ite	eq
 800a6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6f4:	2500      	movne	r5, #0
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	bfc4      	itt	gt
 800a6fa:	1a9b      	subgt	r3, r3, r2
 800a6fc:	18ed      	addgt	r5, r5, r3
 800a6fe:	2600      	movs	r6, #0
 800a700:	341a      	adds	r4, #26
 800a702:	42b5      	cmp	r5, r6
 800a704:	d11a      	bne.n	800a73c <_printf_common+0xc8>
 800a706:	2000      	movs	r0, #0
 800a708:	e008      	b.n	800a71c <_printf_common+0xa8>
 800a70a:	2301      	movs	r3, #1
 800a70c:	4652      	mov	r2, sl
 800a70e:	4649      	mov	r1, r9
 800a710:	4638      	mov	r0, r7
 800a712:	47c0      	blx	r8
 800a714:	3001      	adds	r0, #1
 800a716:	d103      	bne.n	800a720 <_printf_common+0xac>
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a720:	3501      	adds	r5, #1
 800a722:	e7c6      	b.n	800a6b2 <_printf_common+0x3e>
 800a724:	18e1      	adds	r1, r4, r3
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	2030      	movs	r0, #48	; 0x30
 800a72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a72e:	4422      	add	r2, r4
 800a730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a738:	3302      	adds	r3, #2
 800a73a:	e7c7      	b.n	800a6cc <_printf_common+0x58>
 800a73c:	2301      	movs	r3, #1
 800a73e:	4622      	mov	r2, r4
 800a740:	4649      	mov	r1, r9
 800a742:	4638      	mov	r0, r7
 800a744:	47c0      	blx	r8
 800a746:	3001      	adds	r0, #1
 800a748:	d0e6      	beq.n	800a718 <_printf_common+0xa4>
 800a74a:	3601      	adds	r6, #1
 800a74c:	e7d9      	b.n	800a702 <_printf_common+0x8e>
	...

0800a750 <_printf_i>:
 800a750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a754:	7e0f      	ldrb	r7, [r1, #24]
 800a756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a758:	2f78      	cmp	r7, #120	; 0x78
 800a75a:	4691      	mov	r9, r2
 800a75c:	4680      	mov	r8, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	469a      	mov	sl, r3
 800a762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a766:	d807      	bhi.n	800a778 <_printf_i+0x28>
 800a768:	2f62      	cmp	r7, #98	; 0x62
 800a76a:	d80a      	bhi.n	800a782 <_printf_i+0x32>
 800a76c:	2f00      	cmp	r7, #0
 800a76e:	f000 80d4 	beq.w	800a91a <_printf_i+0x1ca>
 800a772:	2f58      	cmp	r7, #88	; 0x58
 800a774:	f000 80c0 	beq.w	800a8f8 <_printf_i+0x1a8>
 800a778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a780:	e03a      	b.n	800a7f8 <_printf_i+0xa8>
 800a782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a786:	2b15      	cmp	r3, #21
 800a788:	d8f6      	bhi.n	800a778 <_printf_i+0x28>
 800a78a:	a101      	add	r1, pc, #4	; (adr r1, 800a790 <_printf_i+0x40>)
 800a78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a790:	0800a7e9 	.word	0x0800a7e9
 800a794:	0800a7fd 	.word	0x0800a7fd
 800a798:	0800a779 	.word	0x0800a779
 800a79c:	0800a779 	.word	0x0800a779
 800a7a0:	0800a779 	.word	0x0800a779
 800a7a4:	0800a779 	.word	0x0800a779
 800a7a8:	0800a7fd 	.word	0x0800a7fd
 800a7ac:	0800a779 	.word	0x0800a779
 800a7b0:	0800a779 	.word	0x0800a779
 800a7b4:	0800a779 	.word	0x0800a779
 800a7b8:	0800a779 	.word	0x0800a779
 800a7bc:	0800a901 	.word	0x0800a901
 800a7c0:	0800a829 	.word	0x0800a829
 800a7c4:	0800a8bb 	.word	0x0800a8bb
 800a7c8:	0800a779 	.word	0x0800a779
 800a7cc:	0800a779 	.word	0x0800a779
 800a7d0:	0800a923 	.word	0x0800a923
 800a7d4:	0800a779 	.word	0x0800a779
 800a7d8:	0800a829 	.word	0x0800a829
 800a7dc:	0800a779 	.word	0x0800a779
 800a7e0:	0800a779 	.word	0x0800a779
 800a7e4:	0800a8c3 	.word	0x0800a8c3
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	1d1a      	adds	r2, r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	602a      	str	r2, [r5, #0]
 800a7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e09f      	b.n	800a93c <_printf_i+0x1ec>
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	0607      	lsls	r7, r0, #24
 800a802:	f103 0104 	add.w	r1, r3, #4
 800a806:	6029      	str	r1, [r5, #0]
 800a808:	d501      	bpl.n	800a80e <_printf_i+0xbe>
 800a80a:	681e      	ldr	r6, [r3, #0]
 800a80c:	e003      	b.n	800a816 <_printf_i+0xc6>
 800a80e:	0646      	lsls	r6, r0, #25
 800a810:	d5fb      	bpl.n	800a80a <_printf_i+0xba>
 800a812:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a816:	2e00      	cmp	r6, #0
 800a818:	da03      	bge.n	800a822 <_printf_i+0xd2>
 800a81a:	232d      	movs	r3, #45	; 0x2d
 800a81c:	4276      	negs	r6, r6
 800a81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a822:	485a      	ldr	r0, [pc, #360]	; (800a98c <_printf_i+0x23c>)
 800a824:	230a      	movs	r3, #10
 800a826:	e012      	b.n	800a84e <_printf_i+0xfe>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	1d19      	adds	r1, r3, #4
 800a82e:	6029      	str	r1, [r5, #0]
 800a830:	0605      	lsls	r5, r0, #24
 800a832:	d501      	bpl.n	800a838 <_printf_i+0xe8>
 800a834:	681e      	ldr	r6, [r3, #0]
 800a836:	e002      	b.n	800a83e <_printf_i+0xee>
 800a838:	0641      	lsls	r1, r0, #25
 800a83a:	d5fb      	bpl.n	800a834 <_printf_i+0xe4>
 800a83c:	881e      	ldrh	r6, [r3, #0]
 800a83e:	4853      	ldr	r0, [pc, #332]	; (800a98c <_printf_i+0x23c>)
 800a840:	2f6f      	cmp	r7, #111	; 0x6f
 800a842:	bf0c      	ite	eq
 800a844:	2308      	moveq	r3, #8
 800a846:	230a      	movne	r3, #10
 800a848:	2100      	movs	r1, #0
 800a84a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a84e:	6865      	ldr	r5, [r4, #4]
 800a850:	60a5      	str	r5, [r4, #8]
 800a852:	2d00      	cmp	r5, #0
 800a854:	bfa2      	ittt	ge
 800a856:	6821      	ldrge	r1, [r4, #0]
 800a858:	f021 0104 	bicge.w	r1, r1, #4
 800a85c:	6021      	strge	r1, [r4, #0]
 800a85e:	b90e      	cbnz	r6, 800a864 <_printf_i+0x114>
 800a860:	2d00      	cmp	r5, #0
 800a862:	d04b      	beq.n	800a8fc <_printf_i+0x1ac>
 800a864:	4615      	mov	r5, r2
 800a866:	fbb6 f1f3 	udiv	r1, r6, r3
 800a86a:	fb03 6711 	mls	r7, r3, r1, r6
 800a86e:	5dc7      	ldrb	r7, [r0, r7]
 800a870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a874:	4637      	mov	r7, r6
 800a876:	42bb      	cmp	r3, r7
 800a878:	460e      	mov	r6, r1
 800a87a:	d9f4      	bls.n	800a866 <_printf_i+0x116>
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d10b      	bne.n	800a898 <_printf_i+0x148>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	07de      	lsls	r6, r3, #31
 800a884:	d508      	bpl.n	800a898 <_printf_i+0x148>
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	6861      	ldr	r1, [r4, #4]
 800a88a:	4299      	cmp	r1, r3
 800a88c:	bfde      	ittt	le
 800a88e:	2330      	movle	r3, #48	; 0x30
 800a890:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a894:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a898:	1b52      	subs	r2, r2, r5
 800a89a:	6122      	str	r2, [r4, #16]
 800a89c:	f8cd a000 	str.w	sl, [sp]
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	aa03      	add	r2, sp, #12
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	f7ff fee4 	bl	800a674 <_printf_common>
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d14a      	bne.n	800a946 <_printf_i+0x1f6>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	b004      	add	sp, #16
 800a8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	f043 0320 	orr.w	r3, r3, #32
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	4833      	ldr	r0, [pc, #204]	; (800a990 <_printf_i+0x240>)
 800a8c4:	2778      	movs	r7, #120	; 0x78
 800a8c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	6829      	ldr	r1, [r5, #0]
 800a8ce:	061f      	lsls	r7, r3, #24
 800a8d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8d4:	d402      	bmi.n	800a8dc <_printf_i+0x18c>
 800a8d6:	065f      	lsls	r7, r3, #25
 800a8d8:	bf48      	it	mi
 800a8da:	b2b6      	uxthmi	r6, r6
 800a8dc:	07df      	lsls	r7, r3, #31
 800a8de:	bf48      	it	mi
 800a8e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a8e4:	6029      	str	r1, [r5, #0]
 800a8e6:	bf48      	it	mi
 800a8e8:	6023      	strmi	r3, [r4, #0]
 800a8ea:	b91e      	cbnz	r6, 800a8f4 <_printf_i+0x1a4>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	f023 0320 	bic.w	r3, r3, #32
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	e7a7      	b.n	800a848 <_printf_i+0xf8>
 800a8f8:	4824      	ldr	r0, [pc, #144]	; (800a98c <_printf_i+0x23c>)
 800a8fa:	e7e4      	b.n	800a8c6 <_printf_i+0x176>
 800a8fc:	4615      	mov	r5, r2
 800a8fe:	e7bd      	b.n	800a87c <_printf_i+0x12c>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	6826      	ldr	r6, [r4, #0]
 800a904:	6961      	ldr	r1, [r4, #20]
 800a906:	1d18      	adds	r0, r3, #4
 800a908:	6028      	str	r0, [r5, #0]
 800a90a:	0635      	lsls	r5, r6, #24
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	d501      	bpl.n	800a914 <_printf_i+0x1c4>
 800a910:	6019      	str	r1, [r3, #0]
 800a912:	e002      	b.n	800a91a <_printf_i+0x1ca>
 800a914:	0670      	lsls	r0, r6, #25
 800a916:	d5fb      	bpl.n	800a910 <_printf_i+0x1c0>
 800a918:	8019      	strh	r1, [r3, #0]
 800a91a:	2300      	movs	r3, #0
 800a91c:	6123      	str	r3, [r4, #16]
 800a91e:	4615      	mov	r5, r2
 800a920:	e7bc      	b.n	800a89c <_printf_i+0x14c>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	1d1a      	adds	r2, r3, #4
 800a926:	602a      	str	r2, [r5, #0]
 800a928:	681d      	ldr	r5, [r3, #0]
 800a92a:	6862      	ldr	r2, [r4, #4]
 800a92c:	2100      	movs	r1, #0
 800a92e:	4628      	mov	r0, r5
 800a930:	f7f5 fc6e 	bl	8000210 <memchr>
 800a934:	b108      	cbz	r0, 800a93a <_printf_i+0x1ea>
 800a936:	1b40      	subs	r0, r0, r5
 800a938:	6060      	str	r0, [r4, #4]
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	2300      	movs	r3, #0
 800a940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a944:	e7aa      	b.n	800a89c <_printf_i+0x14c>
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	462a      	mov	r2, r5
 800a94a:	4649      	mov	r1, r9
 800a94c:	4640      	mov	r0, r8
 800a94e:	47d0      	blx	sl
 800a950:	3001      	adds	r0, #1
 800a952:	d0ad      	beq.n	800a8b0 <_printf_i+0x160>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	079b      	lsls	r3, r3, #30
 800a958:	d413      	bmi.n	800a982 <_printf_i+0x232>
 800a95a:	68e0      	ldr	r0, [r4, #12]
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	4298      	cmp	r0, r3
 800a960:	bfb8      	it	lt
 800a962:	4618      	movlt	r0, r3
 800a964:	e7a6      	b.n	800a8b4 <_printf_i+0x164>
 800a966:	2301      	movs	r3, #1
 800a968:	4632      	mov	r2, r6
 800a96a:	4649      	mov	r1, r9
 800a96c:	4640      	mov	r0, r8
 800a96e:	47d0      	blx	sl
 800a970:	3001      	adds	r0, #1
 800a972:	d09d      	beq.n	800a8b0 <_printf_i+0x160>
 800a974:	3501      	adds	r5, #1
 800a976:	68e3      	ldr	r3, [r4, #12]
 800a978:	9903      	ldr	r1, [sp, #12]
 800a97a:	1a5b      	subs	r3, r3, r1
 800a97c:	42ab      	cmp	r3, r5
 800a97e:	dcf2      	bgt.n	800a966 <_printf_i+0x216>
 800a980:	e7eb      	b.n	800a95a <_printf_i+0x20a>
 800a982:	2500      	movs	r5, #0
 800a984:	f104 0619 	add.w	r6, r4, #25
 800a988:	e7f5      	b.n	800a976 <_printf_i+0x226>
 800a98a:	bf00      	nop
 800a98c:	0800beef 	.word	0x0800beef
 800a990:	0800bf00 	.word	0x0800bf00

0800a994 <__swbuf_r>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	460e      	mov	r6, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4605      	mov	r5, r0
 800a99c:	b118      	cbz	r0, 800a9a6 <__swbuf_r+0x12>
 800a99e:	6a03      	ldr	r3, [r0, #32]
 800a9a0:	b90b      	cbnz	r3, 800a9a6 <__swbuf_r+0x12>
 800a9a2:	f7ff f9dd 	bl	8009d60 <__sinit>
 800a9a6:	69a3      	ldr	r3, [r4, #24]
 800a9a8:	60a3      	str	r3, [r4, #8]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	071a      	lsls	r2, r3, #28
 800a9ae:	d525      	bpl.n	800a9fc <__swbuf_r+0x68>
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	b31b      	cbz	r3, 800a9fc <__swbuf_r+0x68>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	6922      	ldr	r2, [r4, #16]
 800a9b8:	1a98      	subs	r0, r3, r2
 800a9ba:	6963      	ldr	r3, [r4, #20]
 800a9bc:	b2f6      	uxtb	r6, r6
 800a9be:	4283      	cmp	r3, r0
 800a9c0:	4637      	mov	r7, r6
 800a9c2:	dc04      	bgt.n	800a9ce <__swbuf_r+0x3a>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7ff fcc0 	bl	800a34c <_fflush_r>
 800a9cc:	b9e0      	cbnz	r0, 800aa08 <__swbuf_r+0x74>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	60a3      	str	r3, [r4, #8]
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	701e      	strb	r6, [r3, #0]
 800a9dc:	6962      	ldr	r2, [r4, #20]
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d004      	beq.n	800a9ee <__swbuf_r+0x5a>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	07db      	lsls	r3, r3, #31
 800a9e8:	d506      	bpl.n	800a9f8 <__swbuf_r+0x64>
 800a9ea:	2e0a      	cmp	r6, #10
 800a9ec:	d104      	bne.n	800a9f8 <__swbuf_r+0x64>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7ff fcab 	bl	800a34c <_fflush_r>
 800a9f6:	b938      	cbnz	r0, 800aa08 <__swbuf_r+0x74>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f000 f806 	bl	800aa10 <__swsetup_r>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0d5      	beq.n	800a9b4 <__swbuf_r+0x20>
 800aa08:	f04f 37ff 	mov.w	r7, #4294967295
 800aa0c:	e7f4      	b.n	800a9f8 <__swbuf_r+0x64>
	...

0800aa10 <__swsetup_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <__swsetup_r+0xac>)
 800aa14:	4605      	mov	r5, r0
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	460c      	mov	r4, r1
 800aa1a:	b118      	cbz	r0, 800aa24 <__swsetup_r+0x14>
 800aa1c:	6a03      	ldr	r3, [r0, #32]
 800aa1e:	b90b      	cbnz	r3, 800aa24 <__swsetup_r+0x14>
 800aa20:	f7ff f99e 	bl	8009d60 <__sinit>
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa2a:	0718      	lsls	r0, r3, #28
 800aa2c:	d422      	bmi.n	800aa74 <__swsetup_r+0x64>
 800aa2e:	06d9      	lsls	r1, r3, #27
 800aa30:	d407      	bmi.n	800aa42 <__swsetup_r+0x32>
 800aa32:	2309      	movs	r3, #9
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	e034      	b.n	800aaac <__swsetup_r+0x9c>
 800aa42:	0758      	lsls	r0, r3, #29
 800aa44:	d512      	bpl.n	800aa6c <__swsetup_r+0x5c>
 800aa46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa48:	b141      	cbz	r1, 800aa5c <__swsetup_r+0x4c>
 800aa4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa4e:	4299      	cmp	r1, r3
 800aa50:	d002      	beq.n	800aa58 <__swsetup_r+0x48>
 800aa52:	4628      	mov	r0, r5
 800aa54:	f7ff faf4 	bl	800a040 <_free_r>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	2300      	movs	r3, #0
 800aa66:	6063      	str	r3, [r4, #4]
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	f043 0308 	orr.w	r3, r3, #8
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	b94b      	cbnz	r3, 800aa8c <__swsetup_r+0x7c>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa82:	d003      	beq.n	800aa8c <__swsetup_r+0x7c>
 800aa84:	4621      	mov	r1, r4
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 f884 	bl	800ab94 <__smakebuf_r>
 800aa8c:	89a0      	ldrh	r0, [r4, #12]
 800aa8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa92:	f010 0301 	ands.w	r3, r0, #1
 800aa96:	d00a      	beq.n	800aaae <__swsetup_r+0x9e>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60a3      	str	r3, [r4, #8]
 800aa9c:	6963      	ldr	r3, [r4, #20]
 800aa9e:	425b      	negs	r3, r3
 800aaa0:	61a3      	str	r3, [r4, #24]
 800aaa2:	6923      	ldr	r3, [r4, #16]
 800aaa4:	b943      	cbnz	r3, 800aab8 <__swsetup_r+0xa8>
 800aaa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaaa:	d1c4      	bne.n	800aa36 <__swsetup_r+0x26>
 800aaac:	bd38      	pop	{r3, r4, r5, pc}
 800aaae:	0781      	lsls	r1, r0, #30
 800aab0:	bf58      	it	pl
 800aab2:	6963      	ldrpl	r3, [r4, #20]
 800aab4:	60a3      	str	r3, [r4, #8]
 800aab6:	e7f4      	b.n	800aaa2 <__swsetup_r+0x92>
 800aab8:	2000      	movs	r0, #0
 800aaba:	e7f7      	b.n	800aaac <__swsetup_r+0x9c>
 800aabc:	20000064 	.word	0x20000064

0800aac0 <_raise_r>:
 800aac0:	291f      	cmp	r1, #31
 800aac2:	b538      	push	{r3, r4, r5, lr}
 800aac4:	4604      	mov	r4, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	d904      	bls.n	800aad4 <_raise_r+0x14>
 800aaca:	2316      	movs	r3, #22
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aad6:	b112      	cbz	r2, 800aade <_raise_r+0x1e>
 800aad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aadc:	b94b      	cbnz	r3, 800aaf2 <_raise_r+0x32>
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 f830 	bl	800ab44 <_getpid_r>
 800aae4:	462a      	mov	r2, r5
 800aae6:	4601      	mov	r1, r0
 800aae8:	4620      	mov	r0, r4
 800aaea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaee:	f000 b817 	b.w	800ab20 <_kill_r>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d00a      	beq.n	800ab0c <_raise_r+0x4c>
 800aaf6:	1c59      	adds	r1, r3, #1
 800aaf8:	d103      	bne.n	800ab02 <_raise_r+0x42>
 800aafa:	2316      	movs	r3, #22
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	2001      	movs	r0, #1
 800ab00:	e7e7      	b.n	800aad2 <_raise_r+0x12>
 800ab02:	2400      	movs	r4, #0
 800ab04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab08:	4628      	mov	r0, r5
 800ab0a:	4798      	blx	r3
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e7e0      	b.n	800aad2 <_raise_r+0x12>

0800ab10 <raise>:
 800ab10:	4b02      	ldr	r3, [pc, #8]	; (800ab1c <raise+0xc>)
 800ab12:	4601      	mov	r1, r0
 800ab14:	6818      	ldr	r0, [r3, #0]
 800ab16:	f7ff bfd3 	b.w	800aac0 <_raise_r>
 800ab1a:	bf00      	nop
 800ab1c:	20000064 	.word	0x20000064

0800ab20 <_kill_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d07      	ldr	r5, [pc, #28]	; (800ab40 <_kill_r+0x20>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	602b      	str	r3, [r5, #0]
 800ab2e:	f7f7 fd63 	bl	80025f8 <_kill>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	d102      	bne.n	800ab3c <_kill_r+0x1c>
 800ab36:	682b      	ldr	r3, [r5, #0]
 800ab38:	b103      	cbz	r3, 800ab3c <_kill_r+0x1c>
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	bd38      	pop	{r3, r4, r5, pc}
 800ab3e:	bf00      	nop
 800ab40:	200009c4 	.word	0x200009c4

0800ab44 <_getpid_r>:
 800ab44:	f7f7 bd50 	b.w	80025e8 <_getpid>

0800ab48 <__swhatbuf_r>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab50:	2900      	cmp	r1, #0
 800ab52:	b096      	sub	sp, #88	; 0x58
 800ab54:	4615      	mov	r5, r2
 800ab56:	461e      	mov	r6, r3
 800ab58:	da0d      	bge.n	800ab76 <__swhatbuf_r+0x2e>
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab60:	f04f 0100 	mov.w	r1, #0
 800ab64:	bf0c      	ite	eq
 800ab66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab6a:	2340      	movne	r3, #64	; 0x40
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	6031      	str	r1, [r6, #0]
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	b016      	add	sp, #88	; 0x58
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	466a      	mov	r2, sp
 800ab78:	f000 f848 	bl	800ac0c <_fstat_r>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	dbec      	blt.n	800ab5a <__swhatbuf_r+0x12>
 800ab80:	9901      	ldr	r1, [sp, #4]
 800ab82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab8a:	4259      	negs	r1, r3
 800ab8c:	4159      	adcs	r1, r3
 800ab8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab92:	e7eb      	b.n	800ab6c <__swhatbuf_r+0x24>

0800ab94 <__smakebuf_r>:
 800ab94:	898b      	ldrh	r3, [r1, #12]
 800ab96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab98:	079d      	lsls	r5, r3, #30
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	d507      	bpl.n	800abb0 <__smakebuf_r+0x1c>
 800aba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	2301      	movs	r3, #1
 800abaa:	6163      	str	r3, [r4, #20]
 800abac:	b002      	add	sp, #8
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	ab01      	add	r3, sp, #4
 800abb2:	466a      	mov	r2, sp
 800abb4:	f7ff ffc8 	bl	800ab48 <__swhatbuf_r>
 800abb8:	9900      	ldr	r1, [sp, #0]
 800abba:	4605      	mov	r5, r0
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff fab3 	bl	800a128 <_malloc_r>
 800abc2:	b948      	cbnz	r0, 800abd8 <__smakebuf_r+0x44>
 800abc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc8:	059a      	lsls	r2, r3, #22
 800abca:	d4ef      	bmi.n	800abac <__smakebuf_r+0x18>
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	f043 0302 	orr.w	r3, r3, #2
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	e7e3      	b.n	800aba0 <__smakebuf_r+0xc>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	6020      	str	r0, [r4, #0]
 800abdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe0:	81a3      	strh	r3, [r4, #12]
 800abe2:	9b00      	ldr	r3, [sp, #0]
 800abe4:	6163      	str	r3, [r4, #20]
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	6120      	str	r0, [r4, #16]
 800abea:	b15b      	cbz	r3, 800ac04 <__smakebuf_r+0x70>
 800abec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abf0:	4630      	mov	r0, r6
 800abf2:	f000 f81d 	bl	800ac30 <_isatty_r>
 800abf6:	b128      	cbz	r0, 800ac04 <__smakebuf_r+0x70>
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	f043 0301 	orr.w	r3, r3, #1
 800ac02:	81a3      	strh	r3, [r4, #12]
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	431d      	orrs	r5, r3
 800ac08:	81a5      	strh	r5, [r4, #12]
 800ac0a:	e7cf      	b.n	800abac <__smakebuf_r+0x18>

0800ac0c <_fstat_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d07      	ldr	r5, [pc, #28]	; (800ac2c <_fstat_r+0x20>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4604      	mov	r4, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	4611      	mov	r1, r2
 800ac18:	602b      	str	r3, [r5, #0]
 800ac1a:	f7f7 fd4c 	bl	80026b6 <_fstat>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	d102      	bne.n	800ac28 <_fstat_r+0x1c>
 800ac22:	682b      	ldr	r3, [r5, #0]
 800ac24:	b103      	cbz	r3, 800ac28 <_fstat_r+0x1c>
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	bd38      	pop	{r3, r4, r5, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200009c4 	.word	0x200009c4

0800ac30 <_isatty_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d06      	ldr	r5, [pc, #24]	; (800ac4c <_isatty_r+0x1c>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f7 fd4b 	bl	80026d6 <_isatty>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d102      	bne.n	800ac4a <_isatty_r+0x1a>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	b103      	cbz	r3, 800ac4a <_isatty_r+0x1a>
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	200009c4 	.word	0x200009c4

0800ac50 <pow>:
 800ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac52:	ed2d 8b02 	vpush	{d8}
 800ac56:	eeb0 8a40 	vmov.f32	s16, s0
 800ac5a:	eef0 8a60 	vmov.f32	s17, s1
 800ac5e:	ec55 4b11 	vmov	r4, r5, d1
 800ac62:	f000 f909 	bl	800ae78 <__ieee754_pow>
 800ac66:	4622      	mov	r2, r4
 800ac68:	462b      	mov	r3, r5
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	ec57 6b10 	vmov	r6, r7, d0
 800ac72:	f7f5 ff73 	bl	8000b5c <__aeabi_dcmpun>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d13b      	bne.n	800acf2 <pow+0xa2>
 800ac7a:	ec51 0b18 	vmov	r0, r1, d8
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	f7f5 ff39 	bl	8000af8 <__aeabi_dcmpeq>
 800ac86:	b1b8      	cbz	r0, 800acb8 <pow+0x68>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7f5 ff32 	bl	8000af8 <__aeabi_dcmpeq>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d146      	bne.n	800ad26 <pow+0xd6>
 800ac98:	ec45 4b10 	vmov	d0, r4, r5
 800ac9c:	f000 f848 	bl	800ad30 <finite>
 800aca0:	b338      	cbz	r0, 800acf2 <pow+0xa2>
 800aca2:	2200      	movs	r2, #0
 800aca4:	2300      	movs	r3, #0
 800aca6:	4620      	mov	r0, r4
 800aca8:	4629      	mov	r1, r5
 800acaa:	f7f5 ff2f 	bl	8000b0c <__aeabi_dcmplt>
 800acae:	b300      	cbz	r0, 800acf2 <pow+0xa2>
 800acb0:	f7ff f97a 	bl	8009fa8 <__errno>
 800acb4:	2322      	movs	r3, #34	; 0x22
 800acb6:	e01b      	b.n	800acf0 <pow+0xa0>
 800acb8:	ec47 6b10 	vmov	d0, r6, r7
 800acbc:	f000 f838 	bl	800ad30 <finite>
 800acc0:	b9e0      	cbnz	r0, 800acfc <pow+0xac>
 800acc2:	eeb0 0a48 	vmov.f32	s0, s16
 800acc6:	eef0 0a68 	vmov.f32	s1, s17
 800acca:	f000 f831 	bl	800ad30 <finite>
 800acce:	b1a8      	cbz	r0, 800acfc <pow+0xac>
 800acd0:	ec45 4b10 	vmov	d0, r4, r5
 800acd4:	f000 f82c 	bl	800ad30 <finite>
 800acd8:	b180      	cbz	r0, 800acfc <pow+0xac>
 800acda:	4632      	mov	r2, r6
 800acdc:	463b      	mov	r3, r7
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 ff3b 	bl	8000b5c <__aeabi_dcmpun>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0e2      	beq.n	800acb0 <pow+0x60>
 800acea:	f7ff f95d 	bl	8009fa8 <__errno>
 800acee:	2321      	movs	r3, #33	; 0x21
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	ecbd 8b02 	vpop	{d8}
 800acf6:	ec47 6b10 	vmov	d0, r6, r7
 800acfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfc:	2200      	movs	r2, #0
 800acfe:	2300      	movs	r3, #0
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	f7f5 fef8 	bl	8000af8 <__aeabi_dcmpeq>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0f2      	beq.n	800acf2 <pow+0xa2>
 800ad0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad10:	eef0 0a68 	vmov.f32	s1, s17
 800ad14:	f000 f80c 	bl	800ad30 <finite>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d0ea      	beq.n	800acf2 <pow+0xa2>
 800ad1c:	ec45 4b10 	vmov	d0, r4, r5
 800ad20:	f000 f806 	bl	800ad30 <finite>
 800ad24:	e7c3      	b.n	800acae <pow+0x5e>
 800ad26:	4f01      	ldr	r7, [pc, #4]	; (800ad2c <pow+0xdc>)
 800ad28:	2600      	movs	r6, #0
 800ad2a:	e7e2      	b.n	800acf2 <pow+0xa2>
 800ad2c:	3ff00000 	.word	0x3ff00000

0800ad30 <finite>:
 800ad30:	b082      	sub	sp, #8
 800ad32:	ed8d 0b00 	vstr	d0, [sp]
 800ad36:	9801      	ldr	r0, [sp, #4]
 800ad38:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ad3c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad40:	0fc0      	lsrs	r0, r0, #31
 800ad42:	b002      	add	sp, #8
 800ad44:	4770      	bx	lr

0800ad46 <fmin>:
 800ad46:	b508      	push	{r3, lr}
 800ad48:	ed2d 8b04 	vpush	{d8-d9}
 800ad4c:	eeb0 8a40 	vmov.f32	s16, s0
 800ad50:	eef0 8a60 	vmov.f32	s17, s1
 800ad54:	eeb0 9a41 	vmov.f32	s18, s2
 800ad58:	eef0 9a61 	vmov.f32	s19, s3
 800ad5c:	f000 f81a 	bl	800ad94 <__fpclassifyd>
 800ad60:	b168      	cbz	r0, 800ad7e <fmin+0x38>
 800ad62:	eeb0 0a49 	vmov.f32	s0, s18
 800ad66:	eef0 0a69 	vmov.f32	s1, s19
 800ad6a:	f000 f813 	bl	800ad94 <__fpclassifyd>
 800ad6e:	b150      	cbz	r0, 800ad86 <fmin+0x40>
 800ad70:	ec53 2b19 	vmov	r2, r3, d9
 800ad74:	ec51 0b18 	vmov	r0, r1, d8
 800ad78:	f7f5 fec8 	bl	8000b0c <__aeabi_dcmplt>
 800ad7c:	b918      	cbnz	r0, 800ad86 <fmin+0x40>
 800ad7e:	eeb0 8a49 	vmov.f32	s16, s18
 800ad82:	eef0 8a69 	vmov.f32	s17, s19
 800ad86:	eeb0 0a48 	vmov.f32	s0, s16
 800ad8a:	eef0 0a68 	vmov.f32	s1, s17
 800ad8e:	ecbd 8b04 	vpop	{d8-d9}
 800ad92:	bd08      	pop	{r3, pc}

0800ad94 <__fpclassifyd>:
 800ad94:	ec51 0b10 	vmov	r0, r1, d0
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800ad9e:	460b      	mov	r3, r1
 800ada0:	d019      	beq.n	800add6 <__fpclassifyd+0x42>
 800ada2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800ada6:	490e      	ldr	r1, [pc, #56]	; (800ade0 <__fpclassifyd+0x4c>)
 800ada8:	428a      	cmp	r2, r1
 800adaa:	d90e      	bls.n	800adca <__fpclassifyd+0x36>
 800adac:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800adb0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800adb4:	428a      	cmp	r2, r1
 800adb6:	d908      	bls.n	800adca <__fpclassifyd+0x36>
 800adb8:	4a0a      	ldr	r2, [pc, #40]	; (800ade4 <__fpclassifyd+0x50>)
 800adba:	4213      	tst	r3, r2
 800adbc:	d007      	beq.n	800adce <__fpclassifyd+0x3a>
 800adbe:	4294      	cmp	r4, r2
 800adc0:	d107      	bne.n	800add2 <__fpclassifyd+0x3e>
 800adc2:	fab0 f080 	clz	r0, r0
 800adc6:	0940      	lsrs	r0, r0, #5
 800adc8:	bd10      	pop	{r4, pc}
 800adca:	2004      	movs	r0, #4
 800adcc:	e7fc      	b.n	800adc8 <__fpclassifyd+0x34>
 800adce:	2003      	movs	r0, #3
 800add0:	e7fa      	b.n	800adc8 <__fpclassifyd+0x34>
 800add2:	2000      	movs	r0, #0
 800add4:	e7f8      	b.n	800adc8 <__fpclassifyd+0x34>
 800add6:	2800      	cmp	r0, #0
 800add8:	d1ee      	bne.n	800adb8 <__fpclassifyd+0x24>
 800adda:	2002      	movs	r0, #2
 800addc:	e7f4      	b.n	800adc8 <__fpclassifyd+0x34>
 800adde:	bf00      	nop
 800ade0:	7fdfffff 	.word	0x7fdfffff
 800ade4:	7ff00000 	.word	0x7ff00000

0800ade8 <round>:
 800ade8:	ec53 2b10 	vmov	r2, r3, d0
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800adf2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800adf6:	2813      	cmp	r0, #19
 800adf8:	ee10 5a10 	vmov	r5, s0
 800adfc:	4619      	mov	r1, r3
 800adfe:	dc18      	bgt.n	800ae32 <round+0x4a>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	da09      	bge.n	800ae18 <round+0x30>
 800ae04:	3001      	adds	r0, #1
 800ae06:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800ae0a:	d103      	bne.n	800ae14 <round+0x2c>
 800ae0c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ae10:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae14:	2300      	movs	r3, #0
 800ae16:	e02a      	b.n	800ae6e <round+0x86>
 800ae18:	4c16      	ldr	r4, [pc, #88]	; (800ae74 <round+0x8c>)
 800ae1a:	4104      	asrs	r4, r0
 800ae1c:	ea03 0604 	and.w	r6, r3, r4
 800ae20:	4316      	orrs	r6, r2
 800ae22:	d011      	beq.n	800ae48 <round+0x60>
 800ae24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae28:	4103      	asrs	r3, r0
 800ae2a:	440b      	add	r3, r1
 800ae2c:	ea23 0104 	bic.w	r1, r3, r4
 800ae30:	e7f0      	b.n	800ae14 <round+0x2c>
 800ae32:	2833      	cmp	r0, #51	; 0x33
 800ae34:	dd0b      	ble.n	800ae4e <round+0x66>
 800ae36:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ae3a:	d105      	bne.n	800ae48 <round+0x60>
 800ae3c:	ee10 0a10 	vmov	r0, s0
 800ae40:	f7f5 fa3c 	bl	80002bc <__adddf3>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	ec43 2b10 	vmov	d0, r2, r3
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ae52:	f04f 34ff 	mov.w	r4, #4294967295
 800ae56:	40f4      	lsrs	r4, r6
 800ae58:	4214      	tst	r4, r2
 800ae5a:	d0f5      	beq.n	800ae48 <round+0x60>
 800ae5c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ae60:	2301      	movs	r3, #1
 800ae62:	4083      	lsls	r3, r0
 800ae64:	195b      	adds	r3, r3, r5
 800ae66:	bf28      	it	cs
 800ae68:	3101      	addcs	r1, #1
 800ae6a:	ea23 0304 	bic.w	r3, r3, r4
 800ae6e:	461a      	mov	r2, r3
 800ae70:	460b      	mov	r3, r1
 800ae72:	e7e9      	b.n	800ae48 <round+0x60>
 800ae74:	000fffff 	.word	0x000fffff

0800ae78 <__ieee754_pow>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	ed2d 8b06 	vpush	{d8-d10}
 800ae80:	b089      	sub	sp, #36	; 0x24
 800ae82:	ed8d 1b00 	vstr	d1, [sp]
 800ae86:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae8e:	ea58 0102 	orrs.w	r1, r8, r2
 800ae92:	ec57 6b10 	vmov	r6, r7, d0
 800ae96:	d115      	bne.n	800aec4 <__ieee754_pow+0x4c>
 800ae98:	19b3      	adds	r3, r6, r6
 800ae9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ae9e:	4152      	adcs	r2, r2
 800aea0:	4299      	cmp	r1, r3
 800aea2:	4b89      	ldr	r3, [pc, #548]	; (800b0c8 <__ieee754_pow+0x250>)
 800aea4:	4193      	sbcs	r3, r2
 800aea6:	f080 84d1 	bcs.w	800b84c <__ieee754_pow+0x9d4>
 800aeaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	f7f5 fa03 	bl	80002bc <__adddf3>
 800aeb6:	ec41 0b10 	vmov	d0, r0, r1
 800aeba:	b009      	add	sp, #36	; 0x24
 800aebc:	ecbd 8b06 	vpop	{d8-d10}
 800aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec4:	4b81      	ldr	r3, [pc, #516]	; (800b0cc <__ieee754_pow+0x254>)
 800aec6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aeca:	429c      	cmp	r4, r3
 800aecc:	ee10 aa10 	vmov	sl, s0
 800aed0:	463d      	mov	r5, r7
 800aed2:	dc06      	bgt.n	800aee2 <__ieee754_pow+0x6a>
 800aed4:	d101      	bne.n	800aeda <__ieee754_pow+0x62>
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	d1e7      	bne.n	800aeaa <__ieee754_pow+0x32>
 800aeda:	4598      	cmp	r8, r3
 800aedc:	dc01      	bgt.n	800aee2 <__ieee754_pow+0x6a>
 800aede:	d10f      	bne.n	800af00 <__ieee754_pow+0x88>
 800aee0:	b172      	cbz	r2, 800af00 <__ieee754_pow+0x88>
 800aee2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aee6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aeea:	ea55 050a 	orrs.w	r5, r5, sl
 800aeee:	d1dc      	bne.n	800aeaa <__ieee754_pow+0x32>
 800aef0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aef4:	18db      	adds	r3, r3, r3
 800aef6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aefa:	4152      	adcs	r2, r2
 800aefc:	429d      	cmp	r5, r3
 800aefe:	e7d0      	b.n	800aea2 <__ieee754_pow+0x2a>
 800af00:	2d00      	cmp	r5, #0
 800af02:	da3b      	bge.n	800af7c <__ieee754_pow+0x104>
 800af04:	4b72      	ldr	r3, [pc, #456]	; (800b0d0 <__ieee754_pow+0x258>)
 800af06:	4598      	cmp	r8, r3
 800af08:	dc51      	bgt.n	800afae <__ieee754_pow+0x136>
 800af0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af0e:	4598      	cmp	r8, r3
 800af10:	f340 84ab 	ble.w	800b86a <__ieee754_pow+0x9f2>
 800af14:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af1c:	2b14      	cmp	r3, #20
 800af1e:	dd0f      	ble.n	800af40 <__ieee754_pow+0xc8>
 800af20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af24:	fa22 f103 	lsr.w	r1, r2, r3
 800af28:	fa01 f303 	lsl.w	r3, r1, r3
 800af2c:	4293      	cmp	r3, r2
 800af2e:	f040 849c 	bne.w	800b86a <__ieee754_pow+0x9f2>
 800af32:	f001 0101 	and.w	r1, r1, #1
 800af36:	f1c1 0302 	rsb	r3, r1, #2
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	b182      	cbz	r2, 800af60 <__ieee754_pow+0xe8>
 800af3e:	e05f      	b.n	800b000 <__ieee754_pow+0x188>
 800af40:	2a00      	cmp	r2, #0
 800af42:	d15b      	bne.n	800affc <__ieee754_pow+0x184>
 800af44:	f1c3 0314 	rsb	r3, r3, #20
 800af48:	fa48 f103 	asr.w	r1, r8, r3
 800af4c:	fa01 f303 	lsl.w	r3, r1, r3
 800af50:	4543      	cmp	r3, r8
 800af52:	f040 8487 	bne.w	800b864 <__ieee754_pow+0x9ec>
 800af56:	f001 0101 	and.w	r1, r1, #1
 800af5a:	f1c1 0302 	rsb	r3, r1, #2
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	4b5c      	ldr	r3, [pc, #368]	; (800b0d4 <__ieee754_pow+0x25c>)
 800af62:	4598      	cmp	r8, r3
 800af64:	d132      	bne.n	800afcc <__ieee754_pow+0x154>
 800af66:	f1b9 0f00 	cmp.w	r9, #0
 800af6a:	f280 8477 	bge.w	800b85c <__ieee754_pow+0x9e4>
 800af6e:	4959      	ldr	r1, [pc, #356]	; (800b0d4 <__ieee754_pow+0x25c>)
 800af70:	4632      	mov	r2, r6
 800af72:	463b      	mov	r3, r7
 800af74:	2000      	movs	r0, #0
 800af76:	f7f5 fc81 	bl	800087c <__aeabi_ddiv>
 800af7a:	e79c      	b.n	800aeb6 <__ieee754_pow+0x3e>
 800af7c:	2300      	movs	r3, #0
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	2a00      	cmp	r2, #0
 800af82:	d13d      	bne.n	800b000 <__ieee754_pow+0x188>
 800af84:	4b51      	ldr	r3, [pc, #324]	; (800b0cc <__ieee754_pow+0x254>)
 800af86:	4598      	cmp	r8, r3
 800af88:	d1ea      	bne.n	800af60 <__ieee754_pow+0xe8>
 800af8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af92:	ea53 030a 	orrs.w	r3, r3, sl
 800af96:	f000 8459 	beq.w	800b84c <__ieee754_pow+0x9d4>
 800af9a:	4b4f      	ldr	r3, [pc, #316]	; (800b0d8 <__ieee754_pow+0x260>)
 800af9c:	429c      	cmp	r4, r3
 800af9e:	dd08      	ble.n	800afb2 <__ieee754_pow+0x13a>
 800afa0:	f1b9 0f00 	cmp.w	r9, #0
 800afa4:	f2c0 8456 	blt.w	800b854 <__ieee754_pow+0x9dc>
 800afa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afac:	e783      	b.n	800aeb6 <__ieee754_pow+0x3e>
 800afae:	2302      	movs	r3, #2
 800afb0:	e7e5      	b.n	800af7e <__ieee754_pow+0x106>
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	f04f 0000 	mov.w	r0, #0
 800afba:	f04f 0100 	mov.w	r1, #0
 800afbe:	f6bf af7a 	bge.w	800aeb6 <__ieee754_pow+0x3e>
 800afc2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800afc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afca:	e774      	b.n	800aeb6 <__ieee754_pow+0x3e>
 800afcc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afd0:	d106      	bne.n	800afe0 <__ieee754_pow+0x168>
 800afd2:	4632      	mov	r2, r6
 800afd4:	463b      	mov	r3, r7
 800afd6:	4630      	mov	r0, r6
 800afd8:	4639      	mov	r1, r7
 800afda:	f7f5 fb25 	bl	8000628 <__aeabi_dmul>
 800afde:	e76a      	b.n	800aeb6 <__ieee754_pow+0x3e>
 800afe0:	4b3e      	ldr	r3, [pc, #248]	; (800b0dc <__ieee754_pow+0x264>)
 800afe2:	4599      	cmp	r9, r3
 800afe4:	d10c      	bne.n	800b000 <__ieee754_pow+0x188>
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	db0a      	blt.n	800b000 <__ieee754_pow+0x188>
 800afea:	ec47 6b10 	vmov	d0, r6, r7
 800afee:	b009      	add	sp, #36	; 0x24
 800aff0:	ecbd 8b06 	vpop	{d8-d10}
 800aff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	f000 bd20 	b.w	800ba3c <__ieee754_sqrt>
 800affc:	2300      	movs	r3, #0
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	ec47 6b10 	vmov	d0, r6, r7
 800b004:	f000 fc62 	bl	800b8cc <fabs>
 800b008:	ec51 0b10 	vmov	r0, r1, d0
 800b00c:	f1ba 0f00 	cmp.w	sl, #0
 800b010:	d129      	bne.n	800b066 <__ieee754_pow+0x1ee>
 800b012:	b124      	cbz	r4, 800b01e <__ieee754_pow+0x1a6>
 800b014:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <__ieee754_pow+0x25c>)
 800b016:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d123      	bne.n	800b066 <__ieee754_pow+0x1ee>
 800b01e:	f1b9 0f00 	cmp.w	r9, #0
 800b022:	da05      	bge.n	800b030 <__ieee754_pow+0x1b8>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	2000      	movs	r0, #0
 800b02a:	492a      	ldr	r1, [pc, #168]	; (800b0d4 <__ieee754_pow+0x25c>)
 800b02c:	f7f5 fc26 	bl	800087c <__aeabi_ddiv>
 800b030:	2d00      	cmp	r5, #0
 800b032:	f6bf af40 	bge.w	800aeb6 <__ieee754_pow+0x3e>
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b03c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b040:	431c      	orrs	r4, r3
 800b042:	d108      	bne.n	800b056 <__ieee754_pow+0x1de>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4610      	mov	r0, r2
 800b04a:	4619      	mov	r1, r3
 800b04c:	f7f5 f934 	bl	80002b8 <__aeabi_dsub>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	e78f      	b.n	800af76 <__ieee754_pow+0xfe>
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f47f af2c 	bne.w	800aeb6 <__ieee754_pow+0x3e>
 800b05e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b062:	4619      	mov	r1, r3
 800b064:	e727      	b.n	800aeb6 <__ieee754_pow+0x3e>
 800b066:	0feb      	lsrs	r3, r5, #31
 800b068:	3b01      	subs	r3, #1
 800b06a:	9306      	str	r3, [sp, #24]
 800b06c:	9a06      	ldr	r2, [sp, #24]
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	d102      	bne.n	800b07a <__ieee754_pow+0x202>
 800b074:	4632      	mov	r2, r6
 800b076:	463b      	mov	r3, r7
 800b078:	e7e6      	b.n	800b048 <__ieee754_pow+0x1d0>
 800b07a:	4b19      	ldr	r3, [pc, #100]	; (800b0e0 <__ieee754_pow+0x268>)
 800b07c:	4598      	cmp	r8, r3
 800b07e:	f340 80fb 	ble.w	800b278 <__ieee754_pow+0x400>
 800b082:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b086:	4598      	cmp	r8, r3
 800b088:	4b13      	ldr	r3, [pc, #76]	; (800b0d8 <__ieee754_pow+0x260>)
 800b08a:	dd0c      	ble.n	800b0a6 <__ieee754_pow+0x22e>
 800b08c:	429c      	cmp	r4, r3
 800b08e:	dc0f      	bgt.n	800b0b0 <__ieee754_pow+0x238>
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	da0f      	bge.n	800b0b6 <__ieee754_pow+0x23e>
 800b096:	2000      	movs	r0, #0
 800b098:	b009      	add	sp, #36	; 0x24
 800b09a:	ecbd 8b06 	vpop	{d8-d10}
 800b09e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a2:	f000 bcc2 	b.w	800ba2a <__math_oflow>
 800b0a6:	429c      	cmp	r4, r3
 800b0a8:	dbf2      	blt.n	800b090 <__ieee754_pow+0x218>
 800b0aa:	4b0a      	ldr	r3, [pc, #40]	; (800b0d4 <__ieee754_pow+0x25c>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	dd19      	ble.n	800b0e4 <__ieee754_pow+0x26c>
 800b0b0:	f1b9 0f00 	cmp.w	r9, #0
 800b0b4:	dcef      	bgt.n	800b096 <__ieee754_pow+0x21e>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	b009      	add	sp, #36	; 0x24
 800b0ba:	ecbd 8b06 	vpop	{d8-d10}
 800b0be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c2:	f000 bca9 	b.w	800ba18 <__math_uflow>
 800b0c6:	bf00      	nop
 800b0c8:	fff00000 	.word	0xfff00000
 800b0cc:	7ff00000 	.word	0x7ff00000
 800b0d0:	433fffff 	.word	0x433fffff
 800b0d4:	3ff00000 	.word	0x3ff00000
 800b0d8:	3fefffff 	.word	0x3fefffff
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	41e00000 	.word	0x41e00000
 800b0e4:	4b60      	ldr	r3, [pc, #384]	; (800b268 <__ieee754_pow+0x3f0>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f7f5 f8e6 	bl	80002b8 <__aeabi_dsub>
 800b0ec:	a354      	add	r3, pc, #336	; (adr r3, 800b240 <__ieee754_pow+0x3c8>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	f7f5 fa97 	bl	8000628 <__aeabi_dmul>
 800b0fa:	a353      	add	r3, pc, #332	; (adr r3, 800b248 <__ieee754_pow+0x3d0>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f7f5 fa8e 	bl	8000628 <__aeabi_dmul>
 800b10c:	4b57      	ldr	r3, [pc, #348]	; (800b26c <__ieee754_pow+0x3f4>)
 800b10e:	4682      	mov	sl, r0
 800b110:	468b      	mov	fp, r1
 800b112:	2200      	movs	r2, #0
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 fa86 	bl	8000628 <__aeabi_dmul>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	a14b      	add	r1, pc, #300	; (adr r1, 800b250 <__ieee754_pow+0x3d8>)
 800b122:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b126:	f7f5 f8c7 	bl	80002b8 <__aeabi_dsub>
 800b12a:	4622      	mov	r2, r4
 800b12c:	462b      	mov	r3, r5
 800b12e:	f7f5 fa7b 	bl	8000628 <__aeabi_dmul>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	2000      	movs	r0, #0
 800b138:	494d      	ldr	r1, [pc, #308]	; (800b270 <__ieee754_pow+0x3f8>)
 800b13a:	f7f5 f8bd 	bl	80002b8 <__aeabi_dsub>
 800b13e:	4622      	mov	r2, r4
 800b140:	4680      	mov	r8, r0
 800b142:	4689      	mov	r9, r1
 800b144:	462b      	mov	r3, r5
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 fa6d 	bl	8000628 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 fa67 	bl	8000628 <__aeabi_dmul>
 800b15a:	a33f      	add	r3, pc, #252	; (adr r3, 800b258 <__ieee754_pow+0x3e0>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f7f5 fa62 	bl	8000628 <__aeabi_dmul>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4650      	mov	r0, sl
 800b16a:	4659      	mov	r1, fp
 800b16c:	f7f5 f8a4 	bl	80002b8 <__aeabi_dsub>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	4630      	mov	r0, r6
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 f89e 	bl	80002bc <__adddf3>
 800b180:	2000      	movs	r0, #0
 800b182:	4632      	mov	r2, r6
 800b184:	463b      	mov	r3, r7
 800b186:	4604      	mov	r4, r0
 800b188:	460d      	mov	r5, r1
 800b18a:	f7f5 f895 	bl	80002b8 <__aeabi_dsub>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	4640      	mov	r0, r8
 800b194:	4649      	mov	r1, r9
 800b196:	f7f5 f88f 	bl	80002b8 <__aeabi_dsub>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	9a06      	ldr	r2, [sp, #24]
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	4682      	mov	sl, r0
 800b1a4:	468b      	mov	fp, r1
 800b1a6:	f040 81e7 	bne.w	800b578 <__ieee754_pow+0x700>
 800b1aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b260 <__ieee754_pow+0x3e8>
 800b1ae:	eeb0 8a47 	vmov.f32	s16, s14
 800b1b2:	eef0 8a67 	vmov.f32	s17, s15
 800b1b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1c4:	f7f5 f878 	bl	80002b8 <__aeabi_dsub>
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	462b      	mov	r3, r5
 800b1cc:	f7f5 fa2c 	bl	8000628 <__aeabi_dmul>
 800b1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	4650      	mov	r0, sl
 800b1da:	4659      	mov	r1, fp
 800b1dc:	f7f5 fa24 	bl	8000628 <__aeabi_dmul>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	f7f5 f868 	bl	80002bc <__adddf3>
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4689      	mov	r9, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fa16 	bl	8000628 <__aeabi_dmul>
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4604      	mov	r4, r0
 800b200:	460d      	mov	r5, r1
 800b202:	4602      	mov	r2, r0
 800b204:	4649      	mov	r1, r9
 800b206:	4640      	mov	r0, r8
 800b208:	f7f5 f858 	bl	80002bc <__adddf3>
 800b20c:	4b19      	ldr	r3, [pc, #100]	; (800b274 <__ieee754_pow+0x3fc>)
 800b20e:	4299      	cmp	r1, r3
 800b210:	ec45 4b19 	vmov	d9, r4, r5
 800b214:	4606      	mov	r6, r0
 800b216:	460f      	mov	r7, r1
 800b218:	468b      	mov	fp, r1
 800b21a:	f340 82f0 	ble.w	800b7fe <__ieee754_pow+0x986>
 800b21e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b222:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b226:	4303      	orrs	r3, r0
 800b228:	f000 81e4 	beq.w	800b5f4 <__ieee754_pow+0x77c>
 800b22c:	ec51 0b18 	vmov	r0, r1, d8
 800b230:	2200      	movs	r2, #0
 800b232:	2300      	movs	r3, #0
 800b234:	f7f5 fc6a 	bl	8000b0c <__aeabi_dcmplt>
 800b238:	3800      	subs	r0, #0
 800b23a:	bf18      	it	ne
 800b23c:	2001      	movne	r0, #1
 800b23e:	e72b      	b.n	800b098 <__ieee754_pow+0x220>
 800b240:	60000000 	.word	0x60000000
 800b244:	3ff71547 	.word	0x3ff71547
 800b248:	f85ddf44 	.word	0xf85ddf44
 800b24c:	3e54ae0b 	.word	0x3e54ae0b
 800b250:	55555555 	.word	0x55555555
 800b254:	3fd55555 	.word	0x3fd55555
 800b258:	652b82fe 	.word	0x652b82fe
 800b25c:	3ff71547 	.word	0x3ff71547
 800b260:	00000000 	.word	0x00000000
 800b264:	bff00000 	.word	0xbff00000
 800b268:	3ff00000 	.word	0x3ff00000
 800b26c:	3fd00000 	.word	0x3fd00000
 800b270:	3fe00000 	.word	0x3fe00000
 800b274:	408fffff 	.word	0x408fffff
 800b278:	4bd5      	ldr	r3, [pc, #852]	; (800b5d0 <__ieee754_pow+0x758>)
 800b27a:	402b      	ands	r3, r5
 800b27c:	2200      	movs	r2, #0
 800b27e:	b92b      	cbnz	r3, 800b28c <__ieee754_pow+0x414>
 800b280:	4bd4      	ldr	r3, [pc, #848]	; (800b5d4 <__ieee754_pow+0x75c>)
 800b282:	f7f5 f9d1 	bl	8000628 <__aeabi_dmul>
 800b286:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b28a:	460c      	mov	r4, r1
 800b28c:	1523      	asrs	r3, r4, #20
 800b28e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b292:	4413      	add	r3, r2
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	4bd0      	ldr	r3, [pc, #832]	; (800b5d8 <__ieee754_pow+0x760>)
 800b298:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b29c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2a6:	dd08      	ble.n	800b2ba <__ieee754_pow+0x442>
 800b2a8:	4bcc      	ldr	r3, [pc, #816]	; (800b5dc <__ieee754_pow+0x764>)
 800b2aa:	429c      	cmp	r4, r3
 800b2ac:	f340 8162 	ble.w	800b574 <__ieee754_pow+0x6fc>
 800b2b0:	9b05      	ldr	r3, [sp, #20]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	9305      	str	r3, [sp, #20]
 800b2b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2ba:	2400      	movs	r4, #0
 800b2bc:	00e3      	lsls	r3, r4, #3
 800b2be:	9307      	str	r3, [sp, #28]
 800b2c0:	4bc7      	ldr	r3, [pc, #796]	; (800b5e0 <__ieee754_pow+0x768>)
 800b2c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2c6:	ed93 7b00 	vldr	d7, [r3]
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	ec53 2b17 	vmov	r2, r3, d7
 800b2d0:	eeb0 9a47 	vmov.f32	s18, s14
 800b2d4:	eef0 9a67 	vmov.f32	s19, s15
 800b2d8:	4682      	mov	sl, r0
 800b2da:	f7f4 ffed 	bl	80002b8 <__aeabi_dsub>
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	460f      	mov	r7, r1
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	ec51 0b19 	vmov	r0, r1, d9
 800b2ea:	f7f4 ffe7 	bl	80002bc <__adddf3>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	49bb      	ldr	r1, [pc, #748]	; (800b5e4 <__ieee754_pow+0x76c>)
 800b2f6:	f7f5 fac1 	bl	800087c <__aeabi_ddiv>
 800b2fa:	ec41 0b1a 	vmov	d10, r0, r1
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4630      	mov	r0, r6
 800b304:	4639      	mov	r1, r7
 800b306:	f7f5 f98f 	bl	8000628 <__aeabi_dmul>
 800b30a:	2300      	movs	r3, #0
 800b30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b310:	9302      	str	r3, [sp, #8]
 800b312:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b316:	46ab      	mov	fp, r5
 800b318:	106d      	asrs	r5, r5, #1
 800b31a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b31e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b322:	ec41 0b18 	vmov	d8, r0, r1
 800b326:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b32a:	2200      	movs	r2, #0
 800b32c:	4640      	mov	r0, r8
 800b32e:	4649      	mov	r1, r9
 800b330:	4614      	mov	r4, r2
 800b332:	461d      	mov	r5, r3
 800b334:	f7f5 f978 	bl	8000628 <__aeabi_dmul>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f4 ffba 	bl	80002b8 <__aeabi_dsub>
 800b344:	ec53 2b19 	vmov	r2, r3, d9
 800b348:	4606      	mov	r6, r0
 800b34a:	460f      	mov	r7, r1
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f4 ffb2 	bl	80002b8 <__aeabi_dsub>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4650      	mov	r0, sl
 800b35a:	4659      	mov	r1, fp
 800b35c:	f7f4 ffac 	bl	80002b8 <__aeabi_dsub>
 800b360:	4642      	mov	r2, r8
 800b362:	464b      	mov	r3, r9
 800b364:	f7f5 f960 	bl	8000628 <__aeabi_dmul>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f4 ffa2 	bl	80002b8 <__aeabi_dsub>
 800b374:	ec53 2b1a 	vmov	r2, r3, d10
 800b378:	f7f5 f956 	bl	8000628 <__aeabi_dmul>
 800b37c:	ec53 2b18 	vmov	r2, r3, d8
 800b380:	ec41 0b19 	vmov	d9, r0, r1
 800b384:	ec51 0b18 	vmov	r0, r1, d8
 800b388:	f7f5 f94e 	bl	8000628 <__aeabi_dmul>
 800b38c:	a37c      	add	r3, pc, #496	; (adr r3, 800b580 <__ieee754_pow+0x708>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	4604      	mov	r4, r0
 800b394:	460d      	mov	r5, r1
 800b396:	f7f5 f947 	bl	8000628 <__aeabi_dmul>
 800b39a:	a37b      	add	r3, pc, #492	; (adr r3, 800b588 <__ieee754_pow+0x710>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f7f4 ff8c 	bl	80002bc <__adddf3>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	f7f5 f93e 	bl	8000628 <__aeabi_dmul>
 800b3ac:	a378      	add	r3, pc, #480	; (adr r3, 800b590 <__ieee754_pow+0x718>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f7f4 ff83 	bl	80002bc <__adddf3>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	462b      	mov	r3, r5
 800b3ba:	f7f5 f935 	bl	8000628 <__aeabi_dmul>
 800b3be:	a376      	add	r3, pc, #472	; (adr r3, 800b598 <__ieee754_pow+0x720>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f7f4 ff7a 	bl	80002bc <__adddf3>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	f7f5 f92c 	bl	8000628 <__aeabi_dmul>
 800b3d0:	a373      	add	r3, pc, #460	; (adr r3, 800b5a0 <__ieee754_pow+0x728>)
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	f7f4 ff71 	bl	80002bc <__adddf3>
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	f7f5 f923 	bl	8000628 <__aeabi_dmul>
 800b3e2:	a371      	add	r3, pc, #452	; (adr r3, 800b5a8 <__ieee754_pow+0x730>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	f7f4 ff68 	bl	80002bc <__adddf3>
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	462b      	mov	r3, r5
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 f916 	bl	8000628 <__aeabi_dmul>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4630      	mov	r0, r6
 800b402:	4639      	mov	r1, r7
 800b404:	f7f5 f910 	bl	8000628 <__aeabi_dmul>
 800b408:	4642      	mov	r2, r8
 800b40a:	4604      	mov	r4, r0
 800b40c:	460d      	mov	r5, r1
 800b40e:	464b      	mov	r3, r9
 800b410:	ec51 0b18 	vmov	r0, r1, d8
 800b414:	f7f4 ff52 	bl	80002bc <__adddf3>
 800b418:	ec53 2b19 	vmov	r2, r3, d9
 800b41c:	f7f5 f904 	bl	8000628 <__aeabi_dmul>
 800b420:	4622      	mov	r2, r4
 800b422:	462b      	mov	r3, r5
 800b424:	f7f4 ff4a 	bl	80002bc <__adddf3>
 800b428:	4642      	mov	r2, r8
 800b42a:	4682      	mov	sl, r0
 800b42c:	468b      	mov	fp, r1
 800b42e:	464b      	mov	r3, r9
 800b430:	4640      	mov	r0, r8
 800b432:	4649      	mov	r1, r9
 800b434:	f7f5 f8f8 	bl	8000628 <__aeabi_dmul>
 800b438:	4b6b      	ldr	r3, [pc, #428]	; (800b5e8 <__ieee754_pow+0x770>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	f7f4 ff3c 	bl	80002bc <__adddf3>
 800b444:	4652      	mov	r2, sl
 800b446:	465b      	mov	r3, fp
 800b448:	f7f4 ff38 	bl	80002bc <__adddf3>
 800b44c:	2000      	movs	r0, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f5 f8e5 	bl	8000628 <__aeabi_dmul>
 800b45e:	4b62      	ldr	r3, [pc, #392]	; (800b5e8 <__ieee754_pow+0x770>)
 800b460:	4680      	mov	r8, r0
 800b462:	4689      	mov	r9, r1
 800b464:	2200      	movs	r2, #0
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f4 ff25 	bl	80002b8 <__aeabi_dsub>
 800b46e:	4632      	mov	r2, r6
 800b470:	463b      	mov	r3, r7
 800b472:	f7f4 ff21 	bl	80002b8 <__aeabi_dsub>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4650      	mov	r0, sl
 800b47c:	4659      	mov	r1, fp
 800b47e:	f7f4 ff1b 	bl	80002b8 <__aeabi_dsub>
 800b482:	ec53 2b18 	vmov	r2, r3, d8
 800b486:	f7f5 f8cf 	bl	8000628 <__aeabi_dmul>
 800b48a:	4622      	mov	r2, r4
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	462b      	mov	r3, r5
 800b492:	ec51 0b19 	vmov	r0, r1, d9
 800b496:	f7f5 f8c7 	bl	8000628 <__aeabi_dmul>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f4 ff0b 	bl	80002bc <__adddf3>
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	f7f4 ff03 	bl	80002bc <__adddf3>
 800b4b6:	a33e      	add	r3, pc, #248	; (adr r3, 800b5b0 <__ieee754_pow+0x738>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	2000      	movs	r0, #0
 800b4be:	4604      	mov	r4, r0
 800b4c0:	460d      	mov	r5, r1
 800b4c2:	f7f5 f8b1 	bl	8000628 <__aeabi_dmul>
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	ec41 0b18 	vmov	d8, r0, r1
 800b4cc:	464b      	mov	r3, r9
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7f4 fef1 	bl	80002b8 <__aeabi_dsub>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 feeb 	bl	80002b8 <__aeabi_dsub>
 800b4e2:	a335      	add	r3, pc, #212	; (adr r3, 800b5b8 <__ieee754_pow+0x740>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f5 f89e 	bl	8000628 <__aeabi_dmul>
 800b4ec:	a334      	add	r3, pc, #208	; (adr r3, 800b5c0 <__ieee754_pow+0x748>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7f5 f895 	bl	8000628 <__aeabi_dmul>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4630      	mov	r0, r6
 800b504:	4639      	mov	r1, r7
 800b506:	f7f4 fed9 	bl	80002bc <__adddf3>
 800b50a:	9a07      	ldr	r2, [sp, #28]
 800b50c:	4b37      	ldr	r3, [pc, #220]	; (800b5ec <__ieee754_pow+0x774>)
 800b50e:	4413      	add	r3, r2
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f7f4 fed2 	bl	80002bc <__adddf3>
 800b518:	4682      	mov	sl, r0
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	468b      	mov	fp, r1
 800b51e:	f7f5 f819 	bl	8000554 <__aeabi_i2d>
 800b522:	9a07      	ldr	r2, [sp, #28]
 800b524:	4b32      	ldr	r3, [pc, #200]	; (800b5f0 <__ieee754_pow+0x778>)
 800b526:	4413      	add	r3, r2
 800b528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	4652      	mov	r2, sl
 800b532:	465b      	mov	r3, fp
 800b534:	ec51 0b18 	vmov	r0, r1, d8
 800b538:	f7f4 fec0 	bl	80002bc <__adddf3>
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	f7f4 febc 	bl	80002bc <__adddf3>
 800b544:	4632      	mov	r2, r6
 800b546:	463b      	mov	r3, r7
 800b548:	f7f4 feb8 	bl	80002bc <__adddf3>
 800b54c:	2000      	movs	r0, #0
 800b54e:	4632      	mov	r2, r6
 800b550:	463b      	mov	r3, r7
 800b552:	4604      	mov	r4, r0
 800b554:	460d      	mov	r5, r1
 800b556:	f7f4 feaf 	bl	80002b8 <__aeabi_dsub>
 800b55a:	4642      	mov	r2, r8
 800b55c:	464b      	mov	r3, r9
 800b55e:	f7f4 feab 	bl	80002b8 <__aeabi_dsub>
 800b562:	ec53 2b18 	vmov	r2, r3, d8
 800b566:	f7f4 fea7 	bl	80002b8 <__aeabi_dsub>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4650      	mov	r0, sl
 800b570:	4659      	mov	r1, fp
 800b572:	e610      	b.n	800b196 <__ieee754_pow+0x31e>
 800b574:	2401      	movs	r4, #1
 800b576:	e6a1      	b.n	800b2bc <__ieee754_pow+0x444>
 800b578:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b5c8 <__ieee754_pow+0x750>
 800b57c:	e617      	b.n	800b1ae <__ieee754_pow+0x336>
 800b57e:	bf00      	nop
 800b580:	4a454eef 	.word	0x4a454eef
 800b584:	3fca7e28 	.word	0x3fca7e28
 800b588:	93c9db65 	.word	0x93c9db65
 800b58c:	3fcd864a 	.word	0x3fcd864a
 800b590:	a91d4101 	.word	0xa91d4101
 800b594:	3fd17460 	.word	0x3fd17460
 800b598:	518f264d 	.word	0x518f264d
 800b59c:	3fd55555 	.word	0x3fd55555
 800b5a0:	db6fabff 	.word	0xdb6fabff
 800b5a4:	3fdb6db6 	.word	0x3fdb6db6
 800b5a8:	33333303 	.word	0x33333303
 800b5ac:	3fe33333 	.word	0x3fe33333
 800b5b0:	e0000000 	.word	0xe0000000
 800b5b4:	3feec709 	.word	0x3feec709
 800b5b8:	dc3a03fd 	.word	0xdc3a03fd
 800b5bc:	3feec709 	.word	0x3feec709
 800b5c0:	145b01f5 	.word	0x145b01f5
 800b5c4:	be3e2fe0 	.word	0xbe3e2fe0
 800b5c8:	00000000 	.word	0x00000000
 800b5cc:	3ff00000 	.word	0x3ff00000
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	43400000 	.word	0x43400000
 800b5d8:	0003988e 	.word	0x0003988e
 800b5dc:	000bb679 	.word	0x000bb679
 800b5e0:	0800bf18 	.word	0x0800bf18
 800b5e4:	3ff00000 	.word	0x3ff00000
 800b5e8:	40080000 	.word	0x40080000
 800b5ec:	0800bf38 	.word	0x0800bf38
 800b5f0:	0800bf28 	.word	0x0800bf28
 800b5f4:	a3b3      	add	r3, pc, #716	; (adr r3, 800b8c4 <__ieee754_pow+0xa4c>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	f7f4 fe5d 	bl	80002bc <__adddf3>
 800b602:	4622      	mov	r2, r4
 800b604:	ec41 0b1a 	vmov	d10, r0, r1
 800b608:	462b      	mov	r3, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	4639      	mov	r1, r7
 800b60e:	f7f4 fe53 	bl	80002b8 <__aeabi_dsub>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	ec51 0b1a 	vmov	r0, r1, d10
 800b61a:	f7f5 fa95 	bl	8000b48 <__aeabi_dcmpgt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f47f ae04 	bne.w	800b22c <__ieee754_pow+0x3b4>
 800b624:	4aa2      	ldr	r2, [pc, #648]	; (800b8b0 <__ieee754_pow+0xa38>)
 800b626:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b62a:	4293      	cmp	r3, r2
 800b62c:	f340 8107 	ble.w	800b83e <__ieee754_pow+0x9c6>
 800b630:	151b      	asrs	r3, r3, #20
 800b632:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b636:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b63a:	fa4a fa03 	asr.w	sl, sl, r3
 800b63e:	44da      	add	sl, fp
 800b640:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b644:	489b      	ldr	r0, [pc, #620]	; (800b8b4 <__ieee754_pow+0xa3c>)
 800b646:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b64a:	4108      	asrs	r0, r1
 800b64c:	ea00 030a 	and.w	r3, r0, sl
 800b650:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b654:	f1c1 0114 	rsb	r1, r1, #20
 800b658:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b65c:	fa4a fa01 	asr.w	sl, sl, r1
 800b660:	f1bb 0f00 	cmp.w	fp, #0
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	bfb8      	it	lt
 800b66e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b672:	f7f4 fe21 	bl	80002b8 <__aeabi_dsub>
 800b676:	ec41 0b19 	vmov	d9, r0, r1
 800b67a:	4642      	mov	r2, r8
 800b67c:	464b      	mov	r3, r9
 800b67e:	ec51 0b19 	vmov	r0, r1, d9
 800b682:	f7f4 fe1b 	bl	80002bc <__adddf3>
 800b686:	a37a      	add	r3, pc, #488	; (adr r3, 800b870 <__ieee754_pow+0x9f8>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	2000      	movs	r0, #0
 800b68e:	4604      	mov	r4, r0
 800b690:	460d      	mov	r5, r1
 800b692:	f7f4 ffc9 	bl	8000628 <__aeabi_dmul>
 800b696:	ec53 2b19 	vmov	r2, r3, d9
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f4 fe09 	bl	80002b8 <__aeabi_dsub>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	f7f4 fe03 	bl	80002b8 <__aeabi_dsub>
 800b6b2:	a371      	add	r3, pc, #452	; (adr r3, 800b878 <__ieee754_pow+0xa00>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 ffb6 	bl	8000628 <__aeabi_dmul>
 800b6bc:	a370      	add	r3, pc, #448	; (adr r3, 800b880 <__ieee754_pow+0xa08>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	4680      	mov	r8, r0
 800b6c4:	4689      	mov	r9, r1
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	f7f4 ffad 	bl	8000628 <__aeabi_dmul>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	f7f4 fdf1 	bl	80002bc <__adddf3>
 800b6da:	4604      	mov	r4, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fde9 	bl	80002bc <__adddf3>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	4680      	mov	r8, r0
 800b6f0:	4689      	mov	r9, r1
 800b6f2:	f7f4 fde1 	bl	80002b8 <__aeabi_dsub>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f4 fddb 	bl	80002b8 <__aeabi_dsub>
 800b702:	4642      	mov	r2, r8
 800b704:	4606      	mov	r6, r0
 800b706:	460f      	mov	r7, r1
 800b708:	464b      	mov	r3, r9
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	f7f4 ff8b 	bl	8000628 <__aeabi_dmul>
 800b712:	a35d      	add	r3, pc, #372	; (adr r3, 800b888 <__ieee754_pow+0xa10>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	4604      	mov	r4, r0
 800b71a:	460d      	mov	r5, r1
 800b71c:	f7f4 ff84 	bl	8000628 <__aeabi_dmul>
 800b720:	a35b      	add	r3, pc, #364	; (adr r3, 800b890 <__ieee754_pow+0xa18>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdc7 	bl	80002b8 <__aeabi_dsub>
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	f7f4 ff7b 	bl	8000628 <__aeabi_dmul>
 800b732:	a359      	add	r3, pc, #356	; (adr r3, 800b898 <__ieee754_pow+0xa20>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fdc0 	bl	80002bc <__adddf3>
 800b73c:	4622      	mov	r2, r4
 800b73e:	462b      	mov	r3, r5
 800b740:	f7f4 ff72 	bl	8000628 <__aeabi_dmul>
 800b744:	a356      	add	r3, pc, #344	; (adr r3, 800b8a0 <__ieee754_pow+0xa28>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fdb5 	bl	80002b8 <__aeabi_dsub>
 800b74e:	4622      	mov	r2, r4
 800b750:	462b      	mov	r3, r5
 800b752:	f7f4 ff69 	bl	8000628 <__aeabi_dmul>
 800b756:	a354      	add	r3, pc, #336	; (adr r3, 800b8a8 <__ieee754_pow+0xa30>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fdae 	bl	80002bc <__adddf3>
 800b760:	4622      	mov	r2, r4
 800b762:	462b      	mov	r3, r5
 800b764:	f7f4 ff60 	bl	8000628 <__aeabi_dmul>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f4 fda2 	bl	80002b8 <__aeabi_dsub>
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f4 ff52 	bl	8000628 <__aeabi_dmul>
 800b784:	2200      	movs	r2, #0
 800b786:	ec41 0b19 	vmov	d9, r0, r1
 800b78a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f4 fd91 	bl	80002b8 <__aeabi_dsub>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	ec51 0b19 	vmov	r0, r1, d9
 800b79e:	f7f5 f86d 	bl	800087c <__aeabi_ddiv>
 800b7a2:	4632      	mov	r2, r6
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 ff3b 	bl	8000628 <__aeabi_dmul>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	f7f4 fd81 	bl	80002bc <__adddf3>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 fd79 	bl	80002b8 <__aeabi_dsub>
 800b7c6:	4642      	mov	r2, r8
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	f7f4 fd75 	bl	80002b8 <__aeabi_dsub>
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	4939      	ldr	r1, [pc, #228]	; (800b8b8 <__ieee754_pow+0xa40>)
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	f7f4 fd6f 	bl	80002b8 <__aeabi_dsub>
 800b7da:	ec41 0b10 	vmov	d0, r0, r1
 800b7de:	ee10 3a90 	vmov	r3, s1
 800b7e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ea:	da2b      	bge.n	800b844 <__ieee754_pow+0x9cc>
 800b7ec:	4650      	mov	r0, sl
 800b7ee:	f000 f877 	bl	800b8e0 <scalbn>
 800b7f2:	ec51 0b10 	vmov	r0, r1, d0
 800b7f6:	ec53 2b18 	vmov	r2, r3, d8
 800b7fa:	f7ff bbee 	b.w	800afda <__ieee754_pow+0x162>
 800b7fe:	4b2f      	ldr	r3, [pc, #188]	; (800b8bc <__ieee754_pow+0xa44>)
 800b800:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b804:	429e      	cmp	r6, r3
 800b806:	f77f af0d 	ble.w	800b624 <__ieee754_pow+0x7ac>
 800b80a:	4b2d      	ldr	r3, [pc, #180]	; (800b8c0 <__ieee754_pow+0xa48>)
 800b80c:	440b      	add	r3, r1
 800b80e:	4303      	orrs	r3, r0
 800b810:	d009      	beq.n	800b826 <__ieee754_pow+0x9ae>
 800b812:	ec51 0b18 	vmov	r0, r1, d8
 800b816:	2200      	movs	r2, #0
 800b818:	2300      	movs	r3, #0
 800b81a:	f7f5 f977 	bl	8000b0c <__aeabi_dcmplt>
 800b81e:	3800      	subs	r0, #0
 800b820:	bf18      	it	ne
 800b822:	2001      	movne	r0, #1
 800b824:	e448      	b.n	800b0b8 <__ieee754_pow+0x240>
 800b826:	4622      	mov	r2, r4
 800b828:	462b      	mov	r3, r5
 800b82a:	f7f4 fd45 	bl	80002b8 <__aeabi_dsub>
 800b82e:	4642      	mov	r2, r8
 800b830:	464b      	mov	r3, r9
 800b832:	f7f5 f97f 	bl	8000b34 <__aeabi_dcmpge>
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f aef4 	beq.w	800b624 <__ieee754_pow+0x7ac>
 800b83c:	e7e9      	b.n	800b812 <__ieee754_pow+0x99a>
 800b83e:	f04f 0a00 	mov.w	sl, #0
 800b842:	e71a      	b.n	800b67a <__ieee754_pow+0x802>
 800b844:	ec51 0b10 	vmov	r0, r1, d0
 800b848:	4619      	mov	r1, r3
 800b84a:	e7d4      	b.n	800b7f6 <__ieee754_pow+0x97e>
 800b84c:	491a      	ldr	r1, [pc, #104]	; (800b8b8 <__ieee754_pow+0xa40>)
 800b84e:	2000      	movs	r0, #0
 800b850:	f7ff bb31 	b.w	800aeb6 <__ieee754_pow+0x3e>
 800b854:	2000      	movs	r0, #0
 800b856:	2100      	movs	r1, #0
 800b858:	f7ff bb2d 	b.w	800aeb6 <__ieee754_pow+0x3e>
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7ff bb29 	b.w	800aeb6 <__ieee754_pow+0x3e>
 800b864:	9204      	str	r2, [sp, #16]
 800b866:	f7ff bb7b 	b.w	800af60 <__ieee754_pow+0xe8>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f7ff bb65 	b.w	800af3a <__ieee754_pow+0xc2>
 800b870:	00000000 	.word	0x00000000
 800b874:	3fe62e43 	.word	0x3fe62e43
 800b878:	fefa39ef 	.word	0xfefa39ef
 800b87c:	3fe62e42 	.word	0x3fe62e42
 800b880:	0ca86c39 	.word	0x0ca86c39
 800b884:	be205c61 	.word	0xbe205c61
 800b888:	72bea4d0 	.word	0x72bea4d0
 800b88c:	3e663769 	.word	0x3e663769
 800b890:	c5d26bf1 	.word	0xc5d26bf1
 800b894:	3ebbbd41 	.word	0x3ebbbd41
 800b898:	af25de2c 	.word	0xaf25de2c
 800b89c:	3f11566a 	.word	0x3f11566a
 800b8a0:	16bebd93 	.word	0x16bebd93
 800b8a4:	3f66c16c 	.word	0x3f66c16c
 800b8a8:	5555553e 	.word	0x5555553e
 800b8ac:	3fc55555 	.word	0x3fc55555
 800b8b0:	3fe00000 	.word	0x3fe00000
 800b8b4:	fff00000 	.word	0xfff00000
 800b8b8:	3ff00000 	.word	0x3ff00000
 800b8bc:	4090cbff 	.word	0x4090cbff
 800b8c0:	3f6f3400 	.word	0x3f6f3400
 800b8c4:	652b82fe 	.word	0x652b82fe
 800b8c8:	3c971547 	.word	0x3c971547

0800b8cc <fabs>:
 800b8cc:	ec51 0b10 	vmov	r0, r1, d0
 800b8d0:	ee10 2a10 	vmov	r2, s0
 800b8d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8d8:	ec43 2b10 	vmov	d0, r2, r3
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <scalbn>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	ec55 4b10 	vmov	r4, r5, d0
 800b8e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	b999      	cbnz	r1, 800b918 <scalbn+0x38>
 800b8f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b8f4:	4323      	orrs	r3, r4
 800b8f6:	d03f      	beq.n	800b978 <scalbn+0x98>
 800b8f8:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <scalbn+0xf0>)
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	ee10 0a10 	vmov	r0, s0
 800b900:	2200      	movs	r2, #0
 800b902:	f7f4 fe91 	bl	8000628 <__aeabi_dmul>
 800b906:	4b33      	ldr	r3, [pc, #204]	; (800b9d4 <scalbn+0xf4>)
 800b908:	429e      	cmp	r6, r3
 800b90a:	4604      	mov	r4, r0
 800b90c:	460d      	mov	r5, r1
 800b90e:	da10      	bge.n	800b932 <scalbn+0x52>
 800b910:	a327      	add	r3, pc, #156	; (adr r3, 800b9b0 <scalbn+0xd0>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	e01f      	b.n	800b958 <scalbn+0x78>
 800b918:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b91c:	4291      	cmp	r1, r2
 800b91e:	d10c      	bne.n	800b93a <scalbn+0x5a>
 800b920:	ee10 2a10 	vmov	r2, s0
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	f7f4 fcc8 	bl	80002bc <__adddf3>
 800b92c:	4604      	mov	r4, r0
 800b92e:	460d      	mov	r5, r1
 800b930:	e022      	b.n	800b978 <scalbn+0x98>
 800b932:	460b      	mov	r3, r1
 800b934:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b938:	3936      	subs	r1, #54	; 0x36
 800b93a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b93e:	4296      	cmp	r6, r2
 800b940:	dd0d      	ble.n	800b95e <scalbn+0x7e>
 800b942:	2d00      	cmp	r5, #0
 800b944:	a11c      	add	r1, pc, #112	; (adr r1, 800b9b8 <scalbn+0xd8>)
 800b946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94a:	da02      	bge.n	800b952 <scalbn+0x72>
 800b94c:	a11c      	add	r1, pc, #112	; (adr r1, 800b9c0 <scalbn+0xe0>)
 800b94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b952:	a319      	add	r3, pc, #100	; (adr r3, 800b9b8 <scalbn+0xd8>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fe66 	bl	8000628 <__aeabi_dmul>
 800b95c:	e7e6      	b.n	800b92c <scalbn+0x4c>
 800b95e:	1872      	adds	r2, r6, r1
 800b960:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b964:	428a      	cmp	r2, r1
 800b966:	dcec      	bgt.n	800b942 <scalbn+0x62>
 800b968:	2a00      	cmp	r2, #0
 800b96a:	dd08      	ble.n	800b97e <scalbn+0x9e>
 800b96c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b978:	ec45 4b10 	vmov	d0, r4, r5
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
 800b97e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b982:	da08      	bge.n	800b996 <scalbn+0xb6>
 800b984:	2d00      	cmp	r5, #0
 800b986:	a10a      	add	r1, pc, #40	; (adr r1, 800b9b0 <scalbn+0xd0>)
 800b988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b98c:	dac0      	bge.n	800b910 <scalbn+0x30>
 800b98e:	a10e      	add	r1, pc, #56	; (adr r1, 800b9c8 <scalbn+0xe8>)
 800b990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b994:	e7bc      	b.n	800b910 <scalbn+0x30>
 800b996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b99a:	3236      	adds	r2, #54	; 0x36
 800b99c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <scalbn+0xf8>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	e7d5      	b.n	800b958 <scalbn+0x78>
 800b9ac:	f3af 8000 	nop.w
 800b9b0:	c2f8f359 	.word	0xc2f8f359
 800b9b4:	01a56e1f 	.word	0x01a56e1f
 800b9b8:	8800759c 	.word	0x8800759c
 800b9bc:	7e37e43c 	.word	0x7e37e43c
 800b9c0:	8800759c 	.word	0x8800759c
 800b9c4:	fe37e43c 	.word	0xfe37e43c
 800b9c8:	c2f8f359 	.word	0xc2f8f359
 800b9cc:	81a56e1f 	.word	0x81a56e1f
 800b9d0:	43500000 	.word	0x43500000
 800b9d4:	ffff3cb0 	.word	0xffff3cb0
 800b9d8:	3c900000 	.word	0x3c900000

0800b9dc <with_errno>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4604      	mov	r4, r0
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	4616      	mov	r6, r2
 800b9e4:	f7fe fae0 	bl	8009fa8 <__errno>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	6006      	str	r6, [r0, #0]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}

0800b9f0 <xflow>:
 800b9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9f2:	4614      	mov	r4, r2
 800b9f4:	461d      	mov	r5, r3
 800b9f6:	b108      	cbz	r0, 800b9fc <xflow+0xc>
 800b9f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9fc:	e9cd 2300 	strd	r2, r3, [sp]
 800ba00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fe0e 	bl	8000628 <__aeabi_dmul>
 800ba0c:	2222      	movs	r2, #34	; 0x22
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba14:	f7ff bfe2 	b.w	800b9dc <with_errno>

0800ba18 <__math_uflow>:
 800ba18:	b508      	push	{r3, lr}
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba20:	f7ff ffe6 	bl	800b9f0 <xflow>
 800ba24:	ec41 0b10 	vmov	d0, r0, r1
 800ba28:	bd08      	pop	{r3, pc}

0800ba2a <__math_oflow>:
 800ba2a:	b508      	push	{r3, lr}
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba32:	f7ff ffdd 	bl	800b9f0 <xflow>
 800ba36:	ec41 0b10 	vmov	d0, r0, r1
 800ba3a:	bd08      	pop	{r3, pc}

0800ba3c <__ieee754_sqrt>:
 800ba3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	ec55 4b10 	vmov	r4, r5, d0
 800ba44:	4e67      	ldr	r6, [pc, #412]	; (800bbe4 <__ieee754_sqrt+0x1a8>)
 800ba46:	43ae      	bics	r6, r5
 800ba48:	ee10 0a10 	vmov	r0, s0
 800ba4c:	ee10 2a10 	vmov	r2, s0
 800ba50:	4629      	mov	r1, r5
 800ba52:	462b      	mov	r3, r5
 800ba54:	d10d      	bne.n	800ba72 <__ieee754_sqrt+0x36>
 800ba56:	f7f4 fde7 	bl	8000628 <__aeabi_dmul>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f4 fc2b 	bl	80002bc <__adddf3>
 800ba66:	4604      	mov	r4, r0
 800ba68:	460d      	mov	r5, r1
 800ba6a:	ec45 4b10 	vmov	d0, r4, r5
 800ba6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	2d00      	cmp	r5, #0
 800ba74:	dc0b      	bgt.n	800ba8e <__ieee754_sqrt+0x52>
 800ba76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba7a:	4326      	orrs	r6, r4
 800ba7c:	d0f5      	beq.n	800ba6a <__ieee754_sqrt+0x2e>
 800ba7e:	b135      	cbz	r5, 800ba8e <__ieee754_sqrt+0x52>
 800ba80:	f7f4 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	f7f4 fef8 	bl	800087c <__aeabi_ddiv>
 800ba8c:	e7eb      	b.n	800ba66 <__ieee754_sqrt+0x2a>
 800ba8e:	1509      	asrs	r1, r1, #20
 800ba90:	f000 808d 	beq.w	800bbae <__ieee754_sqrt+0x172>
 800ba94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba98:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ba9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baa0:	07c9      	lsls	r1, r1, #31
 800baa2:	bf5c      	itt	pl
 800baa4:	005b      	lslpl	r3, r3, #1
 800baa6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800baaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800baae:	bf58      	it	pl
 800bab0:	0052      	lslpl	r2, r2, #1
 800bab2:	2500      	movs	r5, #0
 800bab4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bab8:	1076      	asrs	r6, r6, #1
 800baba:	0052      	lsls	r2, r2, #1
 800babc:	f04f 0e16 	mov.w	lr, #22
 800bac0:	46ac      	mov	ip, r5
 800bac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bac6:	eb0c 0001 	add.w	r0, ip, r1
 800baca:	4298      	cmp	r0, r3
 800bacc:	bfde      	ittt	le
 800bace:	1a1b      	suble	r3, r3, r0
 800bad0:	eb00 0c01 	addle.w	ip, r0, r1
 800bad4:	186d      	addle	r5, r5, r1
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	f1be 0e01 	subs.w	lr, lr, #1
 800badc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bae0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bae4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bae8:	d1ed      	bne.n	800bac6 <__ieee754_sqrt+0x8a>
 800baea:	4674      	mov	r4, lr
 800baec:	2720      	movs	r7, #32
 800baee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800baf2:	4563      	cmp	r3, ip
 800baf4:	eb01 000e 	add.w	r0, r1, lr
 800baf8:	dc02      	bgt.n	800bb00 <__ieee754_sqrt+0xc4>
 800bafa:	d113      	bne.n	800bb24 <__ieee754_sqrt+0xe8>
 800bafc:	4290      	cmp	r0, r2
 800bafe:	d811      	bhi.n	800bb24 <__ieee754_sqrt+0xe8>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	eb00 0e01 	add.w	lr, r0, r1
 800bb06:	da57      	bge.n	800bbb8 <__ieee754_sqrt+0x17c>
 800bb08:	f1be 0f00 	cmp.w	lr, #0
 800bb0c:	db54      	blt.n	800bbb8 <__ieee754_sqrt+0x17c>
 800bb0e:	f10c 0801 	add.w	r8, ip, #1
 800bb12:	eba3 030c 	sub.w	r3, r3, ip
 800bb16:	4290      	cmp	r0, r2
 800bb18:	bf88      	it	hi
 800bb1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bb1e:	1a12      	subs	r2, r2, r0
 800bb20:	440c      	add	r4, r1
 800bb22:	46c4      	mov	ip, r8
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	3f01      	subs	r7, #1
 800bb28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb2c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb34:	d1dd      	bne.n	800baf2 <__ieee754_sqrt+0xb6>
 800bb36:	4313      	orrs	r3, r2
 800bb38:	d01b      	beq.n	800bb72 <__ieee754_sqrt+0x136>
 800bb3a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bbe8 <__ieee754_sqrt+0x1ac>
 800bb3e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bbec <__ieee754_sqrt+0x1b0>
 800bb42:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb46:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb4a:	f7f4 fbb5 	bl	80002b8 <__aeabi_dsub>
 800bb4e:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 ffe1 	bl	8000b20 <__aeabi_dcmple>
 800bb5e:	b140      	cbz	r0, 800bb72 <__ieee754_sqrt+0x136>
 800bb60:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bb64:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb68:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb6c:	d126      	bne.n	800bbbc <__ieee754_sqrt+0x180>
 800bb6e:	3501      	adds	r5, #1
 800bb70:	463c      	mov	r4, r7
 800bb72:	106a      	asrs	r2, r5, #1
 800bb74:	0863      	lsrs	r3, r4, #1
 800bb76:	07e9      	lsls	r1, r5, #31
 800bb78:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bb7c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bb80:	bf48      	it	mi
 800bb82:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bb86:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	e76d      	b.n	800ba6a <__ieee754_sqrt+0x2e>
 800bb8e:	0ad3      	lsrs	r3, r2, #11
 800bb90:	3815      	subs	r0, #21
 800bb92:	0552      	lsls	r2, r2, #21
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d0fa      	beq.n	800bb8e <__ieee754_sqrt+0x152>
 800bb98:	02dc      	lsls	r4, r3, #11
 800bb9a:	d50a      	bpl.n	800bbb2 <__ieee754_sqrt+0x176>
 800bb9c:	f1c1 0420 	rsb	r4, r1, #32
 800bba0:	fa22 f404 	lsr.w	r4, r2, r4
 800bba4:	1e4d      	subs	r5, r1, #1
 800bba6:	408a      	lsls	r2, r1
 800bba8:	4323      	orrs	r3, r4
 800bbaa:	1b41      	subs	r1, r0, r5
 800bbac:	e772      	b.n	800ba94 <__ieee754_sqrt+0x58>
 800bbae:	4608      	mov	r0, r1
 800bbb0:	e7f0      	b.n	800bb94 <__ieee754_sqrt+0x158>
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	3101      	adds	r1, #1
 800bbb6:	e7ef      	b.n	800bb98 <__ieee754_sqrt+0x15c>
 800bbb8:	46e0      	mov	r8, ip
 800bbba:	e7aa      	b.n	800bb12 <__ieee754_sqrt+0xd6>
 800bbbc:	f7f4 fb7e 	bl	80002bc <__adddf3>
 800bbc0:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	f7f4 ff9e 	bl	8000b0c <__aeabi_dcmplt>
 800bbd0:	b120      	cbz	r0, 800bbdc <__ieee754_sqrt+0x1a0>
 800bbd2:	1ca0      	adds	r0, r4, #2
 800bbd4:	bf08      	it	eq
 800bbd6:	3501      	addeq	r5, #1
 800bbd8:	3402      	adds	r4, #2
 800bbda:	e7ca      	b.n	800bb72 <__ieee754_sqrt+0x136>
 800bbdc:	3401      	adds	r4, #1
 800bbde:	f024 0401 	bic.w	r4, r4, #1
 800bbe2:	e7c6      	b.n	800bb72 <__ieee754_sqrt+0x136>
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	20000068 	.word	0x20000068
 800bbec:	20000070 	.word	0x20000070

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
